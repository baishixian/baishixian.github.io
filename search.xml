<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一步一步使用 IntelliJ IDEA 创建简单的 Web 应用]]></title>
      <url>/2017/10/27/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E4%BD%BF%E7%94%A8%20IntelliJ%20IDEA%20%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%20Web%20%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>IntelliJ IDEA 来自于 JetBrains ，相信很多人都不会感到陌生，其 IED 整体界面风格还是让人很舒服的。下面将演示如何一步一步创建一个简单的 Web 应用的过程。该项目中有简单应用到<br> Hibernate 和 Servlet 、Tomcat、JSP 等相关内容，如果你还不是特别熟悉这些概念也没关系，这篇文章只是为了方便初学者能够快速了解整体流程。</p>
</blockquote>
<p>文中示例项目代码：<a href="https://github.com/baishixian/WebApplicationDemo" target="_blank" rel="external">WebApplicationDemo-Github</a></p>
<p>本片文章中，你将可以看到如何构建一个拥有简单注册和登录流程的应用。应用大致流程是：用户在 JSP 页面输入并提交表单数据，应用通过 Servlet 获取到请求参数后，使用 Hibernate 进行一些基本的数据库增删改查，处理简单业务逻辑后返回结果内容展示到 JSP 页面。</p>
<p>文章背景大致介绍清楚了，相信你也明白大概要做个什么样的东西。为了更直观地了解，开始之前，我们先来看一眼项目文件结构和实际运行的效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b4787ab120be892a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p>
<p>下面是实际运行效果截图，文章最后也有演示内容截图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c33a2a5aaa86f951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实际效果"></p>
<h3 id="1-下载-IDE"><a href="#1-下载-IDE" class="headerlink" title="1. 下载 IDE"></a>1. 下载 IDE</h3><p>关于开发工具 IDE  的选择因人而异，主要看团队开发环境和个人使用习惯，这里我们就直接选择 JetBrains 的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a> 下载了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-61840aad263ec04c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IntelliJ IDEA"></p>
<h3 id="2-搭建运行环境"><a href="#2-搭建运行环境" class="headerlink" title="2. 搭建运行环境"></a>2. 搭建运行环境</h3><ul>
<li><p><strong>确认系统已有 JDK 环境</strong>：关于安装过程这里就不展开了</p>
</li>
<li><p><strong>搭建 Tomcat 环境</strong>：这里推荐之前写的一篇文章：<a href="http://www.jianshu.com/p/85d31ad4d4cd" target="_blank" rel="external">Mac 系统 Tomcat 配置</a></p>
</li>
<li><p><strong>数据库环境</strong>：挑合适的就行了，我这里选熟悉的 MySQL，有需要的直接去 <a href="https://dev.mysql.com/downloads/file/?id=461482" target="_blank" rel="external">MySQL 官网下载</a>安装就行了，安装完成后记得去系统偏好设置中开启 MySQL 服务。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-02358e21b921d023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL"></p>
<blockquote>
<p>MySQL 服务使用前建议先改密码，不然会有使用时会有 <code>Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code> 提示。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 1.初始化状态无密码，直接按回车进入</div><div class="line">mysql -u root -p</div><div class="line"># 2.为 root 用户设置密码</div><div class="line">SET PASSWORD FOR root = PASSWORD(&apos;xxxxxx&apos;);</div><div class="line"># 3.刷新权限</div><div class="line">flush privileges;</div><div class="line"># 4.退出</div><div class="line">\q</div><div class="line"># 5.重新启动</div><div class="line">sudo mysql.server restart</div></pre></td></tr></table></figure>
<p>这推荐一个数据库可视化操作工具：<a href="https://sequelpro.com/" target="_blank" rel="external">Sequel Pro</a>，非常简单好用。</p>
<blockquote>
<p>你可能还需要一个 <a href="https://dev.mysql.com/downloads/connector/j/5.1.html" target="_blank" rel="external">MySQL 连接库</a>用于 IDE 中连接数据库，关于这个可以参考我之前的另一篇文章：<a href="http://www.jianshu.com/p/624bee99bc86" target="_blank" rel="external">处理 com.mysql.jdbc.Driver Not Found</a></p>
</blockquote>
<h3 id="3-创建项目数据库表"><a href="#3-创建项目数据库表" class="headerlink" title="3. 创建项目数据库表"></a>3. 创建项目数据库表</h3><p><strong>登录数据库，查看目前已有数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 登录 mysql</div><div class="line">mysql -u root -p</div><div class="line"># 查看已有数据库</div><div class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-63b225a269df3b1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>创建新的数据库：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 创建新的数据库</div><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> demo_web_app</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b599bf352defcc88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>创建新的数据表：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 选择数据库</div><div class="line"><span class="keyword">use</span> demo_web_app;</div><div class="line"># 创建数据表</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`userName`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  <span class="string">`password`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  <span class="string">`nickName`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  <span class="string">`email`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">DEFAULT</span> <span class="string">''</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">3</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-e59e3550df5f5587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>可视化工具查看</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-803149c0568f6a6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Sequel Pro"></p>
<h3 id="4-新建项目"><a href="#4-新建项目" class="headerlink" title="4. 新建项目"></a>4. 新建项目</h3><p><strong>这里为了展示创建一个简单的 web 应用，这里直接选 Web Application 和 Hibernate 即可：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b95da4888246425e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Web Application"></p>
<p><strong>勾选 Hibernate 支持</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-fd93268b1f01a5ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hibernate"></p>
<p><strong>输入项目名称和主 Module 名称</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d74eef420e6905b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Project"></p>
<p><strong>项目创建完成后，我们先简单看看项目文件结构</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-27d5848c8b480050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p>
<ul>
<li>lib 包中是 Hibernate 的相关支持库</li>
<li>src 包是存放项目源码和 Hibernate 配置文件</li>
<li>web 包是存放 web 页面相关的资源</li>
</ul>
<h3 id="5-项目配置"><a href="#5-项目配置" class="headerlink" title="5. 项目配置"></a>5. 项目配置</h3><p>选中 module 后点击右键打开 Open Module Settings， 配置 module 的依赖，项目比较简单我们选择 Hibernate 和 tomcat 依赖即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d1fb657b78d8ebcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Dependencies"></p>
<p><strong>注意 tomcat 的依赖配置路径，建议选其安装目录下的整个 lib </strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-ec7354d04d45b100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="tomcat"></p>
<p><strong>配置 Artifacts</strong></p>
<p>下面我们为 module 配置 Artifacts ，这是为了告诉 IDE 选中的 module 要如何进行打包，例如可以是 war exploded、war、jar、ear 等等这种打包形式。某个 module 有了 Artifacts 就可以部署到应用服务器中了。</p>
<ul>
<li><p><strong>jar (Java Archive)：</strong>通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便分发Java平台应用软件或库；</p>
</li>
<li><p><strong>war (Web application Archive)：</strong>一种JAR文件，其中包含用来分发的JSP、Java Servlet、Java类、XML文件、标签库、静态网页（HTML和相关文件），以及构成Web应用程序的其他资源；</p>
</li>
<li><p><strong>exploded：</strong>在这里你可以理解为展开，不压缩的意思。也就是war、jar等产出物没压缩前的目录结构。建议在开发的时候使用这种模式，便于修改了文件的效果立刻显现出来。</p>
</li>
</ul>
<blockquote>
<p>默认情况下，IDEA的 Modules 和 Artifacts 的 output 目录已经设置好了，不需要更改，打成 war 包的时候会自动在 WEB-INF 目录下生成 classes，然后把编译后的文件放进去。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-83d3633fb657ca76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改 Artifacts 配置"></p>
<blockquote>
<p>对于项目其他一些配置和作用，大家可以参考这篇文章：<a href="http://www.cnblogs.com/deng-cc/p/6416332.html" target="_blank" rel="external">理解 IntelliJ IDEA 的项目配置和Web部署</a></p>
</blockquote>
<p><strong>连接 Database，这里我们选择 MySQL 作为项目 Data Source：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-45789476b16541fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480" alt="Database"></p>
<p><strong>我们先前搭建项目基础环境时，已经创建了一个叫 demo_web_app 的数据库，这里直接进行连接即可：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-264778474089beb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Database connect"></p>
<p><strong>数据库连接成功后，我们我们可以可以在 IDE 中看到直观的看到数据库表内容，里面有我们之前创建的 user 表：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b746dfbd396069a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480" alt="database viewer"></p>
<p><strong>下面将创建项目时自动生成的 hibernate.cfg.xml 进行修改，按照实际数据库连接参数进行配置</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c44d42146798defa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hibernate.cfg.xml "></p>
<p><strong>hibernate.cfg.xml 修改完成后，我们在 Persistence 选项卡中选中  hibernate.cfg.xml 点击右键，打开 Gennerate Persistence Mapping 进行数据库产生持久化数据映射。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-329f286e7eb6af11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Persistence"></p>
<p><strong>此时 IDE 会自动加载数据库 Database Schema，我们选择一个用于存放映射出来实体类的 Package 路径。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-bc58c6d812f77697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gennerate Persistence Mapping"></p>
<p><strong>然后 IDE 就会自动生成实体类和对应的 .hbm.xml 文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-e02ed36ea19f3c53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UserEntity"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f1330e0441609719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UserEntity.hbm.xml"></p>
<p><strong>项目中 hibernate.cfg.xml 也会自动更新，添加 mapping 语句关联<br> UserEntity.hbm.xml 文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-e5d6d8f467530abf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hibernate.cfg.xml"></p>
<blockquote>
<p>这里牵涉到 ORM 的概念，如果你还不熟悉这里，建议可以先结合<br> Hibernate 的使用过程了解一下。</p>
</blockquote>
<p><strong>下面修改运行配置，可以设置运行时启动的浏览器和地址，这里使用默认的即可，注意下图蓝色选中标识的内容，选中之前配置的 Build Artifacts 选项，如果没有出现可以点击提示出现的 fix 按钮自动导入</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f8fae21fa272bf73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Run Configurations"></p>
<h3 id="6-编码实现"><a href="#6-编码实现" class="headerlink" title="6. 编码实现"></a>6. 编码实现</h3><blockquote>
<p>尽可能结合注释内容理解吧，各个知识点就不单独展开说明了</p>
</blockquote>
<p><strong>hibernate.cfg.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD//EN"</span></div><div class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/demo_web_app<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- DB schema will be updated if needed--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"gdut/bai/entity/UserEntity.hbm.xml"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</div><div class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</div><div class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</div><div class="line"><span class="keyword">import</span> org.hibernate.service.ServiceRegistry;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Hibernate 工具类</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Session 是由SessionFactory负责创建的，而SessionFactory的实现是线程安全的，</span></div><div class="line"><span class="comment"> * 多个并发的线程可以同时访问一个 SessionFactory 并从中获取 Session 实例，而Session不是线程安全的。</span></div><div class="line"><span class="comment"> * Session 中包含了数据库操作相关的状态信息，那么说如果多个线程同时使用一个 Session 实例进行 CRUD，就很有可能导致数据存取的混乱</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用 ThreadLocal 保存当前业务线程中的 Hibernate Session</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * ThreadLocal 并不是一个Thread，而是 thread local variable (线程局部变量)。</span></div><div class="line"><span class="comment">     * ThreadLocal 非常简单，就是为每一个使用该变量的线程都提供一个变量值的副本，每一个线程都可以独立地改变自己的副本，而不会和其它线程的副本冲突。</span></div><div class="line"><span class="comment">     * 从线程的角度看，就好像每一个线程都完全拥有一个该变量 (Map 类型 key-value 保存)。</span></div><div class="line"><span class="comment">     * ThreadLocal 这个类本身不是代表线程要访问的变量，这个类的成员变量才是。</span></div><div class="line"><span class="comment">     * 线程通过 ThreadLocal 的 get 和 set 方法去访问这个变量。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Session&gt; threadLocalSession = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  Hibernate 配置</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 静态代码块</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        buildSessionFactory();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HibernateUtil</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 Session</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> HibernateException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"getSession"</span>);</div><div class="line"></div><div class="line">        Session session = threadLocalSession.get();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span> || !session.isOpen()) &#123;</div><div class="line">            <span class="keyword">if</span> (sessionFactory == <span class="keyword">null</span>) &#123;</div><div class="line">                buildSessionFactory();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            session = (sessionFactory != <span class="keyword">null</span>) ? sessionFactory.openSession() : <span class="keyword">null</span>;</div><div class="line">            threadLocalSession.set(session);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> session;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 关闭 Session</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> HibernateException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</div><div class="line">        Session session = threadLocalSession.get();</div><div class="line">        threadLocalSession.set(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</div><div class="line">            session.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 SessionFactory</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> SessionFactory</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@deprecated</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 Configuration</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> Configuration</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@deprecated</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title">getConfiguration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构建 SessionFactory</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildSessionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"start buildSessionFactory."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 读取 Hibernate 的配置文件（默认 hibernate.cfg.xml）</span></div><div class="line">            <span class="keyword">if</span> (configuration == <span class="keyword">null</span>)&#123;</div><div class="line">                configuration = <span class="keyword">new</span> Configuration();</div><div class="line">            &#125;</div><div class="line">            configuration.configure(<span class="string">"/hibernate.cfg.xml"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 创建 ServiceRegistry，通过 StandardServiceRegistryBuilder 构建并设置 Configuration 信息</span></div><div class="line">            ServiceRegistry serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder()</div><div class="line">                    .configure() <span class="comment">// 可以指定配置文件（默认hibernate.cfg.xml）</span></div><div class="line">                    .build();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 创建 SessionFactory</span></div><div class="line">                sessionFactory = <span class="keyword">new</span> MetadataSources(serviceRegistry)</div><div class="line">                        .buildMetadata()</div><div class="line">                        .buildSessionFactory();</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">                StandardServiceRegistryBuilder.destroy(serviceRegistry);</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            System.err.println(<span class="string">"Creating SessionFactory Error."</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * DAO 工厂类</span></div><div class="line"><span class="comment"> * 单例模式</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> baishixian</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DAOFactory mInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DAOFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DAOFactory <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">synchronized</span> (DAOFactory.class)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>)&#123;</div><div class="line">                    mInstance = <span class="keyword">new</span> DAOFactory();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 UserDao</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> UserDao</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDAO</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl(session);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> gdut.bai.entity.UserEntity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 数据访问对象 DAO</span></div><div class="line"><span class="comment"> * 作为用户数据的访问接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> baishixian</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">insertUser</span><span class="params">(UserEntity user)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">updateUser</span><span class="params">(UserEntity user)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;UserEntity&gt; <span class="title">queryInfo</span><span class="params">(String type, Object value)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> gdut.bai.entity.UserEntity;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.Transaction;</div><div class="line"><span class="keyword">import</span> org.hibernate.query.Query;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.swing.*;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 数据访问对象 DAO</span></div><div class="line"><span class="comment"> * 作为用户数据的访问接口</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> baishixian</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Session session;</div><div class="line"></div><div class="line">    <span class="comment">// 提交数据的事务</span></div><div class="line">    <span class="keyword">private</span> Transaction transaction;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.session = session;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(UserEntity user)</span> </span>&#123;</div><div class="line">        String result;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            transaction = session.beginTransaction();</div><div class="line">            session.save(user);</div><div class="line">            transaction.commit();</div><div class="line">            result = <span class="string">"用户："</span> + user.getUserName() + <span class="string">"注册成功！"</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          <span class="comment">//  showMessage("RegisterInfo error:" + e);</span></div><div class="line">            e.printStackTrace();</div><div class="line">            result = <span class="string">"注册失败："</span> + e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(UserEntity user)</span> </span>&#123;</div><div class="line">        String result;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            transaction = session.beginTransaction();</div><div class="line">            session.update(user);</div><div class="line">            transaction.commit();</div><div class="line">            result = <span class="string">"用户："</span> + user.getUserName() + <span class="string">"信息更新成功！"</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          <span class="comment">//  showMessage("updateUser error:" + e);</span></div><div class="line">            e.printStackTrace();</div><div class="line">            result = <span class="string">"用户信息失败："</span> + e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title">queryInfo</span><span class="params">(String type, Object value)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"from gdut.bai.entity.UserEntity as user where user."</span> + type + <span class="string">"=?"</span>;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"queryInfo sql "</span> + sql + <span class="string">" value = "</span> + value);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            transaction = session.beginTransaction();</div><div class="line">            Query query = session.createQuery(sql);</div><div class="line">            query.setParameter(<span class="number">0</span>, value);</div><div class="line">            List list = query.list();</div><div class="line">            transaction.commit();</div><div class="line">            <span class="keyword">return</span> list;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            showMessage(<span class="string">"queryInfo error:"</span> + e);</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(String mess)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> type = JOptionPane.YES_NO_OPTION;</div><div class="line">        String title = <span class="string">"提示信息"</span>;</div><div class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>, mess, title, type);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.entity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> String nickName;</div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nickName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.nickName = nickName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        UserEntity that = (UserEntity) o;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (id != that.id) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (userName != <span class="keyword">null</span> ? !userName.equals(that.userName) : that.userName != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span> ? !password.equals(that.password) : that.password != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (nickName != <span class="keyword">null</span> ? !nickName.equals(that.nickName) : that.nickName != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (email != <span class="keyword">null</span> ? !email.equals(that.email) : that.email != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = id;</div><div class="line">        result = <span class="number">31</span> * result + (userName != <span class="keyword">null</span> ? userName.hashCode() : <span class="number">0</span>);</div><div class="line">        result = <span class="number">31</span> * result + (password != <span class="keyword">null</span> ? password.hashCode() : <span class="number">0</span>);</div><div class="line">        result = <span class="number">31</span> * result + (nickName != <span class="keyword">null</span> ? nickName.hashCode() : <span class="number">0</span>);</div><div class="line">        result = <span class="number">31</span> * result + (email != <span class="keyword">null</span> ? email.hashCode() : <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"gdut.bai.entity.UserEntity"</span> <span class="attr">table</span>=<span class="string">"user"</span> <span class="attr">schema</span>=<span class="string">"demo_web_app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">sql-type</span>=<span class="string">"int(11) unsigned"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">sql-type</span>=<span class="string">"char(30)"</span> <span class="attr">length</span>=<span class="string">"30"</span> <span class="attr">not-null</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">sql-type</span>=<span class="string">"char(30)"</span> <span class="attr">length</span>=<span class="string">"30"</span> <span class="attr">not-null</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nickName"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"nickName"</span> <span class="attr">sql-type</span>=<span class="string">"char(30)"</span> <span class="attr">length</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">sql-type</span>=<span class="string">"char(30)"</span> <span class="attr">length</span>=<span class="string">"30"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> gdut.bai.comment.Constance;</div><div class="line"><span class="keyword">import</span> gdut.bai.dao.DAOFactory;</div><div class="line"><span class="keyword">import</span> gdut.bai.dao.UserDao;</div><div class="line"><span class="keyword">import</span> gdut.bai.entity.UserEntity;</div><div class="line"><span class="keyword">import</span> gdut.bai.util.HibernateUtil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        <span class="comment">// 交由 post 方法统一处理</span></div><div class="line">        doPost(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 设置内容类型</span></div><div class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 文本输出流</span></div><div class="line">        PrintWriter printWriter = response.getWriter();</div><div class="line"></div><div class="line">        <span class="comment">// 获取请求提交的内容</span></div><div class="line">        String username = request.getParameter(Constance.USER_NAME);</div><div class="line">        String password = request.getParameter(Constance.PASSWORD);</div><div class="line"></div><div class="line">        <span class="comment">// 获取 UseDAO</span></div><div class="line">        UserDao userDao = DAOFactory.getInstance().getUserDAO(HibernateUtil.getSession());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || username.length() == <span class="number">0</span>) &#123;</div><div class="line">            printWriter.print(getErrorAlertMsg(<span class="string">"用户名不能为空"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            List&lt;UserEntity&gt; userList = userDao.queryInfo(Constance.USER_NAME, username);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (userList != <span class="keyword">null</span> &amp;&amp; !userList.isEmpty())&#123;</div><div class="line">                <span class="keyword">for</span> (UserEntity user : userList) &#123;</div><div class="line">                    <span class="keyword">if</span> (user.getUserName().equals(username)) &#123;</div><div class="line">                        <span class="keyword">if</span> (user.getPassword().equals(password)) &#123;</div><div class="line">                            printWriter.print(<span class="string">"登录成功！"</span>);</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            printWriter.print(getErrorAlertMsg(<span class="string">"密码错误！"</span>));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            HibernateUtil.closeSession();</div><div class="line"></div><div class="line">            printWriter.print(getErrorAlertMsg(<span class="string">"用户名错误！"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getErrorAlertMsg</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;script language='javascript'&gt;alert('"</span> + msg + <span class="string">"'); window.location.href='JSP/login.jsp';&lt;/script&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> gdut.bai.comment.Constance;</div><div class="line"><span class="keyword">import</span> gdut.bai.dao.DAOFactory;</div><div class="line"><span class="keyword">import</span> gdut.bai.dao.UserDao;</div><div class="line"><span class="keyword">import</span> gdut.bai.entity.UserEntity;</div><div class="line"><span class="keyword">import</span> gdut.bai.util.HibernateUtil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RegisterServlet"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        doPost(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line"></div><div class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line"></div><div class="line">        PrintWriter printWriter = response.getWriter();</div><div class="line">        String username = request.getParameter(Constance.USER_NAME);</div><div class="line">        String password = request.getParameter(Constance.PASSWORD);</div><div class="line">        String confirmPassword = request.getParameter(Constance.CONFIRM_PASSWORD);</div><div class="line"></div><div class="line">        UserDao userDao = DAOFactory.getInstance().getUserDAO(HibernateUtil.getSession());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span> || username.length() == <span class="number">0</span>) &#123;</div><div class="line">            printWriter.print(getErrorAlertMsg(<span class="string">"用户名不能为空！"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            List&lt;UserEntity&gt; userList = userDao.queryInfo(Constance.USER_NAME, username);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (userList != <span class="keyword">null</span> &amp;&amp; !userList.isEmpty())&#123;</div><div class="line">                <span class="keyword">for</span> (UserEntity user : userList) &#123;</div><div class="line">                    <span class="keyword">if</span> (user.getUserName().equals(username)) &#123;</div><div class="line">                        printWriter.print(getErrorAlertMsg(<span class="string">"用户名已存在"</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (password == <span class="keyword">null</span> || password.length() == <span class="number">0</span>) &#123;</div><div class="line">            printWriter.print(getErrorAlertMsg(<span class="string">"密码不能为空！"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!password.equals(confirmPassword)) &#123;</div><div class="line">            printWriter.print(getErrorAlertMsg(<span class="string">"两次输入的密码不一致！"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 创建 User 对象</span></div><div class="line">        UserEntity user = <span class="keyword">new</span> UserEntity();</div><div class="line">        user.setUserName(username);</div><div class="line">        user.setPassword(password);</div><div class="line"></div><div class="line">        <span class="comment">// 往数据库插入新用户信息</span></div><div class="line">        String result = userDao.insertUser(user);</div><div class="line">        printWriter.print(result);</div><div class="line"></div><div class="line">        HibernateUtil.closeSession();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getErrorAlertMsg</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;script language='javascript'&gt;alert('"</span> + msg + <span class="string">"'); window.location.href='JSP/register.jsp';&lt;/script&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gdut.bai.comment;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 存放常量</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> baishixian</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Constance</span> </span>&#123;</div><div class="line"></div><div class="line">    String USER_NAME = <span class="string">"userName"</span>;</div><div class="line">    String PASSWORD = <span class="string">"password"</span>;</div><div class="line">    String CONFIRM_PASSWORD = <span class="string">"confirmPassword"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>web/JSP/index.jsp</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%--</span></span></div><div class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></div><div class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">baishixian</span></span></div><div class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2017</span>/<span class="attr">10</span>/<span class="attr">26</span></span></div><div class="line"><span class="tag">  <span class="attr">Time:</span> 下午<span class="attr">3:32</span></span></div><div class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></div><div class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Application Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome Web Application<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line">  Hello World!<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"goRegister()"</span> <span class="attr">value</span>=<span class="string">"开始注册"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"goLogin()"</span> <span class="attr">value</span>=<span class="string">"开始登录"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">      function goLogin()&#123;</span></div><div class="line"><span class="undefined">          window.location = "JSP/login.jsp";</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      function goRegister()&#123;</span></div><div class="line"><span class="undefined">          window.location = "JSP/register.jsp";</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>web/JSP/login.jsp</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%--</span></span></div><div class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></div><div class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">baishixian</span></span></div><div class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2017</span>/<span class="attr">10</span>/<span class="attr">25</span></span></div><div class="line"><span class="tag">  <span class="attr">Time:</span> 下午<span class="attr">10:31</span></span></div><div class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></div><div class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%--</span></span></div><div class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></div><div class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">baishixian</span></span></div><div class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2017</span>/<span class="attr">10</span>/<span class="attr">25</span></span></div><div class="line"><span class="tag">  <span class="attr">Time:</span> 下午<span class="attr">10:31</span></span></div><div class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></div><div class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></span></div><div class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//" + <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" + <span class="attr">request.getServerPort</span>()</span></div><div class="line"><span class="tag">            + <span class="attr">path</span> + "/";</span></div><div class="line"><span class="tag">%&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is my page"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登            录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"LoginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"centertable"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td1"</span>&gt;</span>用 户 名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"text1"</span> <span class="attr">type</span>=<span class="string">"text"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td1"</span>&gt;</span>密    码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"text1"</span> <span class="attr">type</span>=<span class="string">"password"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>  <span class="attr">onchange</span>=<span class="string">"checkpwd()"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"javascript:history.back(-1);"</span> <span class="attr">value</span>=<span class="string">"返回"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>web/JSP/register.jsp</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%--</span></span></div><div class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></div><div class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">baishixian</span></span></div><div class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2017</span>/<span class="attr">10</span>/<span class="attr">25</span></span></div><div class="line"><span class="tag">  <span class="attr">Time:</span> 下午<span class="attr">10:31</span></span></div><div class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></div><div class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></span></div><div class="line"><span class="tag">    <span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//" + <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" + <span class="attr">request.getServerPort</span>()</span></div><div class="line"><span class="tag">            + <span class="attr">path</span> + "/";</span></div><div class="line"><span class="tag">%&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"This is my page"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注            册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"RegisterServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"centertable"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td1"</span>&gt;</span>用 户 名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"text1"</span> <span class="attr">type</span>=<span class="string">"text"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td1"</span>&gt;</span>密    码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"text1"</span> <span class="attr">type</span>=<span class="string">"password"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td1"</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"text1"</span> <span class="attr">type</span>=<span class="string">"password"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">name</span>=<span class="string">"confirmPassword"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">onchange</span>=<span class="string">"checkpwd()"</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"button"</span></span></div><div class="line"><span class="tag">                                                                   <span class="attr">onclick</span>=<span class="string">"javascript:history.back(-1);"</span> <span class="attr">value</span>=<span class="string">"返回"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="7-运行应用"><a href="#7-运行应用" class="headerlink" title="7. 运行应用"></a>7. 运行应用</h3><p><strong>上面运行参数配置后，点击 run 按钮，启动 Tomcat：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-aff80fb645e368db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480" alt="run"></p>
<p><strong>Tomcat 运行起来后，会自动打开 <code>localhost:8080</code> 页面</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c33a2a5aaa86f951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="欢迎页"></p>
<p><strong>跳转到注册页面，输入用户信息：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-22b0c0d70f7c8ed7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册页面"></p>
<p><strong>点击注册，检测数据库是否已有该用户，没有则新增一条。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d40e7dbd2eec0bfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册成功"></p>
<p><strong>注册成功以后的数据库表成功新增一条记录：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c2a331808b7131a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据表中新增内容"></p>
<p><strong>进入登录页面，试试刚刚注册的账号能否做登录验证：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-fc3b7639833157ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="登录页面"></p>
<p><strong>登录数据验证成功后，提示登录成功：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-52083830c34761d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="登录成功"></p>
<p><strong>测试密码输出的情况，提示一切正常：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-37e1ff17c215d4a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="密码输出的情况"></p>
<h3 id="Github-Project"><a href="#Github-Project" class="headerlink" title="Github Project"></a>Github Project</h3><p>文中示例项目代码：<a href="https://github.com/baishixian/WebApplicationDemo" target="_blank" rel="external">WebApplicationDemo-Github</a></p>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="http://www.cnblogs.com/deng-cc/p/6416332.html" target="_blank" rel="external">理解 IntelliJ IDEA 的项目配置和Web部署</a><br><a href="http://www.jianshu.com/p/624bee99bc86" target="_blank" rel="external">处理 com.mysql.jdbc.Driver Not Found</a><br><a href="http://www.jianshu.com/p/85d31ad4d4cd" target="_blank" rel="external">Mac 系统 Tomcat 配置</a><br><a href="http://blog.csdn.net/qq_29656961/article/details/78187073" target="_blank" rel="external">Hibernate实现登录注册小例子</a></p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[处理 com.mysql.jdbc.Driver Not Found]]></title>
      <url>/2017/10/26/%E5%A4%84%E7%90%86%20com.mysql.jdbc.Driver%20Not%20Found/</url>
      <content type="html"><![CDATA[<p>如果项目运行时遇到：<code>java.lang.ClassNotFoundException:com.mysql.jdbc.Driver</code> 或者发现项目 hibernate 配置文件 hibernate.cfg.xml 中出现 com.mysql.jdbc.Driver 引用异常，你可以按照下面步骤进行处理。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c6258c1607f105c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>原来是 hibernate 找不到 MySQL Connector Jar 包的问题，去 MySQL 官网进入 <a href="https://dev.mysql.com/downloads/connector/j/5.1.html" target="_blank" rel="external">MySQL Connector JDBC Downloads</a> 下载对应 Jar 包即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-2f9043872f07fc1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下载完成后解压文件得到 <code>mysql-connector-java-5.1.44-bin.jar</code> 包</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7a2a7b3c5afe785c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>为了避免以后项目中遗漏添加这个 jar 包的引用，建议把解压得到的 <code>mysql-connector-java-5.1.44-bin.jar</code> 拷贝到 tomcat 的 lib 目录下，这样后面添加 tomcat 的 lib 支持时，就会一同被引用到项目中了。</p>
<blockquote>
<p>如果你对 tomcat 环境配置不熟悉，建议参考我之前的一篇文章：<a href="http://www.jianshu.com/p/85d31ad4d4cd" target="_blank" rel="external">Mac 系统 Tomcat 配置</a></p>
</blockquote>
<p>首先将 <code>mysql-connector-java-5.1.44-bin.jar</code> 拷贝 tomcat 的 lib 目录，比如我的系统文件路径是：<code>/Library/Tomcat/lib</code> ：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-e100421048a485a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后就是把 tomcat 的 lib 添加到项目引用就好了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-3f0927ef9963ebfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-5a86ca232c57c310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/360" alt=""></p>
<p>添加完成后，等待项目重新 build 完成，再来看看项目中的 hibernate 的配置文件，引用正常，一切 OK。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-cb34bf03fa311dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>也可参考：<a href="http://blog.csdn.net/sakura_yuan/article/details/51730493" target="_blank" rel="external">intelliJ IDEA for mac 的 Mysql 数据库编程的JDBC配置问题及初级程序遇到的问题</a></p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 系统 Tomcat 配置]]></title>
      <url>/2017/10/25/Mac%20%E7%B3%BB%E7%BB%9F%20Tomcat%20%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Tomcat 是由 Apache 软件基金会下属的Jakarta项目开发的一个 Servlet 容器，按照 Sun Microsystems 提供的技术规范，实现了对 Servlet 和 JavaServer Page（JSP）的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。</p>
<blockquote>
<p>由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache Web 服务器混淆，Apache Web Server 是一个用 C 语言实现的 HTTP web server。这两个 HTTP web server 不是捆绑在一起的。Apache Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。</p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><strong>1.进入 <a href="http://tomcat.apache.org" target="_blank" rel="external">Apache Tomcat 官网</a> ，选择需要下载的版本</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-ecca2801b4acf6e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>2.选择最新 Tomcat 正式版本的压缩包进行下载</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d4552834cb6c2190.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>3. Tomcat 文件包文件包中的基本文件结构</strong></p>
<ul>
<li>bin 存放启动和关闭 tomcat 等脚本，一些 bat 批处理文件为 windows 系统专用，可以删除</li>
<li>conf 包含不同的配置文件，server.xml( Tomcat 的主要配置文件)和<br>web.xml</li>
<li>work 存放 jsp 编译后产生的 class 文件</li>
<li>webapp 存放应用程序示例，以后你要部署的应用程序也要放到此目录</li>
<li>logs 存放日志文件</li>
<li>lib/japser/common 这三个目录主要存放 tomcat 所需的 jar 文件</li>
</ul>
<p><strong>4.解压文件到 Library 文件夹</strong></p>
<p>为方便管理，在系统 /Library 目录下，创建一个 Tomcat 文件夹，再将已下载的 Tomcat 压缩包内全部文件解压到该文件夹中。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f5007328b8303627.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>Tomcat 的 bin 文件夹中有两个重要命令脚本文件： startup.sh 和 shutdown.sh，这是用来启动和关闭 tomcat 服务的。</p>
<p>运行前，我们需要为 bin 文件夹内的脚本文件增加权限，在 /Library/Tomcat/bin/ 路径下执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 *.sh</div></pre></td></tr></table></figure>
<p>现在我们可以试着启动 tomcat 服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh startup.sh</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-185102be077ab719.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>如果启动成功，这是可以用浏览器打开 <a href="http://localhost:8080/" target="_blank" rel="external">localhost:8080</a> 试试，如果能看到一只猫，说明 tomcat 服务正常启动了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-0e272ce6e85f5fd7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>当然如果想关闭 tomcat 服务，输入下面的命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh shutdown.sh</div></pre></td></tr></table></figure>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>启动 tomcat 服务时，默认使用的是 8080 端口，也可以自行更改端口配置，当然也可以添加用户。</p>
<p><strong>端口配置：</strong> Tomcat/conf/server.xml 文件中 更改 Connector 标签中的 port 属性为需要的端口即可。<br><strong>用户配置：</strong> Tomcat/conf/tomcat-users.xml 中 节点中添加：</p>
<p>为了方便在终端中简单一个命令就可以启动，我们可以配置一个 Tomcat 启动脚本，再把脚本命令路径加入到系统环境后就可以快速调用了：</p>
<p><strong>1. 使用文本编辑器添加以下运行脚本代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">case $1 in</div><div class="line">start)</div><div class="line">sh /Library/Tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">stop)</div><div class="line">sh /Library/Tomcat/bin/shutdown.sh</div><div class="line">;;</div><div class="line">restart)</div><div class="line">sh /Library/Tomcat/bin/shutdown.sh</div><div class="line">sh /Library/Tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">*)</div><div class="line">echo “Usage: start|stop|restart”</div><div class="line">;;</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure>
<p><strong>2. 将上述代码保存到文件文件中，文件命名为 tomcat，注意文件名小写并不带后缀。同样的，注意给文件赋予文件执行权限：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 tomcat</div></pre></td></tr></table></figure>
<p><strong>3. 将这个文件放置到 Tomcat/bin 所在目录</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b3b54f3cc56a1d50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>4. 添加 /Library/Tomcat/bin 路径到系统环境</strong></p>
<p>给 Linux/Unix 系统增加环境变量，是使用 export 命令。为了永久性生效，则需要考虑加入到登录的 profile中。</p>
<p>这个时候要考虑你当前使用的 shell，比如默认的 bash shell，则可编辑用户根目录下的隐藏文件 ./bash_profile。而对于 zsh 而言，需要编辑 .zshrc 这个文件 vi ~/.zshrc。</p>
<p>在终端中输入命令，编辑 profile 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure>
<p>在该文档最后加上一句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=&quot;/Library/Tomcat/bin:$PATH&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>解释：环境变量中，各个值是以冒号分隔开的。上面的语句表示给 PATH 这个变量重新赋值，新增路径 /Library/Tomcat/bin 的同时，其后面加上原来的 $PATH</p>
</blockquote>
<p>需要用户重新登录后生效，想要环境配置立即生效，则可执行下面的语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div><div class="line">或</div><div class="line">source .bash_profile</div></pre></td></tr></table></figure>
<p><strong>5. 验证下 tomcat 运行配置脚本，快捷命令如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">启动服务：tomcat start</div><div class="line">停止服务：tomcat stop</div><div class="line">重启服务：tomcat restart</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d46cc30f71241c41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 定时器 Timer 源码分析和使用建议]]></title>
      <url>/2017/10/23/Java%20%E5%AE%9A%E6%97%B6%E5%99%A8%20Timer%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Timer 定时器相信都不会陌生，之所以拿它来做源码分析，是发现整个控制流程可以体现很多有意思的东西。</p>
</blockquote>
<p>在业务开发中经常会遇到执行一些简单定时任务的需求，通常为了避免做一些看起来复杂的控制逻辑，一般考虑使用 Timer 来实现定时任务的执行，下面先给出一个最简单用法的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Timer timer = <span class="keyword">new</span> Timer();</div><div class="line">TimerTask timerTask = <span class="keyword">new</span> TimerTask() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// scheduledExecutionTime() 返回此任务最近开始执行的时间</span></div><div class="line">        Date date = <span class="keyword">new</span> Date(<span class="keyword">this</span>.scheduledExecutionTime());</div><div class="line">        System.out.println(<span class="string">"timeTask run "</span> + date);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 从现在开始每间隔 1000 ms 计划执行一个任务</span></div><div class="line">timer.schedule(timerTask, <span class="number">0</span>, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h3 id="Timer-概述"><a href="#Timer-概述" class="headerlink" title="Timer 概述"></a>Timer 概述</h3><p>Timer 可以按计划执行重复的任务或者定时执行指定任务，这是因为 Timer 内部利用了一个后台线程 TimerThread 有计划地执行指定任务。</p>
<ul>
<li><p><strong>Timer：</strong>是一个实用工具类，该类用来调度一个线程(schedule a thread)，使它可以在将来某一时刻执行。 Java 的 Timer 类可以调度一个任务运行一次或定期循环运行。 Timer tasks should complete quickly. 即定时器中的操作要尽可能花费短的时间。</p>
</li>
<li><p><strong>TimerTask：</strong>一个抽象类，它实现了 Runnable 接口。我们需要扩展该类以便创建自己的 TimerTask ，这个 TimerTask 可以被 Timer 调度。</p>
</li>
</ul>
<p>一个 Timer 对象对应的是单个后台线程，其内部维护了一个 TaskQueue，用于顺序执行计时器任务 TimeTask 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8b91de1a8e85b8fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Timer"></p>
<h3 id="Timer-中优先队列的实现"><a href="#Timer-中优先队列的实现" class="headerlink" title="Timer 中优先队列的实现"></a>Timer 中优先队列的实现</h3><p>TaskQueue 队列，内部用一个 TimerTask[] 数组实现优先队列（二叉堆），默认最大任务数是 128 ，当添加定时任务超过当前最大容量时会这个数组会拓展到原来 2 倍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d10a8b7bdf6e8ded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TaskQueue"></p>
<p>优先队列主要目的是为了找出、返回并删除优先队列中最小的元素，这里优先队列是通过数组实现了平衡二叉堆，TimeQueue 实现的二叉堆用数组表示时，具有最小 nextExecutionTime 的 TimerTask 在队列中为 queue[1] ，所以堆中根节点在数组中的位置是 queue[1] ，那么第 n 个位置 queue[n] 的子节点分别在 queue[2<em>n] 和 queue[2</em>n+1] 。关于优先队列的数据结构实现，这里推荐一篇文章：<a href="https://segmentfault.com/a/1190000005676271" target="_blank" rel="external">数据结构与算法学习笔记 - 优先队列、二叉堆、左式堆</a>。</p>
<p>按照 TaskQueue 的描述：<code>This class represents a timer task queue: a priority queue of TimerTasks, ordered on nextExecutionTime.</code>这是一个优先队列，队列的优先级按照 nextExecutionTime 进行调度。<br>也就说 TaskQueue 按照 TimerTask 的 nextExecutionTime 属性界定优先级，优先级高的任务先出队列，也就先执行任务调度。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7aedc068b20bac9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="队列操作"></p>
<p>如上图所示，列举了优先队列中部分操作的实现，优先队列插入和删除元素的复杂度都是O(logn)，所以<code>add, removeMin 和 rescheduleMin</code>方法的性能都是不错的。从上图可以知道，获取下一个计划执行任务时，取队列的头出列即可，为了减少额外性能消耗，移除队列头部元素的操作是先把队尾元素赋值到队首后，再把队尾置空，队列数量完成减一后进行优先权值操作。再下面看看保证优先队列最核心的两个方法<code>fixUp</code>和<code>fixDown</code>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-fe236c10cf3c1139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>两个方法的核心思路都是通过向上或向下调整二叉堆中元素所在位置，保持堆的有序性：<br>fixUp 是将元素值小于父节点的子节点与父节点交换位置，保持堆有序。交换位置后，原来的子节点可能仍然比更上层的父节点小，<br>所以整个过程需要循环进行。这样一来，原来的子节点有可能升级为层级更高的父节点，类似于一个轻的物体从湖底往上浮直到达到其重力与浮力相平衡的过程。<br>fixDown 将元素值大于子节点的父节点与子节点交换位置，交换位置后， 原来的父节点仍然有可能比其下面的子节点大， 所以还需要继续进行类相同的操作，以便保持堆的有序性。所以整个过程循环进行。 这类似于一个重的物体从湖面下沉到距离湖底的某个位置，直到达到其重力与浮力相平衡为止。<br>总的来说，就是调整大的元素下沉，小的元素上浮，反复调整后堆顶一直保持是堆中最小的元素，父节点元素要一直小于或等于子节点。</p>
<h3 id="TimerTask-的调度"><a href="#TimerTask-的调度" class="headerlink" title="TimerTask 的调度"></a>TimerTask 的调度</h3><p>前面说完 Timer 源码中优先队列的实现，下面我们来看看其如果操作优先队列，实现 TimerTask 的计划调度的：</p>
<p>Timer 提供了四个构造方法，每个构造方法都启动了一个后台线程（默认不是守护线程，除非主动指定）。所以对于每一个 Timer 对象而言，其内部都是对应着单个后台线程，这个线程用于顺序执行优先队列中所有的计时器任务。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-42142c4cf531ada0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Timer 构造器"></p>
<p>当初始化完成 Timer 后，我们就可以往 Timer 中添加定时任务，然后定时任务就会按照我们设定的时间交由 Timer 取调度执行。Timer 提供了 schedule 方法，该方法依靠多次重载的方式来适应不同的情况，具体如下：</p>
<ul>
<li><strong>schedule(TimerTask task, Date time)：</strong>安排在指定的时间执行指定的任务。</li>
<li><strong>schedule(TimerTask task, long delay) ：</strong>安排在指定延迟后执行指定的任务。</li>
<li><strong>schedule(TimerTask task, Date firstTime, long period) ：</strong>安排指定的任务在指定的时间开始进行重复的固定延迟执行。</li>
<li><p><strong>schedule(TimerTask task, long delay, long period) ：</strong>安排指定的任务从指定的延迟后开始进行重复的固定延迟执行。</p>
</li>
<li><p><strong>scheduleAtFixedRate :</strong>，scheduleAtFixedRate 方法与 schedule 相同，只不过他们的侧重点不同，区别后面分析。</p>
</li>
<li><p><strong>scheduleAtFixedRate(TimerTask task, Date firstTime, long period)：</strong>安排指定的任务在指定的时间开始进行重复的固定速率执行。</p>
</li>
<li><strong>scheduleAtFixedRate(TimerTask task, long delay, long period)：</strong>安排指定的任务在指定的延迟后开始进行重复的固定速率执行。</li>
</ul>
<p>首先来看 <code>schedule(TimerTask task, Date time)</code> 和 <code>schedule(TimerTask task, long delay)</code> ，第一个参数传入是定时任务的实例，区别在于方法的第二个参数，date 是在指定的时间点，delay 是当前时间延后多少毫秒。这就引出了 Timer 具有的两个特性：定时（在指定时间点执行任务）和延迟（延迟多少秒后执行任务）。<br>值得大家注意的是：这里所说时间都是跟系统时间相关的绝对时间，而不是相对时间，基于这点，Timer 对任务的调度计划和系统时间息息相关，所以它对系统时间的改变非常敏感。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d9ebde2454cc7893.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下面在来看看  <code>schedule(TimerTask task, Date time)</code> 和 <code>schedule(TimerTask task, Date firstTime, long period)</code> 的区别。对比方法中新增的 period 参数，period 作用区别在于 Timer 的另一个特性：周期性地执行任务（一次任务结束后，可以每隔个 period 豪秒后再执行任务，如此反复）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7d78a0ccdbdc385c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从上面 schedule 的方法重载来看，最终都是调用了  <code>sched(TimerTask task, long time, long period)</code> 方法，只是传入的参数不同，下面就再来看就看关于 schedule 和 scheduleAtFixedRate 的区别：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8a62f81550dc3c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从调用方法来看，他们的区别仅仅是传入 sched 方法 period 参数正负数的差别，所以具体的就要看 sched 方法的实现。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-9803b8eff5d79504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>可以看到 sched 方法主要是设置 TimerTask 属性和状态，比如<br> nextExecutionTime 等，然后将任务添加到队列中。能看出来，设置定时任务 task 属性时是加了锁的，而且在添加任务到队列时，这里使用 Timer 内 TaskQueue 实例作为对象锁，并且使用 wait 和 notify 方法来通知任务调度。Timer 类可以保证多个线程可以共享单个 Timer 对象而无需进行外部同步，所以 Timer 类是线程安全的。</p>
<p>这里注意区分开: 前面一个 Timer 对象中用于处理任务调度的后台线程TimerThread 实例和 schedule 方法传入后被加入到 TaskQueue 的 TimerTask 任务的实例，两者是不一样的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7e01da3d57848094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>要想知道为 TimerTask 设置属性和状态的作用，那就得进一步看看 TimerTask 类的具体实现了。</p>
<p>TimerTask 类是一个抽象类，可以由 Timer 安排为一次执行或重复执行的任务。它有一个抽象方法 run() 方法，用于子类实现 Runnale 接口。可以在 run 方法中写定时任务的具体业务逻辑。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-443d82e541e0bb41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TimerTask"></p>
<p>可以看到下图中 TimerTask 类中的文档描述，如果任务是按计划执行，那么 nextExecutionTime 属性是指下次任务的执行时间，时间格式是按照 System.currentTimeMillis 返回的。对于需要重复进行的任务，每个任务执行之前会更新这一属性。</p>
<p>而 period 属性是用来表示以毫秒为时间单位的重复任务。period 为正值时表示固定速率执行，负值表示固定延迟执行，值 0 表示一个非重复性的任务。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-bbaf767cda33831a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>所谓固定速率执行和固定延迟执行，固定延迟指的是定时任务会因为前一个任务的延迟而导致其后面的定时任务延时，而固定速率执行则不会有这个问题，它是直接按照计划的速率重复执行，不会考虑前面任务是否执行完。</p>
<p>这也是 scheduleAtFixedRate 与 schedule 方法的区别，两者侧重点不同，schedule 方法侧重保存间隔时间的稳定，而 scheduleAtFixedRate 方法更加侧重于保持执行频率的稳定。</p>
<p>另外 TimerTask 还有两个非抽象方法：</p>
<ul>
<li><strong>boolean cancel()：</strong>取消此计时器任务。</li>
<li><strong>long scheduledExecutionTime()：</strong>返回此任务最近实际执行的安排执行时间。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-3e6713893a93a932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>说完这些，下面就来看看 Timer 的后台线程具体是如何调度队列中的定时任务，可以看到 TimerThread 是持有任务队列进行操作的，也就具有了任务调度功能了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-5c344f1fef677442.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下面就来看看后台线程的 run 方法调用 mainLoop 具体做了什么：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7912e25921788751.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>前面说到每个 Timer 对象内部包含一个 TaskQueue 实例，在执行定时任务时，TimerThread 中将这个 taskqueue 对象作为锁，在任何时刻只能有一个线程执行 TimerTask 。Timer 类为了保证线程安全的，是不需要外部同步机制就可以共享同一个 Timer 对象。</p>
<p>可以看到 Timer 是不会捕获异常的，如果 TimerTask 抛出的了未检查异常则会导致 Timer 线程终止，同时 Timer 也不会重新恢复线程的执行，它会错误的认为整个 Timer 线程都会取消。同时，已经被安排但尚未执行的 TimerTask 也不会再执行了，新的任务也不能被调度。所以，如果 TimerTask 抛出未检查的异常，Timer 将会产生无法预料的行为。</p>
<p>注意看计划安排任务的核心代码，包括任务计划执行时间的设置，也有优先队列保持二叉堆序性地操作。下面代码很好地体现了 period 属性作用，period 为正值时表示固定速率执行，负值表示固定延迟执行，值 0 表示一个非重复性的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">currentTime = System.currentTimeMillis();</div><div class="line">executionTime = task.nextExecutionTime;</div><div class="line"><span class="keyword">if</span> (taskFired = (executionTime&lt;=currentTime)) &#123;</div><div class="line">    <span class="keyword">if</span> (task.period == <span class="number">0</span>) &#123; <span class="comment">// Non-repeating, remove</span></div><div class="line">        queue.removeMin();</div><div class="line">        task.state = TimerTask.EXECUTED;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// Repeating task, reschedule</span></div><div class="line">        queue.rescheduleMin(</div><div class="line">          task.period&lt;<span class="number">0</span> ? currentTime   - task.period</div><div class="line">                        : executionTime + task.period);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面提过 Timer 使用 schedule (TimerTask task, Date firstTime, long period) 方法执行的计时器任务可能会因为前一个任务执行时间较长而延时。每一次执行的 task 的计划时间会随着前一个 task 的实际时间而发生改变，也就是 scheduledExecutionTime(n+1) = realExecutionTime(n) + periodTime。也就是说如果第 n 个 task 由于某种情况导致这次的执行时间过程，最后导致 systemCurrentTime&gt;= scheduledExecutionTime(n+1)，这是第 n+1 个 task 并不会因为到时了而执行，他会等待第 n 个 task 执行完之后再执行，那么这样势必会导致 n+2 个的执行时间 scheduledExecutionTime 发生改变。所以<br> schedule 方法更加注重保存间隔时间的稳定。</p>
<p>而对于 scheduleAtFixedRate(TimerTask task, Date firstTime, long period)，在前面也提过 scheduleAtFixedRate 与 schedule 方法的侧重点不同，schedule 方法侧重保存间隔时间的稳定，而 scheduleAtFixedRate 方法更加侧重于保持执行频率的稳定。在 schedule 方法中会因为前一个任务的延迟而导致其后面的定时任务延时，而 scheduleAtFixedRate 方法则不会，如果第 n 个 task 执行时间过长导致 systemCurrentTime &gt;= scheduledExecutionTime(n+1)，则不会做任何等待他会立即执行第 n+1 个 task，所以 scheduleAtFixedRate 方法执行时间的计算方法不同于 schedule，而是 scheduledExecutionTime(n)=firstExecuteTime +n*periodTime，该计算方法永远保持不变。所以 scheduleAtFixedRate 更加侧重于保持执行频率的稳定。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-cc77eccae52aa6de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>说完了 Timer 的源码分析，相信大致上也能明白定时集整个流程是怎样的。下面根据上面这些内容，说一些实际使用建议。</p>
<h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p>最近使用阿里 Java 开发编码规约插件，可以看到提示是建议使用 ScheduledExecutorService 代替 Timer ：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8de291f692d99e0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>那为什么要使用 ScheduledExecutorService 代替 Timer ：</strong></p>
<ol>
<li><p>前面我们也有提到，Timer 是基于绝对时间的，对系统时间比较敏感，而 ScheduledThreadPoolExecutor 则是基于相对时间；</p>
</li>
<li><p>Timer 是内部是单一线程，而 ScheduledThreadPoolExecutor 内部是个线程池，所以可以支持多个任务并发执行。</p>
</li>
<li><p>Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。 </p>
</li>
<li><p>使用 ScheduledExecutorService 更容易明确任务实际执行策略，更方便自行控制。</p>
</li>
<li><p>默认 Timer 执行线程不是 daemon 线程, 任务执行完，主线程（或其他启动定时器的线程）结束时，task 线程并没有结束。需要注意潜在内存泄漏问题</p>
</li>
</ol>
<p>下面给出一个实际使用 ScheduledExecutorService 代替 Timer 的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * ImprovedTimer 改进过的定时器</span></div><div class="line"><span class="comment"> * 多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，</span></div><div class="line"><span class="comment"> * 使用ScheduledExecutorService则没有这个问题。</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> baishixian</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/10/16</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImprovedTimer</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors各个方法的弊端：</span></div><div class="line"><span class="comment">     *  1）newFixedThreadPool和newSingleThreadExecutor:</span></div><div class="line"><span class="comment">     *   主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。</span></div><div class="line"><span class="comment">     * 2）newCachedThreadPool和newScheduledThreadPool:</span></div><div class="line"><span class="comment">     *   主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     *  线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间，int类型的参数是设定</span></div><div class="line"><span class="comment">     *  线程池中线程的最小数目。当任务较多时，线程池可能会自动创建更多的工作线程来执行任务</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService executorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, <span class="keyword">new</span> ImprovedTimer.DaemonThreadFactory());</div><div class="line">    <span class="keyword">private</span> ScheduledFuture&lt;?&gt; improvedTimerFuture = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImprovedTimer</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 周期性重复执行定时任务</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> command 执行 Runnable</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> initialDelay 单位 MILLISECONDS</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> period 单位 MILLISECONDS</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(Runnable command, <span class="keyword">long</span> initialDelay, <span class="keyword">long</span> period)</span></span>&#123;</div><div class="line">        <span class="comment">// initialDelay 毫秒后开始执行任务，以后每隔 period 毫秒执行一次</span></div><div class="line"></div><div class="line">        <span class="comment">// schedule方法被用来延迟指定时间来执行某个指定任务。</span></div><div class="line">        <span class="comment">// 如果你需要周期性重复执行定时任务可以使用scheduleAtFixedRate或者scheduleWithFixedDelay方法，它们不同的是前者以固定频率执行，后者以相对固定频率执行。</span></div><div class="line">        <span class="comment">// 不管任务执行耗时是否大于间隔时间，scheduleAtFixedRate和scheduleWithFixedDelay都不会导致同一个任务并发地被执行。</span></div><div class="line">        <span class="comment">// 唯一不同的是scheduleWithFixedDelay是当前一个任务结束的时刻，开始结算间隔时间，如0秒开始执行第一次任务，任务耗时5秒，任务间隔时间3秒，那么第二次任务执行的时间是在第8秒开始。</span></div><div class="line"></div><div class="line">        improvedTimerFuture = executorService.scheduleAtFixedRate(command, initialDelay, period, TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 周期性重复执行定时任务</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> command 执行 Runnable</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> initialDelay 单位 MILLISECONDS</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(Runnable command, <span class="keyword">long</span> initialDelay)</span></span>&#123;</div><div class="line">        <span class="comment">// initialDelay 毫秒后开始执行任务</span></div><div class="line"></div><div class="line">        improvedTimerFuture = executorService.schedule(command, initialDelay, TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (improvedTimerFuture != <span class="keyword">null</span>) &#123;</div><div class="line">            improvedTimerFuture.cancel(<span class="keyword">true</span>);</div><div class="line">            improvedTimerFuture = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        cancel();</div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 守护线程工厂类，用于生产后台运行线程</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> AtomicInteger atoInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</div><div class="line">            Thread thread = <span class="keyword">new</span> Thread(runnable);</div><div class="line">            thread.setName(<span class="string">"schedule-pool-Thread-"</span> + atoInteger.getAndIncrement());</div><div class="line">            thread.setDaemon(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> thread;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<br><a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-add1.html" target="_blank" rel="external">详解 Java 定时任务</a><br><a href="http://blog.csdn.net/mark_lq/article/details/50320265" target="_blank" rel="external">Java多线程总结（3）— Timer 和 TimerTask深入分析</a></p>
<p>OVER…</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 获取 PackageInfo 引发 Crash 填坑]]></title>
      <url>/2017/09/28/Android%20%E8%8E%B7%E5%8F%96%20PackageInfo%20%E5%BC%95%E5%8F%91%20Crash%20%E5%A1%AB%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>一般 Android 通过 <code>PackageInfo</code> 这个类来获取应用安装包信息，比如应用内包含的所有 <code>Activity</code> 名称、应用版本号之类的。<code>PackageInfo</code> 通过 <code>PackageManager</code> 来获取，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);</div></pre></td></tr></table></figure>
<p>比如我们要获取应用版本号时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getVersionCode</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">      PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">0</span>);</div><div class="line">      <span class="keyword">return</span> info.versionCode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Tip:</strong> 获取应用自身版本号，推荐使用<figure class="highlight plain"><figcaption><span>``` 方式，这里只是为了方便举例说明问题。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">一般情况下，上面的方法是可以正常拿到数据的，但是在某些情况下这也可能会引发 `java.lang.RuntimeException: Package manager has died` 异常。</div></pre></td></tr></table></figure></p>
</blockquote>
<p> java.lang.RuntimeException: Package manager has died<br>    at android.app.ApplicationPackageManager.getPackageInfo(ApplicationPackageManager.java:82)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">为了分析引发 Package manager has died 这个问题的具体原因，我们先来看看 getPackageInfo 这个方法：`frameworks/base/core/java/android/app/ApplicationPackageManager.java:`</div><div class="line"></div><div class="line">```java</div><div class="line">@Override  </div><div class="line">public PackageInfo getPackageInfo(String packageName, int flags)  </div><div class="line">            throws NameNotFoundException &#123;  </div><div class="line">   try &#123;  </div><div class="line">        PackageInfo pi = mPM.getPackageInfo(packageName, flags, mContext.getUserId());  </div><div class="line">          if (pi != null) &#123;  </div><div class="line">              return pi;  </div><div class="line">           &#125;  </div><div class="line">       &#125; catch (RemoteException e) &#123;  </div><div class="line">           throw new RuntimeException(&quot;Package manager has died&quot;, e);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">   throw new NameNotFoundException(packageName);  </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>从上面可以看出，getPackageInfo 具体实现是一个 Binder 调用，造成这个的原因是因为发生了 RemoteException 。</p>
<p><strong>Binder 调用为什么会造成 Exception，下面再来看看 Binder 代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"> case FAILED_TRANSACTION:  </div><div class="line">         ALOGE(&quot;!!! FAILED BINDER TRANSACTION !!!&quot;);  </div><div class="line">         // TransactionTooLargeException is a checked exception, only throw from certain methods.  </div><div class="line">         // FIXME: Transaction too large is the most common reason for FAILED_TRANSACTION  </div><div class="line">         //        but it is not the only one.  The Binder driver can return BR_FAILED_REPLY  </div><div class="line">         //        for other reasons also, such as if the transaction is malformed or  </div><div class="line">         //        refers to an FD that has been closed.  We should change the driver  </div><div class="line">         //        to enable us to distinguish these cases in the future.  </div><div class="line">         jniThrowException(env, canThrowRemoteException  </div><div class="line">                 ? &quot;android/os/TransactionTooLargeException&quot;  </div><div class="line">                       : &quot;java/lang/RuntimeException&quot;, NULL);  </div><div class="line">         break;</div></pre></td></tr></table></figure></p>
<p>可以看出造成 Binder crash 抛出 RuntimeException 是因为获取应用 <code>PackageInfo</code> 中数据量太大了，超出了 <code>Binder</code> 可传递的最大容量，进而导致 <code>PackageManager</code> 崩溃。</p>
<p>对于上面这种情况，考虑如果只获取<code>versionName</code>和<code>versionCode</code>两个信息，不需要<code>Activity</code>等信息，设法让<code>PackageInfo</code>的信息量小点，避免超出了 <code>Binder</code> 可传递的最大容量。</p>
<p>我们可以利用 <code>getPackageInfo(String packageName, @PackageInfoFlags int flags)</code> 它的第二个参数 <code>flag</code> ，使得该方法返回的对象容量减小，比如使用 <code>PackageManager.GET_CONFIGURATIONS</code></p>
<p>此外，如果对与<code>Binder</code>的同时调用超出了限制就会抛出<br><code>TransactionTooLargeException</code>这个异常，虽然这种场景比较少见，但是我们还是有比较避免多个线程同时来调用<code>Binder</code>就可以了。</p>
<p>优化后代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static int getVersionCode(Context context) &#123;</div><div class="line">    synchronized(Hold.class)&#123;  </div><div class="line">        PackageInfo info = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_CONFIGURATIONS);</div><div class="line">        return info.versionCode;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[App 启动性能优化]]></title>
      <url>/2017/09/23/App%20%E5%90%AF%E5%8A%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<blockquote>
<p>关于应用启动优化，这算是个老生常谈的话题了，相信大家对于一些基本概念应该是有一定认识了，比如启动方式的区分冷启动、热启动之类的，这篇文章主要是通过一个实例来分析各个环节需要处理的问题。下面就是直接上手环节。</p>
</blockquote>
<h2 id="明确概念"><a href="#明确概念" class="headerlink" title="明确概念"></a>明确概念</h2><p><strong>命令行：</strong> <figure class="highlight plain"><figcaption><span>shell am start -W [PACKAGE-NAME]/[ACTIVITY-NAME] ```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">有没有想过，我们启动一个只有 Empty Activity 的 App 是怎么样的，没有对比就没有伤害，那我们直接试试</div><div class="line"></div><div class="line">![冷启动](http://upload-images.jianshu.io/upload_images/580515-bd72de43539e5c57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720)</div><div class="line"></div><div class="line">![热启动](http://upload-images.jianshu.io/upload_images/580515-39a48aa9e1f3ff79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720)</div><div class="line"></div><div class="line"></div><div class="line">## 场景创建</div><div class="line">为了说明问题，我们先来模拟一个实际开发中常见的项目环境。通常我们项目中会接入一些第三方库来支撑起应用的基础服务，有些三方库会要求在应用启动时就进行初始化。又比如应用可能会有一些日志上报和事件统计的数据要在启动时发，还有像启动时读取本地配置，页面需要预加载资源内容等等。</div><div class="line"></div><div class="line">这些呢，都是现实业务场景中经常会遇到的一些内容，如果开发只考虑业务上的实现而不考虑性能问题，那么就很有可能会出现一些不太好的用户体验。比如说用户启动应用后要长时间等待，或着页面交互时卡顿等等，这些问题在一些旧设备或低端机上面会更明显。所以说找台性能差的设备多体验下还是很有必要的，这样可以更直观的暴露问题。</div><div class="line"></div><div class="line">为什么出现白屏</div><div class="line">冷启动白屏持续时间可能会很长，这可是个槽糕的体验，它的启动速度是由于以下引起的：</div><div class="line"></div><div class="line">1、Application的onCreate流程，对于大型的APP来说，通常会在这里做大量的通用组件的初始化操作；</div><div class="line">建议：很多第三方SDK都放在Application初始化，我们可以放到用到的地方才进行初始化操作。</div><div class="line"></div><div class="line">2、Activity的onCreate流程，特别是UI的布局与渲染操作，如果布局过于复杂很可能导致严重的启动性能问题；</div><div class="line">建议：Activity仅初始化那些立即需要的对象，xml布局减少冗余或嵌套布局。</div><div class="line"></div><div class="line">优化APP启动速度意义重大，启动时间过长，可能会使用户直接卸载APP。</div><div class="line"></div><div class="line">## 定位问题</div><div class="line"></div><div class="line">可以参考我之前写的一篇文章：[Android 应用性能分析工具 — CPU Profiler](http://www.jianshu.com/p/e664c16bca67)，主要是分析启动过程的方法耗时情况，方便定位问题。</div><div class="line"></div><div class="line">## 实际优化</div><div class="line"></div><div class="line">### 设置启动动画</div><div class="line"></div><div class="line">```java</div><div class="line">public class SplashActivity extends BaseActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        // 不设置 ContentView 可节约布局加载时间，使用主题的背景图片即可</div><div class="line"></div><div class="line">        getWindow().getDecorView().post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                getMainHandler().postDelayed(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                       startActivity(MainActivity.class);</div><div class="line">                       finish();</div><div class="line">                    &#125;</div><div class="line">                &#125;, 500);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SplashActivity"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.Launcher"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">              <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".GameActivity"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">"keyboard|locale|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:windowSoftInputMode</span>=<span class="string">"stateHidden|adjustResize"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">       <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:screenOrientation"</span>&gt;</span>portrait<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnableSplitTouch"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:splitMotionEvents"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;</span>@style/Animation<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Launcher"</span>  <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/launch_screens<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 顶层启动图 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bitmap</span></span></div><div class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/splash_bg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Activity-页面数据懒加载"><a href="#Activity-页面数据懒加载" class="headerlink" title="Activity 页面数据懒加载"></a>Activity 页面数据懒加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 懒加载</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    ....</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ....</div><div class="line">        <span class="comment">// 页面启动时懒加载</span></div><div class="line">        <span class="keyword">this</span>.getWindow().getDecorView().post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mHandler.post(mLoadingRunnable);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Runnable mLoadingRunnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">             <span class="comment">// 数据填充，懒加载</span></div><div class="line">       &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="使用-InitializeService-进行异步初始化-SDK-配置，减少启动耗时："><a href="#使用-InitializeService-进行异步初始化-SDK-配置，减少启动耗时：" class="headerlink" title="使用 InitializeService 进行异步初始化 SDK 配置，减少启动耗时："></a>使用 InitializeService 进行异步初始化 SDK 配置，减少启动耗时：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * An &#123;<span class="doctag">@link</span> IntentService&#125; subclass for handling asynchronous task requests in</span></div><div class="line"><span class="comment"> * a service on a separate handler thread.</span></div><div class="line"><span class="comment"> * helper methods.</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> baishixian</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializeService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *    IntentService can perform</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_INIT_WHEN_APP_CREATE = <span class="string">"gdut.bai.service.action.INIT"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitializeService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"InitializeService"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Starts this service to perform action init with the given parameters. If</span></div><div class="line"><span class="comment">     * the service is already performing a task this action will be queued.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> IntentService</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startActionInit</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(context, InitializeService.class);</div><div class="line">        intent.setAction(ACTION_INIT_WHEN_APP_CREATE);</div><div class="line">        context.startService(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> String action = intent.getAction();</div><div class="line">            <span class="keyword">if</span> (ACTION_INIT_WHEN_APP_CREATE.equals(action)) &#123;</div><div class="line">                handleActionInit();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Handle action Init in the provided background thread with the provided</span></div><div class="line"><span class="comment">     * parameters.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleActionInit</span><span class="params">()</span> </span>&#123;</div><div class="line">        LogUtils.d(<span class="string">"InitializeService handleActionInit begin "</span> + System.currentTimeMillis());</div><div class="line"></div><div class="line">        DataCacheHelper.initDataCacheHelper(<span class="keyword">this</span>.getApplicationContext());</div><div class="line"></div><div class="line">        String channelName = ChannelUtil.getChannelName(<span class="keyword">this</span>.getApplicationContext());</div><div class="line">        <span class="comment">// App ID: 在TalkingData Game Analytics创建应用后会得到App ID。</span></div><div class="line">        <span class="comment">// 渠道 ID: 是渠道标识符，可通过不同渠道单独追踪数据。</span></div><div class="line">        TalkingDataGA.init(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"xxxxxxxx"</span>, channelName);</div><div class="line">     </div><div class="line">        <span class="comment">// AdTrack</span></div><div class="line">        TalkingDataAppCpa.init(<span class="keyword">this</span>.getApplicationContext(),<span class="string">"xxxxxxxx"</span>, channelName);</div><div class="line"></div><div class="line">        <span class="comment">// App Analytics</span></div><div class="line">        TCAgent.LOG_ON=<span class="keyword">true</span>;</div><div class="line">        <span class="comment">// App ID: 在TalkingData创建应用后，进入数据报表页中，在“系统设置”-“编辑应用”页面里查看App ID。</span></div><div class="line">        <span class="comment">// 渠道 ID: 是渠道标识符，可通过不同渠道单独追踪数据。</span></div><div class="line">        TCAgent.init(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"xxxxxxxx"</span>, channelName);</div><div class="line">        <span class="comment">// 如果已经在AndroidManifest.xml配置了App ID和渠道ID，调用TCAgent.init(this)即可；或与AndroidManifest.xml中的对应参数保持一致。</span></div><div class="line">        TCAgent.setReportUncaughtExceptions(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 开启反作弊功能</span></div><div class="line">        TCAgent.setAntiCheatingEnabled(<span class="keyword">this</span>.getApplicationContext(), <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 为了提高webview场景稳定性，及时发现并解决x5相关问题，</span></div><div class="line">        <span class="comment">// 当客户端发生crash等异常情况并上报给服务器时带上x5内核相关信息</span></div><div class="line">        <span class="comment">// 以bugly日志上报为例</span></div><div class="line">        CrashReport.UserStrategy strategy = <span class="keyword">new</span> CrashReport.UserStrategy(<span class="keyword">this</span>.getApplicationContext());</div><div class="line">        strategy.setCrashHandleCallback(<span class="keyword">new</span> CrashReport.CrashHandleCallback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt;  <span class="title">onCrashHandleStart</span><span class="params">(<span class="keyword">int</span> crashType, String errorType, String errorMessage, String errorStack)</span> </span>&#123;</div><div class="line">                LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">                String x5CrashInfo = com.tencent.smtt.sdk.WebView.getCrashExtraMessage(InitializeService.<span class="keyword">this</span>.getApplicationContext());</div><div class="line">                map.put(<span class="string">"x5crashInfo"</span>, x5CrashInfo);</div><div class="line">                <span class="keyword">return</span> map;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">byte</span>[] onCrashHandleStart2GetExtraDatas(<span class="keyword">int</span> crashType, String errorType, String errorMessage, String errorStack) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">"Extra data."</span>.getBytes(<span class="string">"UTF-8"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Bugly.setAppChannel(<span class="keyword">this</span>.getApplicationContext(), channelName);</div><div class="line">        Bugly.init(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"xxxxxxxx"</span>, <span class="keyword">false</span>, strategy);</div><div class="line"></div><div class="line">        LogUtils.d(<span class="string">"InitializeService handleActionInit end "</span> + System.currentTimeMillis());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        InitializeService.startActionInit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://androidperformance.com/2015/12/29/Android%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96-%E4%B8%80%E7%A7%8DDelayLoad%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E5%8E%9F%E7%90%86-%E4%B8%8B%E7%AF%87.html" target="_blank" rel="external">Android应用启动优化:一种DelayLoad的实现和原理(下篇)</a></p>
<p><a href="http://hukai.me/android-performance-patterns-season-6/" target="_blank" rel="external">Android性能优化典范 - 第6季</a><br><a href="https://developer.android.google.cn/topic/performance/launch-time.html" target="_blank" rel="external">Android Performance</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 应用性能分析工具 — CPU Profiler]]></title>
      <url>/2017/09/21/Android%20%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%20%E2%80%94%20CPU%20Profiler/</url>
      <content type="html"><![CDATA[<blockquote>
<p>相信大家对于 Android Studio 的分析工具都不陌生，我们可以借助分析工具对 App 性能数据进行很直观的阅读。文章内容参考了 <a href="https://developer.android.com/studio/profile/cpu-profiler.html" target="_blank" rel="external">Google 官方教程</a>上面的说明。</p>
</blockquote>
<p>下图时 Android Studio 3.0 中的 Android Profiler 面板，相较于之前版本，对于开发者而言更友好了。比如我们如果感觉到应用启动比较慢、用户操作有些卡顿，怀疑是代码性能问题但是又不知道什么原因造成的，通常很多性能问题都是主线程的执行耗时操作导致的，要想定位问题就得先知道实际运行时的性能数据，下面我们就拿 CPU Profiler 来学习如何借助分析工具优化性能。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-0fd63a6850dda6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Android Profiler"></p>
<h2 id="CPU-Profiler概述"><a href="#CPU-Profiler概述" class="headerlink" title="CPU Profiler概述"></a>CPU Profiler概述</h2><p>当你打开 CPU Profiler 时，它会立即开始显示应用程序的 CPU 使用情况和线程活动，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-72243f096fd6426a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>图中标示的位置代表了主要功能视图，具体功能如下：<br><strong>(1) 事件时间轴：</strong>显示应用程序在其生命周期中转换不同状态的活动，并指示用户与设备的交互，包括屏幕旋转事件。 要了解有关事件时间轴的更多信息，包括如何启用它，请阅读<a href="https://developer.android.com/studio/preview/features/android-profiler.html#advanced-profiling" target="_blank" rel="external">启用高级分析</a> 。</p>
<p><strong>(2) CPU 时间轴：</strong>显示应用程序的实时 CPU 使用率（占总可用CPU时间的百分比）以及应用程序使用的线程总数。 时间轴还显示其他进程（如系统进程或其他应用程序）的 CPU 使用情况，因此可以将其与应用程序的使用情况进行比较。 您可以通过沿着时间轴的水平轴移动鼠标来检查历史 CPU 使用率数据。</p>
<p><strong>(3) 线程活动时间轴：</strong>列出属于应用进程的每个线程，并使用下面列出的颜色在时间线上指示其活动。 记录方法跟踪后，可以从此时间轴中选择一个线程，以在跟踪窗格中检查其数据。<br><strong>绿色：</strong>线程处于活动状态或准备好使用 CPU ，也就是说它处于“运行”或“可运行”状态。<br><strong>黄色：</strong>线程处于活动状态，它正在等待I / O操作（如磁盘或网络I / O）完成后继续工作。<br><strong>灰色：</strong>线程处于休眠状态，不会占用任何 CPU 时间。这种状态可能会发生在线程需要访问尚不可用的资源时，线程主动进入休眠状态或者系统内核让线程进行休眠，直到所需的资源变得可用后再恢复。</p>
<p><strong>(4) 录制配置：</strong>允许您选择以下选项之一来确定分析器如何记录方法跟踪。<br><strong>Sampled：</strong>这是一种基于数据抽样的跟踪，分析器会在应用执行期间频繁地捕获应用程序的调用堆栈，通过收集比对捕获到的数据集来获得有关应用程序代码执行的时间和资源使用信息，适合跟踪生命周期相对较长的方法，否则你应该使用 Instrumented 配置。<br><strong>Instrumented：</strong>这是一种可在运行时调整应用程序以便记录每个方法开始和结束时的时间戳，适合跟踪生命周期相对较短的方法。通过收集和比较时间戳生成方法跟踪数据，包括时序信息和 CPU 使用情况等等。 请注意，由于与每种方法测量相关的开销会影响运行时性能，并可能影响分析数据，对于生命周期相对较短的方法，这一点更为显着。 此外，如果应用程序在短时间内执行大量方法，则分析器可能会快速超过其文件大小限制，并且无法记录任何其他跟踪数据。<br><strong>自定义编辑配置：</strong>允许自行更改上述采样和检测录制配置的某些默认值，并将其另存为自定义配置。 要了解更多信息，请参阅有关<a href="https://developer.android.com/studio/profile/cpu-profiler.html#configurations" target="_blank" rel="external">创建录制配置</a>的部分。</p>
<p><strong>(5) 录制按钮：</strong>开始和停止录制方法跟踪。 要了解更多信息，请参阅有关<a href="https://developer.android.com/studio/profile/cpu-profiler.html#method_traces" target="_blank" rel="external">录制和分析跟踪方法</a> 。</p>
<p><strong>注意：</strong>分析器还展示了 Android Studio 和 Android 平台添加到应用进程的线程的 CPU 使用情况，例如 <code>JDWP, Profile Saver, Studio:VMStats, Studio:Perfa 和 Studio:Heartbeat</code>等名称的线程（尽管如此，确切的名称显示在线程活动时间表可能会有所不同）。</p>
<h2 id="录制和分析跟踪方法"><a href="#录制和分析跟踪方法" class="headerlink" title="录制和分析跟踪方法"></a>录制和分析跟踪方法</h2><p>简单的说，就是点击 Android Studio 的 Android Profiler 窗口的<strong>录制</strong>按钮开始 CPU 跟踪记录，然后对应用程序进行一些操作，操作完成后再点击<strong>停止录制</strong>按钮结束录制。这时分析器会自动选择记录的时间范围并在方法跟踪窗格中显示其跟踪信息，如下图所示。如果要检查不同线程的方法跟踪，只需从线程活动时间轴中选择它即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-5e5fd1d55f47a2f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>录制方法跟踪后的 CPU Profiler 视图，主要有如下信息展示：</p>
<p><strong>(1) 所选时间范围：</strong>在跟踪窗格中确定要检查的记录时间段的一部分。 当你首次记录方法跟踪时，CPU分析器会自动在CPU时间轴中选择录制的整个长度。 如果要仅在记录的时间段的一部分内检查方法跟踪数据，则可以单击并拖动突出显示区域的边缘以修改其长度。<br><strong>(2) 时间戳记：</strong>指示记录的方法跟踪的开始和结束时间（相对于分析器开始从设备收集CPU使用情况信息）。 你可以单击时间戳以自动选择整个录制作为所选的时间范围 - 如果您要在其间切换多个录像，这一点特别有用。<br><strong>(3) 跟踪窗格：</strong>显示你选择的时间范围和线程的方法跟踪数据。 仅当你记录至少一个方法跟踪后，此窗格才会显示。 在此窗格中，您可以选择如何查看每个堆栈跟踪（使用跟踪选项卡）以及如何测量执行时间（使用时间参考下拉菜单）。<br><strong>(4) 跟踪窗格选项：</strong>可以选择将方法跟踪显示为<code>Top Down tree, Bottom Up tree, Call Chart, or Flame Char</code>模式，具体的区别可以在下面的部分中了解有关每个跟踪窗格选项卡的更多信息。<br><strong>(5) 时序信息菜单：</strong>确定每个方法调用的时序信息如何测量：<br>Wall clock time：表示实际运行时间。<br>Thread time：表示实际运行的时间减去线程不消耗 CPU 资源的时间段的部分。 对于任何指定的方法，其线程时间始终小于或等于<code>Wall clock time</code>。 使用线程时间可以更好地了解指定方法消耗的线程实际 CPU 使用量。</p>
<h3 id="使用-Call-Chart-选项分析跟踪"><a href="#使用-Call-Chart-选项分析跟踪" class="headerlink" title="使用 Call Chart 选项分析跟踪"></a>使用 Call Chart 选项分析跟踪</h3><p><strong>“Call Chart”</strong> 是按照方法调用的顺序进行跟踪分析的图示，其中方法调用（caller）的生命周期和时间在水平轴中表示，被其调用的方法沿垂直轴显示。 </p>
<blockquote>
<p>比如一个方法 A() 里面包含了对 B()  和 D() 方法的调用，那么在 <code>Call Chart</code> 模式下 B 和 D 方法在 A 的下方显示，横向长度代表它们所执行的时长。</p>
</blockquote>
<p>为了方便区分，分析工具对系统 API 的方法调用以橙色显示，对应用程序自己的方法的调用以绿色显示，并且对第三方 API（包括 Java 语言API）的方法调用显示为蓝色。 下图显示了一个示例调用图，并说明了给定方法的自我时间，子时间和总时间的概念。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-511b7e2ab9866bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt="方法 D self, children, and total time 的示意图"></p>
<h3 id="使用-Flame-Char-选项分析跟踪"><a href="#使用-Flame-Char-选项分析跟踪" class="headerlink" title="使用 Flame Char 选项分析跟踪"></a>使用 Flame Char 选项分析跟踪</h3><p><strong>“Flame Char”</strong> 提供了一个反向调用图，可以聚合相同的调用堆栈。 也就是说共享相同调用者序列的方法被收集表示为 Flame Char 图表中的一个更长的条（而不是将其显示为多个较短的条）。 这使得更容易看出哪些方法消耗最多的时间。 这也意味着水平轴不再代表时间轴，而是指示每个方法执行的相对时间量。</p>
<p>为了帮助说明这个概念，请看下图中的调用图。 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-6db120f9f96f72ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt=""></p>
<p>图中 B1, B2 和 B3 共享相同的调用者序列 (A→D→B)，所以它们被聚合。 类似地 C1 和 C3 被聚合，因为它们共享相同的调用者序列 (A→D→B→C) , 注意这其中不包括 C2 ，因为它具有不同的呼叫者序列 (A→D→C) 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-65608c37f497bde2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt=""></p>
<p>聚合相同的调用者序列的方法用于 Flame Char ，最终效果如下图所示。当我们指定 Flame Char 中的任何方法调用进行分析时，首先出现的肯定是消耗 CPU 时间最多的被调用者，这使得很容易看出哪些方法最消耗时间，方便有针对性优化。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-1bc3ce58fc6fca8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/720" alt=""></p>
<h3 id="使用-Top-Down-tree-和-Bottom-Up-tree-分析"><a href="#使用-Top-Down-tree-和-Bottom-Up-tree-分析" class="headerlink" title="使用 Top Down tree 和 Bottom Up tree 分析"></a>使用 Top Down tree 和 Bottom Up tree 分析</h3><p>Top Down 自上而下显示方法调用列表，其中展开方法节点显示被其调用者，图中的每个箭头指向一个被调用者。与 Flame 图表类似，自上而下的树聚合了共享相同调用堆栈的相同方法的跟踪信息</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f05c94f046116742.png?imageMogr2/auto-orient/strip%7CimageView2/2/h/480" alt=""></p>
<p>Bottom Up 自下而上显示方法调用列表，以帮助描述每个方法调用花费的 CPU 时间（时间也表示为所选时间段内线程总时间的百分比）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-a644e403c42069f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/h/480" alt=""></p>
<ul>
<li>Self：方法调用花费的时间执行自己的代码，而不是其被调用者的时间量</li>
<li>Children：方法调用花费的执行被调用者的时间，而不是自己的代码</li>
<li>Total：方法时间的总和，这表示应用程序执行方法调用的总时间量</li>
</ul>
<h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><p>运行项目，应用启动后我们可以在 Android Profiler 窗口中看到应用的实时运行数据，先选中要调试的 app 进程，点击 CPU 一栏会进入到 CPU Profiler 控制面板，这是我们可以点击录制按钮开始录制，进行一些操作后，再次点击按钮停止录制，这是 CPU Profiler 会自动打开分析窗口。如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8dfd5790a8a30aa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CPU Profiler"></p>
<p>我们想要看看方法执行的耗时情况，我们选择时序信息菜单为 Thread Time ，按照默认的 Call Chart 数据跟踪模式来看，可以很清楚的看到应用执行耗时情况。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-87cda9e2a8b06187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Thread Time.png"></p>
<p>图中展示了应用启动时的 onCreate 方法的耗时情况，其中黄色标示的事系统方法，绿色部分方法是我们的方法，也就是可优化的空间。比如上图中腾讯 x5 webview 初始化耗时很严重可以考虑做懒加载，另外一些获取渠道信息的方法 getChannel* 需要读取本地配置也是耗时操作，将这些方法做成异步处理。因为 onCreate 方法直接影响应用启动耗时，所以我们要避免其方法内的执行耗时操作。</p>
<p>于是按照上面定位到的问题，进行优化后，可以看到下面的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-a652d777d3a6ddc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="优化后加速应用启动"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 Android 8.0 安装 APK 权限问题]]></title>
      <url>/2017/09/15/%E5%85%B3%E4%BA%8E%20Android%208.0%20%E5%AE%89%E8%A3%85%20APK%20%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文章内容转自 Google 开发者中文博客文章：<a href="http://developers.googleblog.cn/2017/08/android-o_29.html" target="_blank" rel="external">在 Android O 中更安全地获取应用</a></p>
</blockquote>
<p>在 Android 8.0 中，安装未知应用权限提高了安装未知来源应用时的安全性。此权限与其他运行时权限一样，会与应用绑定，在安装时进行提示，确保用户授予使用安装来源的权限后，此权限才会提示用户安装应用。在运行 Android 8.0 或更高版本的设备上使用此权限时，恶意下载程序将无法骗取用户安装未获得预先授权的应用。</p>
<p>要利用此新行为，应用开发者需要能够通过软件包安装程序下载和安装其他应用，因此可能需要作出某些调整。如果应用使用 26 或更高级别的 targetSdkLevel，并且在用户安装其他应用时会进行提示，则清单文件需要包含 <a href="https://developer.android.google.cn/reference/android/Manifest.permission.html#REQUEST_INSTALL_PACKAGES" target="_blank" rel="external">REQUEST_INSTALL_PACKAGES</a> 权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.REQUEST_INSTALL_PACKAGES"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>未声明此权限的应用将无法安装其他应用，为无意进行此操作的应用提供便利的安全保护。您可以选择使用 <a href="https://developer.android.google.cn/reference/android/provider/Settings.html#ACTION_MANAGE_UNKNOWN_APP_SOURCES" target="_blank" rel="external">ACTION_MANAGE_UNKNOWN_APP_SOURCES</a> Intent 操作，预先将用户引导至<strong>安装未知应用</strong>权限界面。您也可以使用 PackageManager <a href="https://developer.android.google.cn/reference/android/content/pm/PackageManager.html#canRequestPackageInstalls(" target="_blank" rel="external">canRequestPackageInstalls()</a>) API，查询此权限的状态。 </p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 应用内微信 H5 支付]]></title>
      <url>/2017/09/15/Android%20%E5%BA%94%E7%94%A8%E5%86%85%E5%BE%AE%E4%BF%A1%20H5%20%E6%94%AF%E4%BB%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一般情况下，要实现应用内支付接入 App 支付 SDK 即可满足业务需求，不过考虑到对于一些类似游戏中心的场景，更多是需要支持<br> H5 支付。相对微信来说，支付宝的对接简单完善很多，所以本篇文章主要说说接入微信 H5 支付的流程和一些问题。</p>
</blockquote>
<h2 id="申请流程"><a href="#申请流程" class="headerlink" title="申请流程"></a>申请流程</h2><p>按照微信支付官网<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1" target="_blank" rel="external"> H5 支付说明</a> ，目前是没有直接申请接入 H5 支付的入口，只能在微信商户平台中去另行开通。然鹅～<a href="https://pay.weixin.qq.com" target="_blank" rel="external">微信商户平台</a>账户也不支持直接注册申请，只能先注册<a href="https://open.weixin.qq.com/" target="_blank" rel="external">微信开放平台</a>后接入微信 App 支付后才会有商户账号分配。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-52739879406fca59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>1. 注册<a href="https://open.weixin.qq.com/" target="_blank" rel="external">微信开放平台</a>账户</strong></p>
<p><strong>2. 申请开放平台开发者认证</strong></p>
<p><strong>3. 创建一个应用提交申核</strong></p>
<blockquote>
<p>需要应用相关资质，主要是为了开通支付功能。</p>
</blockquote>
<p><strong>4. 为应用申请微信 App 支付，开通微信支付功能</strong></p>
<blockquote>
<p>开通成功后会自动分配<a href="https://pay.weixin.qq.com" target="_blank" rel="external">微信商户平台</a>账户</p>
</blockquote>
<p><strong>5. 登录商户平台申请开通 H5 支付</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-26de7ff1a274e3a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里只是简单介绍下申请流程的主要环节，具体操作起来有多麻烦我也不想去体会。</p>
<h2 id="应用内接入"><a href="#应用内接入" class="headerlink" title="应用内接入"></a>应用内接入</h2><p>说到这里可能有些人想笑了，既然叫 H5 支付那不是应该跟应用本身没多大关系才对，不就是一个支付链接跳转而已吗。</p>
<p>话是这么说没错，但是具体操作起来还是有些坑需要去踩。由于微信 H5 支付本身就是浏览器网页支付场景下的产物，所以微信官方并不推荐在应用中使用 H5 支付。</p>
<p>跟浏览器不一样，在 WebView 中我们还需要自己处理一些问题。比如为了实现调起微信支付，需要对支付链接进行拦截后才能进行处理，下面就来看看这个流程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"> WebViewClient webViewClient = <span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">         <span class="comment">// 判断 url 的 scheme 进行相应的处理</span></div><div class="line">            <span class="keyword">if</span> (url.startsWith(<span class="string">"weixin://"</span>))&#123; </div><div class="line">               <span class="keyword">try</span>&#123;</div><div class="line">                    startActivity(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url)));</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="comment">//防止crash (如果手机上没有安装处理某个 scheme 开头的 url 的APP, 会导致crash)</span></div><div class="line">                    AlertDialog.Builder builder;</div><div class="line">                    builder = <span class="keyword">new</span> AlertDialog.Builder(mActivity);</div><div class="line">                    builder.setTitle(<span class="string">"支付中心"</span>).setMessage(<span class="string">"该手机没有安装微信客户端，请安装微信后重新完成支付，或换用支付宝进行支付"</span>).setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialogInterface, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">                            dialogInterface.dismiss();</div><div class="line">                        &#125;</div><div class="line">                    &#125;).create().show();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">"alipays://"</span>) || url.startsWith(<span class="string">"alipay"</span>))&#123; <span class="comment">// ------  对alipays:相关的scheme处理 -------</span></div><div class="line">                <span class="keyword">try</span>&#123;</div><div class="line">                    mActivity.startActivity(<span class="keyword">new</span> Intent(<span class="string">"android.intent.action.VIEW"</span>, Uri.parse(url)));</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="comment">// 启动支付宝失败，换成网页支付</span></div><div class="line">                    mPayWebView.loadUrl(url);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!(url.startsWith(<span class="string">"http"</span>) || url.startsWith(<span class="string">"https"</span>))) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            view.loadUrl(url, map);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你以为这样就完了是吧，然鹅并没有，实际开发中很大机率会出现微信提示<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4" target="_blank" rel="external">商家参数格式有误，请联系商家解决</a>的问题，而且更尴尬的是：这个问题并不会 iOS 中出现，也不会 Android 浏览器中出现，偏偏就是在应用的 WebView 中出现了。</p>
<p>查看官方文档出错问题介绍，说是当前调起 H5支付的 referer 为空导致，WTF? 难道 Android WebView 打开一个链接的 referer 不知指向当前页面的域名？都说实践是检验真理的唯一标准，抓包看看好像还真的是，很好，再一次感觉到了 Android 系统咖喱味代码。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-194e5041a6cf59e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>没办法，这锅也不能甩给微信，只能按照文档说的解决方法自己来背。然而这文档说的也是不明不白的，只是说域名设置要一致，废话不多说，直接动手更简单，下面给出示例代码（已自行检验过，真实可用的）</p>
<p><strong>直接在原有的代码基础上进行更改</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> WebViewClient webViewClient = <span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">          </div><div class="line">           ...</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!(url.startsWith(<span class="string">"http"</span>) || url.startsWith(<span class="string">"https"</span>))) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 比如我们申请时填写的是经常用来测试网络连通性的 http://www.baidu.com</span></div><div class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">            <span class="comment">// 指定申请微信 H5 支付时填写的域名，</span></div><div class="line">            map.put(<span class="string">"Referer"</span>, <span class="string">"http://www.baidu.com"</span>);</div><div class="line">            view.loadUrl(url, map);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###Over…</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL ES 响应触摸事件]]></title>
      <url>/2017/08/22/OpenGL%20ES%20%E5%93%8D%E5%BA%94%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在前面的文章中对于 OpenGL ES 在 Android 应用中的视图绘制整体流程和视图动作添加进行大致地介绍，如果你对这些概念还有些不熟悉，可以回头再看一下<a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external">前面的文章</a>。文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
</blockquote>
<p><a href="http://www.jianshu.com/p/47bd8da30d43" target="_blank" rel="external">上篇文章</a>中我们让一个三角形进行旋转动作，这是让 OpenGL 视图根据预设的程序进行动作。但是如果想要让 OpenGL ES 的图形对象响应用户的行为，就必须让 OpenGL ES 应用可以支持触控交互。为了响应用户的 touch 事件，就必须要在 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 中实现 <a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent" target="_blank" rel="external">onTouchEvent()</a>) 方法来监听处理触摸事件。</p>
<p>这篇文章将介绍如何监听触控事件，让用户可以手动控制旋转一个 OpenGL ES 图形对象。</p>
<h3 id="配置触摸监听器"><a href="#配置触摸监听器" class="headerlink" title="配置触摸监听器"></a>配置触摸监听器</h3><p>为了让我们的 OpenGL ES 应用响应触控事件，我们必须实现 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 类中的 <a href="http://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent" target="_blank" rel="external">onTouchEvent()</a>) 方法。下面的例子展示了如何监听 <a href="http://developer.android.com/reference/android/view/MotionEvent.html#ACTION_MOVE" target="_blank" rel="external">MotionEvent.ACTION_MOVE</a> 事件，并将事件转换为形状旋转的角度：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLSurfaceView05</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 旋转变换的比例因子</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> TOUCH_SCALE_FACTOR = <span class="number">180.0f</span> / <span class="number">320</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mPreviousX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mPreviousY;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">        <span class="comment">// MotionEvent reports input details from the touch screen</span></div><div class="line">        <span class="comment">// and other input controls. In this case, you are only</span></div><div class="line">        <span class="comment">// interested in events where the touch position changed.</span></div><div class="line"></div><div class="line">        <span class="comment">// getX/getY 触摸点相对于其所在view组件坐标系的坐标（以触摸点所在 view 的左上角为原点的坐标系）</span></div><div class="line">        <span class="comment">// getRawX/getRawY 触摸点相对于屏幕默认坐标系的坐标（以屏幕的左上角为原点的坐标系）</span></div><div class="line">        <span class="keyword">float</span> x = e.getX();</div><div class="line">        <span class="keyword">float</span> y = e.getY();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (e.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line"></div><div class="line">                <span class="keyword">float</span> dx = x - mPreviousX; <span class="comment">// 从左往有滑动时: x 值增大，dx 为正；反之则否。</span></div><div class="line">                <span class="keyword">float</span> dy = y - mPreviousY; <span class="comment">// 从上往下滑动时: y 值增大，dy 为正；反之则否。</span></div><div class="line"></div><div class="line">                <span class="comment">// OpenGL 绕 z 轴的旋转符合左手定则，即 z 轴朝屏幕里面为正。</span></div><div class="line">                <span class="comment">// 用户面对屏幕时，是从正面向里看（此时 camera 所处的 z 坐标位置为负数），当旋转度数增大时会进行逆时针旋转。</span></div><div class="line">                </div><div class="line">                <span class="comment">// 逆时针旋转判断条件1：触摸点处于 view 水平中线以下时，x 坐标应该要符合从右往左移动，此时 x 是减小的，所以 dx 取负数。</span></div><div class="line">                <span class="keyword">if</span> (y &gt; getHeight() / <span class="number">2</span>) &#123;</div><div class="line">                    dx = dx * -<span class="number">1</span> ;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 逆时针旋转判断条件2：触摸点处于 view 竖直中线以左时，y 坐标应该要符合从下往上移动，此时 y 是减小的，所以 dy 取负数。</span></div><div class="line">                <span class="keyword">if</span> (x &lt; getWidth() / <span class="number">2</span>) &#123;</div><div class="line">                    dy = dy * -<span class="number">1</span> ;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                mRenderer.setAngle(mRenderer.getAngle() + ((dx + dy) * TOUCH_SCALE_FACTOR));</div><div class="line"></div><div class="line">                <span class="comment">// 在计算旋转角度后，调用requestRender()来告诉渲染器现在可以进行渲染了</span></div><div class="line">                requestRender();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mPreviousX = x;</div><div class="line">        mPreviousY = y;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里为了便于理解触摸事件和图形旋转角度两者的关系，我们来看看这个过程到底做了什么，在此之前先来回顾一下 Android 中 View 的坐标系内容。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-24584f46ab1c99a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/h/720" alt="View 坐标系"></p>
<p>如上图所示，Android 中 View 的坐标系的原点位于竖直屏幕的左上角，这是一个二维坐标系。我们之所以能在二维的界面上模拟出三维的效果，这是借助了 Camera 来模拟人眼观测时构建的三维坐标系。如上图所示 Camera 三维坐标系是符合左手坐标系规则的，我们的旋转其实就是基于 Camera 坐标系中的 z 轴的旋转。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7d5ea7d10a406046.gif?imageMogr2/auto-orient/strip" alt="Camera 模拟三维观测"></p>
<blockquote>
<p>这里的 Camera 要和手机硬件上的相机区分开来，那个一般叫 Image Sensor 。具体可以参考这篇文章的描述：<a href="http://www.jianshu.com/p/7d88ec1347b6" target="_blank" rel="external">理解 Android 相机预览方向和拍照方向</a></p>
</blockquote>
<p>在 Android 中，关于图像模拟三维旋转的问题，其实是有很多地方讲究的。推荐学习下扔物线的 <a href="http://hencoder.com/ui-1-4/" target="_blank" rel="external">HenCoder Android 开发进阶：自定义 View 1-4 Canvas 对绘制的辅助</a> 系列文章，可以加深你对于 Camera 辅助绘制的机制。</p>
<p>这里简单介绍一下文章中提到的一个知识点，就是关于使用 Camera 来做三维变换时的旋转规律问题，Android 中的实际表现跟 OpenGL 的文档描述还是有一定区别的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-2b9150aeec689424.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20170821-182449@2x.png"></p>
<p>我们要实现图像平面旋转，其实就是绕 z 轴进行旋转。从上图可知，z 轴朝屏幕里面方向为正。我们面对屏幕时，是从屏幕正面向里面看， Camera 所处的位置应该在 z 轴的负坐标上（如图中黄色小点所示）。此时如果执行旋转方法，传入的旋转度数增大，图形会进行逆时针方向旋转，而减少旋转度数则变成顺时针方向旋转。</p>
<blockquote>
<p>假如 Camera 所处的位置在 z 轴的正坐标上时，增大旋转度数则会进行顺时针方向旋转。</p>
</blockquote>
<p>弄清楚旋转方向控制后，我们再来看看对于触摸事件要怎么处理。</p>
<h4 id="处理触摸事件"><a href="#处理触摸事件" class="headerlink" title="处理触摸事件"></a>处理触摸事件</h4><p>在 Android 中我们知道可以通过 setOnTouchListener 方法设置对 View 触摸事件的监听， 对于 OpenGL 的处理也一样。如果下图所示就是触摸点与屏幕和 View 之间的关系，我们需要获取触摸时相对于屏幕的位置（通过 MotionEvent 的 getX()/getY() 获取 ）与上次触摸时位置进行计算，判断移动的距离和方向。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c558a2f1c83ef924.png?imageMogr2/auto-orient/strip%7CimageView2/2/h/480" alt=""></p>
<p>在实际开发中，假设我们想要设计手指触摸屏幕进行逆时针旋转时图形也能跟着一起旋转，根据前面的 Camera 三维变换的了解，这就需要设置 Camera 处于 z 负轴上并不断增大旋转度数。我们判断手指是不是在进行逆时针旋转，有两个判断条件：</p>
<ol>
<li><p>当触摸点处于 view 水平中线以上时，x 坐标要符合从左往右移动，计算前后两次触摸点在 x 轴上距离差值 dx 就是移动距离；而当触摸点处于水平中线以下时，x 坐标要符合从右往左移动，此时 x 是减小的，所以对 dx 取负数。</p>
</li>
<li><p>当触摸点处于 view 竖直中线以有时，y 坐标要符合从上往下移动，计算前后两次触摸点在 y 轴上距离差值 dy 就是移动距离。而当触摸点处于 view 竖直中线以左时，y 坐标应该要符合从下往上移动，此时 y 是减小的，所以对 dy  取负数。</p>
</li>
</ol>
<p>计算出正确的触摸滑动距离后，我们再设计一个旋转度数因子与之相乘，以达到实际旋转时的角度大小。注意在计算旋转角度后，要调用 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#requestRender(" target="_blank" rel="external">requestRender()</a>)来告诉渲染器现在可以进行渲染了。这种办法对于这个例子来说是最有效的，因为图形并不需要重新绘制，除非有一个旋转角度的变化。当然，为了能够真正实现执行效率的提高，记得使用 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderMode(int" target="_blank" rel="external">setRenderMode()</a>) 方法以保证渲染器仅在数据发生变化时才会重新绘制图形，所以确认在代码中配置了下面的渲染模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyGLSurfaceView05</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// Render the view only when there is a change in the drawing data</span></div><div class="line">    setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置旋转角度"><a href="#设置旋转角度" class="headerlink" title="设置旋转角度"></a>设置旋转角度</h3><p>要实现跟随触摸手势实现动态改变图形旋转角度，我们需要在渲染器中添加一个 public 成员变量。由于渲染器代码运行在一个独立的线程中（非主UI线程），我们必须同时将该变量声明为 volatile （使其多线程可见）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer5</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">float</span> mAngle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getAngle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mAngle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAngle</span><span class="params">(<span class="keyword">float</span> angle)</span> </span>&#123;</div><div class="line">        mAngle = angle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="应用旋转效果"><a href="#应用旋转效果" class="headerlink" title="应用旋转效果"></a>应用旋转效果</h3><p>同上面文章提到的处理方式一样，把自动旋转时的度数换成上面的设置 mAngle 即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</div><div class="line">        <span class="comment">// 每次先清除已有绘制内容，避免旋转时绘制内容叠加</span></div><div class="line">         GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class="line"></div><div class="line">        <span class="keyword">float</span>[] scratch = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line"></div><div class="line">        <span class="comment">// Set the camera position (View matrix)</span></div><div class="line">        Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">3</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the projection and view transformation</span></div><div class="line">        Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mProjectionMatrix, <span class="number">0</span>, mViewMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// Create a rotation transformation for the triangle</span></div><div class="line">        <span class="comment">// 设置 Camera 位置（0, 0, -1.0f），此时处于 z 负轴上，模拟人眼一样从屏幕正面看向里面</span></div><div class="line">        <span class="comment">// 设置旋转角度 mAngle，此时如果增大旋转角度图形应该是逆时针绕 z 轴旋转</span></div><div class="line">        Matrix.setRotateM(mRotationMatrix, <span class="number">0</span>, mAngle, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1.0f</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Combine the rotation matrix with the projection and camera view</span></div><div class="line">        <span class="comment">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class="line">        <span class="comment">// for the matrix multiplication product to be correct.</span></div><div class="line">        Matrix.multiplyMM(scratch, <span class="number">0</span>, mMVPMatrix, <span class="number">0</span>, mRotationMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw shape</span></div><div class="line">        mTriangle.draw(scratch);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当完成了上述步骤，我们就可以运行这个程序，并通过手指在屏幕上的滑动旋转三角形了：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b9083e55ac2b66ba.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>上图中可以看到，当手势进行顺时针旋转时，图形却在进行逆时针旋转。这不是代码出错了，而是设置 Camera 位置变化后的正常效果，不信你可以将渲染器中的代码改成：<code>Matrix.setRotateM(mRotationMatrix, 0, mAngle, 0, 0, 1.0f);</code> 后再试试效果。如果你还没有理解这是为什么，建议可以再好好地回顾一下本篇文章中提到的内容。</p>
<p>关于 Android 中实现<a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external"> OpenGL ES 基础图形绘制</a>的学习到这篇文章为止就算到此为止了，这个系列主要是参考了<a href="https://developer.android.com/training/graphics/opengl/index.html" target="_blank" rel="external">Google 官方的学习教程 Displaying Graphics with OpenGL ES</a>，有兴趣的可以去看看原版内容加深理解，后续的文章会尽可能结合实际开发中的问题进行探讨学习。</p>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL ES 添加视图动作]]></title>
      <url>/2017/08/21/OpenGL%20ES%20%E6%B7%BB%E5%8A%A0%E8%A7%86%E5%9B%BE%E5%8A%A8%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在前面的文章中介绍了如何绘制形状，并了解通过投影变换和相机视图变换来调整绘制对象的展示比例。这些是基本的 OpenGL 绘制图像流程，如果你对这些概念还有些不熟悉，可以回头再看一下<a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external">前面的文章</a>。文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
</blockquote>
<p>除了绘制图形这样的基本特性之外，OpenGL ES 还提供了其它的一些功能，比如在三维空间中对绘制图形进行移动旋转和变换操作等基本动作。</p>
<h3 id="旋转一个图形"><a href="#旋转一个图形" class="headerlink" title="旋转一个图形"></a>旋转一个图形</h3><p>使用 OpenGL ES 2.0 旋转一个绘制图形是比较简单的。在渲染器中创建另一个变换矩阵（一个旋转矩阵），并且将它和我们的之前的投影变换矩阵以及相机视角变换矩阵结合在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private float[] mRotationMatrix = new float[16];</div><div class="line">public void onDrawFrame(GL10 gl) &#123;</div><div class="line">    float[] scratch = new float[16];</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    // Create a rotation transformation for the triangle</div><div class="line">    long time = SystemClock.uptimeMillis() % 4000L;</div><div class="line">    float angle = 0.090f * ((int) time);</div><div class="line">    Matrix.setRotateM(mRotationMatrix, 0, angle, 0, 0, -1.0f);</div><div class="line"></div><div class="line">    // Combine the rotation matrix with the projection and camera view</div><div class="line">    // Note that the mMVPMatrix factor *must be first* in order</div><div class="line">    // for the matrix multiplication product to be correct.</div><div class="line">    Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mRotationMatrix, 0);</div><div class="line"></div><div class="line">    // Draw triangle</div><div class="line">    mTriangle.draw(scratch);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果你运行上面代码时，发现三角形还是没有旋转，记得要先启用连续渲染，也就是要把<code>setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</code> 这一代码注释掉。目前是需要实现自动旋转的场景，不能配置 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_WHEN_DIRTY" target="_blank" rel="external">GLSurfaceView.RENDERMODE_WHEN_DIRTY</a>  这种渲染模式。</p>
</blockquote>
<p><strong>还有一点需要注意的是：</strong>在  onDrawFrame(GL10 gl) 方法中，记得先清除上次一的绘制内容，不然会有叠加效果（如果你是想动态演示通过三角形画圆的抗锯齿过程就另说了～），如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/580515-8d44669fb50b9152.gif?imageMogr2/auto-orient/strip" alt="每次不清除直接绘制的效果图.gif"></p>
<p>下面贴上渲染器类的全部代码供参考：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer4</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Triangle mTriangle;</div><div class="line"></div><div class="line">    <span class="comment">// mMVPMatrix is an abbreviation for "Model View Projection Matrix"</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mMVPMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mProjectionMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mViewMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mRotationMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</div><div class="line">        <span class="comment">// initialize a triangle</span></div><div class="line">        mTriangle = <span class="keyword">new</span> Triangle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) width / height;</div><div class="line"></div><div class="line">        <span class="comment">// this projection matrix is applied to object coordinates</span></div><div class="line">        <span class="comment">// in the onDrawFrame() method</span></div><div class="line">        Matrix.frustumM(mProjectionMatrix, <span class="number">0</span>, -ratio, ratio, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</div><div class="line">        <span class="comment">// 每次先清除已有绘制内容，避免旋转时绘制内容叠加</span></div><div class="line">       <span class="comment">// GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</span></div><div class="line"></div><div class="line">        <span class="keyword">float</span>[] scratch = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line"></div><div class="line">        <span class="comment">// Set the camera position (View matrix)</span></div><div class="line">        Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">3</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the projection and view transformation</span></div><div class="line">        Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mProjectionMatrix, <span class="number">0</span>, mViewMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// Create a rotation transformation for the triangle</span></div><div class="line">        <span class="keyword">long</span> time = SystemClock.uptimeMillis() % <span class="number">4000L</span>;</div><div class="line">        <span class="keyword">float</span> angle = <span class="number">0.090f</span> * ((<span class="keyword">int</span>) time);</div><div class="line">        Matrix.setRotateM(mRotationMatrix, <span class="number">0</span>, angle, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1.0f</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Combine the rotation matrix with the projection and camera view</span></div><div class="line">        <span class="comment">// Note that the mMVPMatrix factor *must be first* in order</span></div><div class="line">        <span class="comment">// for the matrix multiplication product to be correct.</span></div><div class="line">        Matrix.multiplyMM(scratch, <span class="number">0</span>, mMVPMatrix, <span class="number">0</span>, mRotationMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw shape</span></div><div class="line">        mTriangle.draw(scratch);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是实际运行时的效果图：<br><img src="http://upload-images.jianshu.io/upload_images/580515-8e3c5b2870e6315c.gif?imageMogr2/auto-orient/strip" alt="旋转效果图.gif"></p>
<h3 id="启用连续渲染"><a href="#启用连续渲染" class="headerlink" title="启用连续渲染"></a>启用连续渲染</h3><p>前面有提到关于设置 <code>GLSurfaceView.Renderer</code> 的渲染模式为 <code>RENDERMODE_WHEN_DIRTY</code> 时跟默认效果的差异性。在上面示例中的实际表现就是：渲染模式会影响三角形是否会自动旋转。若要运行绘制对象持续渲染，需下将渲染模式设置为 <code>RENDERMODE_CONTINUOUSLY</code> (本身也是默认的渲染模式)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyGLSurfaceView04</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">     <span class="comment">// 可选选项，是将渲染模式设置为仅在你的绘制数据发生变化时才在视图中进行绘制操作</span></div><div class="line">    <span class="comment">// 如果选用这一配置选项，那么除非调用了requestRender()，否则GLSurfaceView不会被重新绘制，这样做可以让应用的性能及效率得到提高。</span></div><div class="line">    <span class="comment">//setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里再简单归纳一下，如果将设置渲染模式为 <code>RENDERMODE_WHEN_DIRTY</code><br>后，则相当于取消了连续渲染机制，此时 OpenGL 只会对这个图形执行一次绘制，然后就得等待 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 容器的 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#requestRender(" target="_blank" rel="external">requestRender()</a>) 方法被调用后才会继续执行渲染操作。<br>而如果把 <code>setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</code> 代码注释掉，就会恢复启用连续渲染模式。</p>
<p>在实际使用中，除非某个绘制对象它的变化和用户的交互无关，不然的话一般还是建议将 <code>setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</code> 配置打开。</p>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
<p>既然说到了绘制对象与用户的交互，下面就来说说 OpenGL ES 如何响应用户的操作。</p>
<h4 id="gt-gt-gt-gt-Next-gt-gt-gt-gt-OpenGL-ES-响应触摸事件"><a href="#gt-gt-gt-gt-Next-gt-gt-gt-gt-OpenGL-ES-响应触摸事件" class="headerlink" title="&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  OpenGL ES 响应触摸事件"></a>&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  <a href="http://www.jianshu.com/p/7169d66fd456" target="_blank" rel="external">OpenGL ES 响应触摸事件</a></h4>]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL ES 运用投影与相机视角]]></title>
      <url>/2017/08/21/OpenGL%20ES%20%E8%BF%90%E7%94%A8%E6%8A%95%E5%BD%B1%E4%B8%8E%E7%9B%B8%E6%9C%BA%E8%A7%86%E8%A7%92/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
</blockquote>
<p>在前面的文章中介绍了如何绘制形状，相信你对于使用 OpenGL ES 进行绘制的流程有了大致的了解。其中包括一些基本概念：</p>
<ul>
<li>GLSurfaceView 作为绘制视图内容的容器载体；</li>
<li>GLSurfaceView. Renderer 作为控制绘制内容和过程的渲染器</li>
<li>OpenGL 坐标系的概念以及借助 ByteBuffer 定义形状的坐标数据</li>
<li>绘制形状的三要素：顶点着色器、片元着色器、程式</li>
</ul>
<p>如果你对这些概念还有些不熟悉，可以回头再看一下<a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external">前面的文章</a>，把这些简单的概念过一遍可以强化理解。 </p>
<p>在 OpenGL ES 环境中，利用投影和相机视角可以让显示的绘图对象更加酷似于我们用肉眼看到的真实物体。该物理视角的模拟是对绘制对象坐标的进行数学变换实现的：</p>
<ul>
<li><p><strong>投影（Projection）：</strong>这个是基于调整绘图对象在 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 中的宽和高的坐标来转换的。如果没有该计算，那么用 OpenGL ES 绘制的对象会由于其长宽比例和 View 窗口比例的不一致而发生形变。一个投影变换一般仅当 OpenGL View 的比例在<strong>刚被建立</strong>或<strong>发生变化</strong>（在  <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int" target="_blank" rel="external">onSurfaceChanged()</a>) 中回调）时才进行计算。</p>
</li>
<li><p><strong>相机视角（Camera View）：</strong>这个变换会基于一个虚拟相机位置改变来进行。注意到 OpenGL ES 并没有定义一个没有定义一个真实的 camera 对象，而是提供了一些辅助方法，通过对绘图对象的变换来模拟相机视角。一个相机视角变换可能仅在<a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 刚建立时计算一次，也可能根据用户的行为或者 app 的功能进行动态调整。</p>
</li>
</ul>
<blockquote>
<p>关于更多 OpenGL ES 投影和坐标映射的知识，可以阅读 <a href="http://developer.android.com/guide/topics/graphics/opengl.html#coordinate-mapping" target="_blank" rel="external">Mapping Coordinates for Drawn Objects</a>。</p>
</blockquote>
<p>本篇文章主要阐述如何创建一个投影和一个相机视角，并应用到 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 中的绘制图像上。</p>
<h3 id="定义一个投影"><a href="#定义一个投影" class="headerlink" title="定义一个投影"></a>定义一个投影</h3><p>投影变换的数据是在 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="external">GLSurfaceView.Renderer</a> 类的 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int" target="_blank" rel="external">onSurfaceChanged()</a>) 方法中计算出来的。</p>
<p>下面的代码先获取 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 的高和宽，然后利用它并使用 <a href="http://developer.android.com/reference/android/opengl/Matrix.html#frustumM(float[],int,float,float,float,float,float,float" target="_blank" rel="external">Matrix.frustumM()</a>) 方法来填充一个投影变换矩阵（Projection Transformation <a href="http://developer.android.com/reference/android/opengl/Matrix.html" target="_blank" rel="external">Matrix</a>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer3</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"> </div><div class="line">    ...</div><div class="line">    <span class="comment">// mMVPMatrix is an abbreviation for "Model View Projection Matrix"</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mMVPMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mProjectionMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mViewMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">        <span class="comment">// 获取 GLSurfaceView 的宽和高的比例</span></div><div class="line">        <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) width / height;</div><div class="line"></div><div class="line">        <span class="comment">// this projection matrix is applied to object coordinates</span></div><div class="line">        <span class="comment">// in the onDrawFrame() method</span></div><div class="line"></div><div class="line">       <span class="comment">// 填充了一个投影矩阵：mProjectionMatrix</span></div><div class="line">        Matrix.frustumM(mProjectionMatrix, <span class="number">0</span>, -ratio, ratio, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note：</strong> 在绘图对象上只应用一个投影变换时会导致显示 empty display 。所以我们在进行 projection transformation（投影变换）时通常还要进行一个相机视角转化，使得显示对象能全部出现在屏幕上。</p>
</blockquote>
<h3 id="定义一个相机视角"><a href="#定义一个相机视角" class="headerlink" title="定义一个相机视角"></a>定义一个相机视角</h3><p>在渲染器中添加一个相机视角变换作为图形绘制过程的一部分，以此完成我们的绘图对象所需变换的所有步骤。下面的代码在 onDrawFrame 回调返回中使用 <a href="http://developer.android.com/reference/android/opengl/Matrix.html#setLookAtM(float[],int,float,float,float,float,float,float,float,float,float" target="_blank" rel="external">Matrix.setLookAtM()</a>) 方法来计算相机视角变换，然后与之前计算的投影矩阵结合起来，结合后的变换矩阵传递给绘制图像：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// Set the camera position (View matrix)</span></div><div class="line">       Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">3</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">       <span class="comment">// Calculate the projection and view transformation</span></div><div class="line">       Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mProjectionMatrix, <span class="number">0</span>, mViewMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line">       <span class="comment">// Draw shape</span></div><div class="line">       mTriangle.draw(mMVPMatrix);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>因此整个渲染器包含了投影变换和相机视变换的结合，该类的全部代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer3</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Triangle mTriangle;</div><div class="line"></div><div class="line">    <span class="comment">// mMVPMatrix is an abbreviation for "Model View Projection Matrix"</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mMVPMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mProjectionMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mViewMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</div><div class="line">        <span class="comment">// initialize a triangle</span></div><div class="line">        mTriangle = <span class="keyword">new</span> Triangle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) width / height;</div><div class="line"></div><div class="line">        <span class="comment">// this projection matrix is applied to object coordinates</span></div><div class="line">        <span class="comment">// in the onDrawFrame() method</span></div><div class="line">        Matrix.frustumM(mProjectionMatrix, <span class="number">0</span>, -ratio, ratio, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// Set the camera position (View matrix)</span></div><div class="line">        <span class="comment">// 改变摄像头在 z 轴上的位置（镜头拉伸），让视图调整到合适的大小。</span></div><div class="line">        Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">3</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the projection and view transformation</span></div><div class="line">        Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mProjectionMatrix, <span class="number">0</span>, mViewMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw shape</span></div><div class="line">        mTriangle.draw(mMVPMatrix);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="应用投影和相机变换"><a href="#应用投影和相机变换" class="headerlink" title="应用投影和相机变换"></a>应用投影和相机变换</h3><p>为了使用在之前章节中结合了的相机视角变换和投影变换，我们首先为之前在 Triangle 类中定义的顶点着色器添加一个 Matrix 变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 顶点着色器代码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String vertexShaderCode =</div><div class="line">            <span class="comment">// This matrix member variable provides a hook to manipulate</span></div><div class="line">            <span class="comment">// the coordinates of the objects that use this vertex shader</span></div><div class="line">            <span class="string">"uniform mat4 uMVPMatrix;"</span> + <span class="comment">// 添加一个 Matrix 变量</span></div><div class="line">            <span class="string">"attribute vec4 vPosition;"</span> +  <span class="comment">// 应用程序传入顶点着色器的顶点位置</span></div><div class="line">                    <span class="string">"void main() &#123;"</span> +</div><div class="line">                    <span class="comment">// the matrix must be included as a modifier of gl_Position</span></div><div class="line">                    <span class="comment">// Note that the uMVPMatrix factor *must be first* in order</span></div><div class="line">                    <span class="comment">// for the matrix multiplication product to be correct.</span></div><div class="line">                    <span class="string">"  gl_Position = uMVPMatrix * vPosition;"</span> + <span class="comment">// 设置此次绘制此顶点位置，进行矩阵变换</span></div><div class="line">                    <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line"> <span class="comment">// Use to access and set the view transformation</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMVPMatrixHandle;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再修改原有图形对象（Triangle）的 draw() 方法，使得它接收组合后的变换矩阵，并将它应用到图形上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">float</span>[] mvpMatrix)</span> </span>&#123; <span class="comment">// pass in the calculated transformation matrix</span></div><div class="line"></div><div class="line">        ...</div><div class="line">        <span class="comment">// get handle to shape's transformation matrix</span></div><div class="line">        mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class="string">"uMVPMatrix"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Pass the projection and view transformation to the shader</span></div><div class="line">        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class="number">1</span>, <span class="keyword">false</span>, mvpMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw the triangle</span></div><div class="line">        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, vertexCount);</div><div class="line"></div><div class="line">        <span class="comment">// Disable vertex array</span></div><div class="line">        GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面给出图形对象的完整代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 绘制形状的顶点数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COORDS_PER_VERTEX = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 顶点着色器代码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String vertexShaderCode =</div><div class="line">            <span class="comment">// This matrix member variable provides a hook to manipulate</span></div><div class="line">            <span class="comment">// the coordinates of the objects that use this vertex shader</span></div><div class="line">            <span class="string">"uniform mat4 uMVPMatrix;"</span> +</div><div class="line">            <span class="string">"attribute vec4 vPosition;"</span> +  <span class="comment">// 应用程序传入顶点着色器的顶点位置</span></div><div class="line">                    <span class="string">"void main() &#123;"</span> +</div><div class="line">                    <span class="comment">// the matrix must be included as a modifier of gl_Position</span></div><div class="line">                    <span class="comment">// Note that the uMVPMatrix factor *must be first* in order</span></div><div class="line">                    <span class="comment">// for the matrix multiplication product to be correct.</span></div><div class="line">                    <span class="string">"  gl_Position = uMVPMatrix * vPosition;"</span> + <span class="comment">// 设置此次绘制此顶点位置</span></div><div class="line">                    <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 片元着色器代码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fragmentShaderCode =</div><div class="line">            <span class="string">"precision mediump float;"</span> +  <span class="comment">// 设置工作精度</span></div><div class="line">                    <span class="string">"uniform vec4 vColor;"</span> +  <span class="comment">// 应用程序传入着色器的颜色变量</span></div><div class="line">                    <span class="string">"void main() &#123;"</span> +</div><div class="line">                    <span class="string">"  gl_FragColor = vColor;"</span> + <span class="comment">// 颜色值传给gl_FragColor内建变量，完成片元的着色</span></div><div class="line">                    <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 定义三角形顶点的坐标数据的浮点型缓冲区</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> triangleCoords[] = &#123;   <span class="comment">// 以逆时针顺序;</span></div><div class="line">            <span class="number">0.0f</span>,  <span class="number">0.622008459f</span>, <span class="number">0.0f</span>,  <span class="comment">// top</span></div><div class="line">            -<span class="number">0.5f</span>, -<span class="number">0.311004243f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom left</span></div><div class="line">            <span class="number">0.5f</span>, -<span class="number">0.311004243f</span>, <span class="number">0.0f</span>   <span class="comment">// bottom right</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Set color with red, green, blue and alpha (opacity) values</span></div><div class="line">    <span class="keyword">float</span> color[] = &#123; <span class="number">0.63671875f</span>, <span class="number">0.76953125f</span>, <span class="number">0.22265625f</span>, <span class="number">1.0f</span> &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mProgram;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPositionHandle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColorHandle;</div><div class="line"></div><div class="line">    <span class="comment">// Use to access and set the view transformation</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMVPMatrixHandle;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertexCount = triangleCoords.length / COORDS_PER_VERTEX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertexStride = COORDS_PER_VERTEX * <span class="number">4</span>; <span class="comment">// 4 bytes per vertex</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 初始化形状中顶点坐标数据的字节缓冲区</span></div><div class="line">        <span class="comment">// 通过 allocateDirect 方法获取到 DirectByteBuffer 实例</span></div><div class="line">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(</div><div class="line">                <span class="comment">// 顶点坐标个数 * 坐标数据类型 float 一个是 4 bytes</span></div><div class="line">                triangleCoords.length * <span class="number">4</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">// 设置缓冲区使用设备硬件的原本字节顺序进行读取;</span></div><div class="line">        byteBuffer.order(ByteOrder.nativeOrder());</div><div class="line"></div><div class="line">        <span class="comment">// 因为 ByteBuffer 是将数据移进移出通道的唯一方式使用，这里使用 “as” 方法从 ByteBuffer 中获得一个基本类型缓冲区（浮点缓冲区）</span></div><div class="line">        vertexBuffer = byteBuffer.asFloatBuffer();</div><div class="line">        <span class="comment">// 把顶点坐标信息数组存储到 FloatBuffer</span></div><div class="line">        vertexBuffer.put(triangleCoords);</div><div class="line">        <span class="comment">// 设置从缓冲区的第一个位置开始读取顶点坐标信息</span></div><div class="line">        vertexBuffer.position(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 加载编译顶点渲染器</span></div><div class="line">        <span class="keyword">int</span> vertexShader = MyGLRenderer2.loadShader(GLES20.GL_VERTEX_SHADER,</div><div class="line">                vertexShaderCode);</div><div class="line"></div><div class="line">        <span class="comment">// 加载编译片元渲染器</span></div><div class="line">        <span class="keyword">int</span> fragmentShader = MyGLRenderer2.loadShader(GLES20.GL_FRAGMENT_SHADER,</div><div class="line">                fragmentShaderCode);</div><div class="line"></div><div class="line">        <span class="comment">// create empty OpenGL ES Program</span></div><div class="line">        mProgram = GLES20.glCreateProgram();</div><div class="line"></div><div class="line">        <span class="comment">// add the vertex shader to program</span></div><div class="line">        GLES20.glAttachShader(mProgram, vertexShader);</div><div class="line"></div><div class="line">        <span class="comment">// add the fragment shader to program</span></div><div class="line">        GLES20.glAttachShader(mProgram, fragmentShader);</div><div class="line"></div><div class="line">        <span class="comment">// creates OpenGL ES program executables</span></div><div class="line">        GLES20.glLinkProgram(mProgram);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">float</span>[] mvpMatrix)</span> </span>&#123; <span class="comment">// pass in the calculated transformation matrix</span></div><div class="line">        <span class="comment">// Add program to OpenGL ES environment</span></div><div class="line">        GLES20.glUseProgram(mProgram);</div><div class="line"></div><div class="line">        <span class="comment">// get handle to vertex shader's vPosition member</span></div><div class="line">        mPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class="string">"vPosition"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Enable a handle to the triangle vertices</span></div><div class="line">        GLES20.glEnableVertexAttribArray(mPositionHandle);</div><div class="line"></div><div class="line">        <span class="comment">// Prepare the triangle coordinate data</span></div><div class="line">        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,</div><div class="line">                GLES20.GL_FLOAT, <span class="keyword">false</span>,</div><div class="line">                vertexStride, vertexBuffer);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// get handle to fragment shader's vColor member</span></div><div class="line">        mColorHandle = GLES20.glGetUniformLocation(mProgram, <span class="string">"vColor"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Set color for drawing the triangle</span></div><div class="line">        GLES20.glUniform4fv(mColorHandle, <span class="number">1</span>, color, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw the triangle</span></div><div class="line">        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, vertexCount);</div><div class="line"></div><div class="line">        <span class="comment">// Disable vertex array</span></div><div class="line">        GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// get handle to shape's transformation matrix</span></div><div class="line">        mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class="string">"uMVPMatrix"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Pass the projection and view transformation to the shader</span></div><div class="line">        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class="number">1</span>, <span class="keyword">false</span>, mvpMatrix, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw the triangle</span></div><div class="line">        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, vertexCount);</div><div class="line"></div><div class="line">        <span class="comment">// Disable vertex array</span></div><div class="line">        GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦我们正确地计算并应用了投影变换和相机视角变换，我们的图形就会以正确的比例绘制出来，它看上去会像是这样:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-9f9403142c06c84d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/h/720" alt="效果图"></p>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
<p>现在，应用已经可以按正确的比例显示图形了，下面就来学习为图形添加一些动作效果。</p>
<h4 id="gt-gt-gt-gt-Next-gt-gt-gt-gt-OpenGL-ES-为视图添加动作"><a href="#gt-gt-gt-gt-Next-gt-gt-gt-gt-OpenGL-ES-为视图添加动作" class="headerlink" title="&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  OpenGL ES 为视图添加动作"></a>&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  <a href="http://www.jianshu.com/p/bfb1c4b16617" target="_blank" rel="external">OpenGL ES 为视图添加动作</a></h4>]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL ES 绘制形状（Shape）]]></title>
      <url>/2017/08/18/OpenGL%20ES%20%E7%BB%98%E5%88%B6%E5%BD%A2%E7%8A%B6%EF%BC%88Shape%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本篇文章属于 <a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external">使用 OpenGL ES 进行图形绘制</a> 这个系列的第三篇文章，主要内容是介绍在如何在 Android 应用中利用 OpenGL 绘制图形的形状。文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
</blockquote>
<p>在上篇文章：<a href="http://www.jianshu.com/p/477fa60290bf" target="_blank" rel="external">OpenGL ES 定义形状</a> 中我们定义了 OpenGL 绘制的形状之后，下面就一起看看如何使用 OpenGL ES 2.0 接口绘制出在 <a href="http://www.jianshu.com/p/477fa60290bf" target="_blank" rel="external">OpenGL ES 定义形状</a> 文章中定义的形状。</p>
<blockquote>
<p>使用 OpenGL ES 2.0 绘制图形可能会腻比想象当中要复杂一些，因为 Android 中保留提供了大量对于图形渲染流程控制的 API ，就像我们在绘制自定义 View 时一样，绘制控制的方法和参数都会很丰富。</p>
</blockquote>
<p>其实在前面文章：<a href="http://www.jianshu.com/p/89881d6016b9" target="_blank" rel="external">配置 OpenGL ES 的环境</a> 里面有提到 一个核心的类 GLSurfaceView.Renderer，它是控制 view 绘制过程的渲染器，之前文章中展示了如何使用 GLSurfaceView.Renderer 进行绘制黑色背景的简单试验，所以接下来的关于形状的绘制必然少不了它的参与。</p>
<h2 id="初始化形状"><a href="#初始化形状" class="headerlink" title="初始化形状"></a>初始化形状</h2><p>在开始绘制之前，需要对绘制的图形进行初始化并加载。如果这些形状结构（原始坐标）在执行过程不会发生变化，那么应该在 Renderer 的 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig" target="_blank" rel="external">onSurfaceCreated()</a>) 方法中进行初始化和加载，这样可以更省内存以及提升执行效率。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer2</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="keyword">private</span> Triangle mTriangle;</div><div class="line">    <span class="keyword">private</span> Square mSquare;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</div><div class="line">        <span class="comment">// initialize a triangle</span></div><div class="line">        mTriangle = <span class="keyword">new</span> Triangle();</div><div class="line">        <span class="comment">// initialize a square</span></div><div class="line">        mSquare = <span class="keyword">new</span> Square();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="绘制形状"><a href="#绘制形状" class="headerlink" title="绘制形状"></a>绘制形状</h2><p>使用 OpenGL ES 2.0 绘制一个定义好的形状需要较多代码，因为你需要提供很多图形渲染流程的细节，比如：</p>
<ul>
<li><strong>顶点着色器（Vertex Shader）：</strong>用来渲染形状（shape）顶点的 OpenGL ES 代码。</li>
</ul>
<blockquote>
<p>OpenGL ES 2.0 渲染管线中顶点着色器（Vertex Shader）取代了 OpenGL ES 1.x 渲染管线中的“变换和光照”</p>
</blockquote>
<ul>
<li><strong>片元着色器（Fragment Shader）：</strong>使用颜色或纹理（texture）渲染形状表面（face）的 OpenGL ES 代码。</li>
</ul>
<blockquote>
<p>片元着色器取代了 OpenGL ES 1.x 渲染管线中的“纹理环境和颜色求和”、“雾”以及“Alpha测试”</p>
</blockquote>
<ul>
<li><strong>程式（Program）：</strong>一个 OpenGL ES 对象，包含了你希望用来绘制一个或更多图形（shape）所要用到的着色器（shader）。</li>
</ul>
<p>以上三个，你需要至少一个<strong>顶点着色器（Vertex Shader）</strong>来绘制一个形状，以及一个<strong>片元着色器（Fragment Shader）</strong>为该形状上色。这些着色器必须被编译然后再添加到一个<strong>OpenGL ES Program</strong>当中，并利用这个 progrem 来绘制形状。通过编写顶点及片元着色器程序，来完成一些顶点变换和纹理颜色计算工作，实现更加灵活、精细化的计算与渲染。</p>
<p>下面的代码在 Triangle 类中定义了基本的着色器，我们可以利用它们绘制出一个图形：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">     * 顶点着色器代码</span></div><div class="line"><span class="comment">     * attribute变量(属性变量)只能用于顶点着色器中，不能用于片元着色器。一般用该变量来表示一些顶点数据，如：顶点坐标、纹理坐标、颜色等</span></div><div class="line"><span class="comment">     * uniforms变量(一致变量)用来将数据值从应用程其序传递到顶点着色器或者片元着色器。 该变量有点类似C语言中的常量（const），即该变量的值不能被shader程序修改。一般用该变量表示变换矩阵、光照参数、纹理采样器等。</span></div><div class="line"><span class="comment">     * varying变量(易变变量)是从顶点着色器传递到片元着色器的数据变量。顶点着色器可以使用易变变量来传递需要插值的颜色、法向量、纹理坐标等任意值。 在顶点与片元shader程序间传递数据是很容易的，一般在顶点shader中修改varying变量值，然后片元shader中使用该值，当然，该变量在顶点及片元这两段shader程序中声明必须是一致的。</span></div><div class="line"><span class="comment">     * gl_Position 为内建变量，表示变换后点的空间位置。 顶点着色器从应用程序中获得原始的顶点位置数据，这些原始的顶点数据在顶点着色器中经过平移、旋转、缩放等数学变换后，生成新的顶点位置。新的顶点位置通过在顶点着色器中写入gl_Position传递到渲染管线的后继阶段继续处理。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String vertexShaderCode =</div><div class="line">            <span class="string">"attribute vec4 vPosition;"</span> +  <span class="comment">// 应用程序传入顶点着色器的顶点位置</span></div><div class="line">                    <span class="string">"void main() &#123;"</span> +</div><div class="line">                    <span class="string">"  gl_Position = vPosition;"</span> + <span class="comment">// 设置此次绘制此顶点位置</span></div><div class="line">                    <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 片元着色器代码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fragmentShaderCode =</div><div class="line">            <span class="string">"precision mediump float;"</span> +  <span class="comment">// 设置工作精度</span></div><div class="line">                    <span class="string">"uniform vec4 vColor;"</span> +  <span class="comment">// 应用程序传入着色器的颜色变量</span></div><div class="line">                    <span class="string">"void main() &#123;"</span> +</div><div class="line">                    <span class="string">"  gl_FragColor = vColor;"</span> + <span class="comment">// 颜色值传给 gl_FragColor内建变量，完成片元的着色</span></div><div class="line">                    <span class="string">"&#125;"</span>;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>关于着色器和 GLSL 语言推荐几篇文章<br><a href="http://www.jianshu.com/p/36277c51f47e" target="_blank" rel="external">OpenGL ES 入门(一)着色器简介</a><br><a href="http://blog.csdn.net/colorapp/article/details/42552005" target="_blank" rel="external">OpenGL Shading language学习总结</a></p>
</blockquote>
<p>着色器（Shader）包含了OpenGL Shading Language（GLSL）代码，它必须先被编译然后才能在 OpenGL 环境中使用。要编译 GLSL 代码需要在渲染器类中创建一个辅助方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer2</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span></div><div class="line"><span class="class">    ...</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class">    /**</span></div><div class="line"><span class="class">     * 加载并编译着色器代码</span></div><div class="line"><span class="class">     * @<span class="title">param</span> <span class="title">type</span> 渲染器类型 </span>&#123;GLES20.GL_VERTEX_SHADER, GLES20.GL_FRAGMENT_SHADER&#125;</div><div class="line">     * <span class="meta">@param</span> shaderCode 渲染器代码 GLSL</div><div class="line">     * <span class="meta">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">loadShader</span><span class="params">(<span class="keyword">int</span> type, String shaderCode)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// create a vertex shader type (GLES20.GL_VERTEX_SHADER)</span></div><div class="line">        <span class="comment">// or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)</span></div><div class="line">        <span class="keyword">int</span> shader = GLES20.glCreateShader(type);</div><div class="line"></div><div class="line">        <span class="comment">// add the source code to the shader and compile it</span></div><div class="line">        GLES20.glShaderSource(shader, shaderCode);</div><div class="line">        GLES20.glCompileShader(shader);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> shader;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要绘制图形前，必须先编译着色器代码并将它们添加至一个 OpenGL ES Program 对象中，然后执行链接方法。</p>
<blockquote>
<p><strong>Note：</strong>编译 OpenGL ES 着色器及链接操作对于 CPU 周期和处理时间而言消耗巨大，所以应该避免重复执行这些事情。这个操作建议在形状类的构造方法中调用，这样只会执行一次。如果在执行期间不知道着色器的内容，可以考虑使用一次后缓存以备后续使用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Triangle</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mProgram;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        <span class="comment">// 加载编译顶点渲染器</span></div><div class="line">        <span class="keyword">int</span> vertexShader = MyGLRenderer2.loadShader(GLES20.GL_VERTEX_SHADER,</div><div class="line">                vertexShaderCode);</div><div class="line"></div><div class="line">        <span class="comment">// 加载编译片元渲染器</span></div><div class="line">        <span class="keyword">int</span> fragmentShader = MyGLRenderer2.loadShader(GLES20.GL_FRAGMENT_SHADER,</div><div class="line">                fragmentShaderCode);</div><div class="line"></div><div class="line">        <span class="comment">// create empty OpenGL ES Program</span></div><div class="line">        mProgram = GLES20.glCreateProgram();</div><div class="line"></div><div class="line">        <span class="comment">// add the vertex shader to program</span></div><div class="line">        GLES20.glAttachShader(mProgram, vertexShader);</div><div class="line"></div><div class="line">        <span class="comment">// add the fragment shader to program</span></div><div class="line">        GLES20.glAttachShader(mProgram, fragmentShader);</div><div class="line"></div><div class="line">        <span class="comment">// creates OpenGL ES program executables</span></div><div class="line">        GLES20.glLinkProgram(mProgram);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>至此，你已经完全准备好添加实际的调用语句来绘制你的图形了。使用 OpenGL ES 需要一些参数来告诉渲染流程（redering pipeline ）你要绘制的内容以及如何绘制，由于每个 shape 的 drawing option 都不一样，因此将每个 shape 的绘制逻辑放到自己的类里面是一个比较好的方法。</p>
<p>创建一个 draw() 方法来绘制图形。下面的代码为形状的顶点着色器和形状着色器设置了位置和颜色值，然后执行绘制函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 绘制形状的顶点数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COORDS_PER_VERTEX = <span class="number">3</span>;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPositionHandle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColorHandle;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertexCount = triangleCoords.length / COORDS_PER_VERTEX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> vertexStride = COORDS_PER_VERTEX * <span class="number">4</span>; <span class="comment">// 4 bytes per vertex</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Add program to OpenGL ES environment</span></div><div class="line">        GLES20.glUseProgram(mProgram);</div><div class="line"></div><div class="line">        <span class="comment">// get handle to vertex shader's vPosition member</span></div><div class="line">        mPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class="string">"vPosition"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Enable a handle to the triangle vertices</span></div><div class="line">        GLES20.glEnableVertexAttribArray(mPositionHandle);</div><div class="line"></div><div class="line">        <span class="comment">// Prepare the triangle coordinate data</span></div><div class="line">        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,</div><div class="line">                GLES20.GL_FLOAT, <span class="keyword">false</span>,</div><div class="line">                vertexStride, vertexBuffer);</div><div class="line"></div><div class="line">        <span class="comment">// get handle to fragment shader's vColor member</span></div><div class="line">        mColorHandle = GLES20.glGetUniformLocation(mProgram, <span class="string">"vColor"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Set color for drawing the triangle</span></div><div class="line">        GLES20.glUniform4fv(mColorHandle, <span class="number">1</span>, color, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Draw the triangle</span></div><div class="line">        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, vertexCount);</div><div class="line"></div><div class="line">        <span class="comment">// Disable vertex array</span></div><div class="line">        GLES20.glDisableVertexAttribArray(mPositionHandle);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦完成了上述所有代码，仅需要在渲染器的 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onDrawFrame(javax.microedition.khronos.opengles.GL10" target="_blank" rel="external">onDrawFrame()</a>) 方法中调用 draw() 方法就可以画出我们想要画的对象了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer2</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        mTriangle.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行这个应用时，它看上去会像是这样：<br><img src="http://upload-images.jianshu.io/upload_images/580515-061ccbbeba3938c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/h/720" alt="实际运行效果图"></p>
<p>实际操作过程中你发现，这个三角形看上去有一些扁，另外当你改变屏幕方向时，它的形状也会随之改变。发生形变的原因是因为对象的顶点没有根据显示 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 的屏幕区域的长宽比进行修正。你可以使用投影（Projection）或者相机视角（Camera View）来解决这个问题。</p>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
<p>最后，这个三角形是静止的，这看上去有些无聊。在后续文章会让这个形状发生旋转，并使用一些 OpenGL ES 图形处理流程中更加新奇的用法。</p>
<h4 id="gt-gt-gt-gt-Next-gt-gt-gt-gt-OpenGL-ES-运用投影与相机视角"><a href="#gt-gt-gt-gt-Next-gt-gt-gt-gt-OpenGL-ES-运用投影与相机视角" class="headerlink" title="&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  OpenGL ES 运用投影与相机视角"></a>&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  <a href="http://www.jianshu.com/p/bfb1c4b16617" target="_blank" rel="external">OpenGL ES 运用投影与相机视角</a></h4>]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenGL ES 定义形状]]></title>
      <url>/2017/08/18/OpenGL%20ES%20%E5%AE%9A%E4%B9%89%E5%BD%A2%E7%8A%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本篇文章属于 <a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external">使用 OpenGL ES 进行图形绘制</a> 这个系列的第二篇文章，主要内容是介绍在如何在 Android 应用中利用定义 OpenGL 中图形的形状。文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
</blockquote>
<p>如同学习绘制自定义 View 一样，定义图形的形状是实现各种复杂的图形的基础，下面将介绍 OpenGL ES 相对于 Android 设备屏幕的坐标系、定义形状和形状绘制等基础知识。</p>
<h2 id="定义一个三角形"><a href="#定义一个三角形" class="headerlink" title="定义一个三角形"></a>定义一个三角形</h2><p>OpenGL ES 允许我们使用三维空间的坐标来定义绘画对象。所以在我们能画三角形之前，必须先定义它的坐标。在 OpenGL 中，典型的办法是为坐标定义一个 Float 类型的顶点数组。为了效率最大化，我们可以将坐标写入一个 <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html" target="_blank" rel="external">ByteBuffer</a>，它将会传入 OpenGl ES 的 pipeline 来处理。</p>
<blockquote>
<p>ByteBuffer 俗称缓冲器，在 NIO 中，数据的读写操作始终是与缓冲区相关联的。读取时信道 (SocketChannel) 将数据读入缓冲区，写入时首先要将发送的数据按顺序填入缓冲区。缓冲区是定长的，基本上它只是一个列表，它的所有元素都是基本数据类型。ByteBuffer 是最常用的缓冲区，它提供了读写其他数据类型的方法，且信道的读写方法只接收 ByteBuffer。关于 ByteBuffer 的更多内容，推荐一篇文章 <a href="http://www.wjdiankong.cn/android%e4%b8%ad%e7%9b%b4%e6%92%ad%e8%a7%86%e9%a2%91%e6%8a%80%e6%9c%af%e6%8e%a2%e7%a9%b6%e4%b9%8b-%e5%9f%ba%e7%a1%80%e6%a0%b8%e5%bf%83%e7%b1%bbbytebuffer%e8%a7%a3%e6%9e%90/" target="_blank" rel="external">Android中直播视频技术探究之—基础核心类ByteBuffer解析</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 定义三角形顶点的坐标数据的浮点型缓冲区</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</div><div class="line"></div><div class="line">    <span class="comment">// 坐标数组中的顶点坐标个数</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COORDINATES_PRE_VERTEX = <span class="number">3</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> triangleCoords[] = &#123;   <span class="comment">// 以逆时针顺序;</span></div><div class="line">            <span class="number">0.0f</span>,  <span class="number">0.622008459f</span>, <span class="number">0.0f</span>,  <span class="comment">// top</span></div><div class="line">            -<span class="number">0.5f</span>, -<span class="number">0.311004243f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom left</span></div><div class="line">            <span class="number">0.5f</span>, -<span class="number">0.311004243f</span>, <span class="number">0.0f</span>   <span class="comment">// bottom right</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Set color with red, green, blue and alpha (opacity) values</span></div><div class="line">    <span class="keyword">float</span> color[] = &#123; <span class="number">0.63671875f</span>, <span class="number">0.76953125f</span>, <span class="number">0.22265625f</span>, <span class="number">1.0f</span> &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 初始化形状中顶点坐标数据的字节缓冲区</span></div><div class="line">        <span class="comment">// 通过 allocateDirect 方法获取到 DirectByteBuffer 实例</span></div><div class="line">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(</div><div class="line">                <span class="comment">// 顶点坐标个数 * 坐标数据类型 float 一个是 4 bytes</span></div><div class="line">                triangleCoords.length * <span class="number">4</span></div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">// 设置缓冲区使用设备硬件的原本字节顺序进行读取;</span></div><div class="line">        byteBuffer.order(ByteOrder.nativeOrder());</div><div class="line"></div><div class="line">        <span class="comment">// 因为 ByteBuffer 是将数据移进移出通道的唯一方式使用，这里使用 “as” 方法从 ByteBuffer 中获得一个基本类型缓冲区（浮点缓冲区）</span></div><div class="line">        vertexBuffer = byteBuffer.asFloatBuffer();</div><div class="line">        <span class="comment">// 把顶点坐标信息数组存储到 FloatBuffer</span></div><div class="line">        vertexBuffer.put(triangleCoords);</div><div class="line">        <span class="comment">// 设置从缓冲区的第一个位置开始读取顶点坐标信息</span></div><div class="line">        vertexBuffer.position(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跟 View 的坐标系原点位于屏幕左上角不同，默认情况下 OpenGL ES 会假定一个坐标系，在这个坐标系中，[0, 0, 0]（分别对应X轴坐标, Y轴坐标, Z轴坐标）对应的是GLSurfaceView 的中心。如 [1, 1, 0] 对应的是右上角，[-1, -1, 0] 对应的则是左下角。</p>
<p>在 OpenGL 里，我们要渲染的一切物体都要映射到 X 轴和 Y 轴上 [-1，1] 的范围内，对于Z轴也一样。这个范围内的坐标被称为归一化设备坐标，其独立于屏幕实际尺寸或形状。也就是说在 Android 设备上显示图形时屏幕的尺寸和形状虽然会有所不同，但是 OpenGL 假设了一个平方均匀的坐标系，默认情况下将这些坐标按比例绘制非正方形屏幕上，就好像它是完全正方形一样。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-770ec8d380996a4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OpenGL 坐标系"></p>
<p>如上图所示的坐标系，左图是默认的 OpenGL 坐标系，右图是实际展示 Android 设备屏幕时的坐标系，会看到三角形会有一个明显的拉伸。默认情况下，对于 OpenGL 而言不管硬件设备屏幕是不是正方形，都把它当作一个正方形来处理，三维坐标都限定在 [-1, 1]内。 所以 Open GL 的坐标体系独立于实际的屏幕尺寸。</p>
<blockquote>
<p>要处理画面被拉伸的问题，可以考虑调整坐标空间，把屏幕的形状考虑在内，可行的一个方法是把较小的范围固定在 [-1,1] 内，而按屏幕尺寸的比例调整较大的范围。这里推荐一篇文章：<a href="http://blog.csdn.net/liyuanjinglyj/article/details/46624901" target="_blank" rel="external">Android OpenGL ES 调整屏幕的宽高比</a>，文章中提到了如何处理 Open GL 在实际展示时宽高比控制。而这篇文章：<a href="http://blog.csdn.net/cauchyweierstrass/article/details/52904550" target="_blank" rel="external">OpenGL ES 透视投影</a>则是对归一化设备坐标到<strong>视口</strong>（视口：OpenGL 渲染操作最终显示窗口）的窗口坐标转化说明。这些内容建议暂时放一下，遇到相关问题时在深入了解。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-57de57ac6dd90265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三角形顶点坐标"></p>
<p>注意到上面这个形状的坐标是以逆时针顺序定义的。绘制的顺序非常关键，因为它定义了哪一面是形状的正面（希望绘制的一面），以及背面（使用 OpenGL ES 的 Cull Face 功能可以让背面不要绘制）。更多关于该方面的信息，可以阅读 <a href="http://developer.android.com/guide/topics/graphics/opengl.html#faces-winding" target="_blank" rel="external">OpenGL ES</a> 开发手册。</p>
<h2 id="定义一个矩形"><a href="#定义一个矩形" class="headerlink" title="定义一个矩形"></a>定义一个矩形</h2><p>在 OpenGL 中定义三角形非常简单，那定义一个矩形呢？有很多方法可以用来定义矩形，不过在 OpenGL ES 中最典型的办法是使用两个三角形拼接在一起：<br><img src="http://upload-images.jianshu.io/upload_images/580515-29e57e24b9291b6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="绘制矩形"></p>
<p>同样的我们通过按逆时针顺序为三角形顶点定义坐标来表示这个图形，并将值放入一个 <a href="http://developer.android.com/reference/java/nio/ByteBuffer.html" target="_blank" rel="external">ByteBuffer</a> 中。为了避免由两个三角形重合的那条边的顶点被重复定义，可以使用一个绘制列表（drawing list）来告诉 OpenGL ES 绘制顺序。下面是代码样例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 顶点坐标数据缓冲区（float 类型）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> FloatBuffer vertexBuffer;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 绘制顺序数据缓冲区（short类型）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> ShortBuffer drawListBuffer;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 顶点坐标数据的数组</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">float</span> squareCoords[] = &#123;</div><div class="line">            -<span class="number">0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,   <span class="comment">// top left</span></div><div class="line">            -<span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>,   <span class="comment">// bottom left</span></div><div class="line">            <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>,   <span class="comment">// bottom right</span></div><div class="line">            <span class="number">0.5f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span> &#125;; <span class="comment">// top right</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 绘制顶点顺序</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">short</span> drawOrder[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span> &#125;; <span class="comment">// order to draw vertices</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// initialize vertex byte buffer for shape coordinates</span></div><div class="line">        ByteBuffer bb = ByteBuffer.allocateDirect(</div><div class="line">                <span class="comment">// (# of coordinate values * 4 bytes per float)</span></div><div class="line">                squareCoords.length * <span class="number">4</span>);</div><div class="line">        bb.order(ByteOrder.nativeOrder());</div><div class="line">        vertexBuffer = bb.asFloatBuffer();</div><div class="line">        vertexBuffer.put(squareCoords);</div><div class="line">        vertexBuffer.position(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// initialize byte buffer for the draw list</span></div><div class="line">        ByteBuffer dlb = ByteBuffer.allocateDirect(</div><div class="line">                <span class="comment">// (# of coordinate values * 2 bytes per short)</span></div><div class="line">                drawOrder.length * <span class="number">2</span>);</div><div class="line">        dlb.order(ByteOrder.nativeOrder());</div><div class="line">        drawListBuffer = dlb.asShortBuffer();</div><div class="line">        drawListBuffer.put(drawOrder);</div><div class="line">        drawListBuffer.position(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该样例可以看作是一个如何使用 OpenGL 创建复杂图形的启发，通常来说我们需要使用三角形的集合来绘制对象。</p>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
<p>上述内容主要是对如何定义简单形状进行一个说明，了解 OpenGL 坐标体系规则，下面将了解如何在屏幕上画这些形状。</p>
<h4 id="gt-gt-gt-gt-Next-gt-gt-gt-gt-绘制形状"><a href="#gt-gt-gt-gt-Next-gt-gt-gt-gt-绘制形状" class="headerlink" title="&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  绘制形状"></a>&gt;&gt;&gt;&gt;Next&gt;&gt;&gt;&gt; :  <a href="http://www.jianshu.com/p/6cfccae3b2ca" target="_blank" rel="external">绘制形状</a></h4>]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 OpenGL ES 进行图形绘制]]></title>
      <url>/2017/08/18/%E4%BD%BF%E7%94%A8%20OpenGL%20ES%20%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文章中所有的代码示例都已经放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
</blockquote>
<p>Android 系统提供了大量的标准组件来帮助我们创建各种功能丰富的图形化界面。开发者除了使用系统的 UI 布局控件外，也可以自行实现满足特定设计需求的自定义 View 。通过绘制自定义的 View ，基本上可以满足日常开发中遇到大部分 UI 需求。</p>
<p>假设我们希望对屏幕上所绘制的内容进行更多自由的控制，或者打算建立三维图像体系，这是我们可能就需要借助一个更<strong>专业</strong>（偏向底层实现）的工具了，比如说 <a href="https://developer.android.com/guide/topics/graphics/opengl.html" target="_blank" rel="external">OpenGL ES</a>。</p>
<blockquote>
<p>OpenGL ES (OpenGL for Embedded Systems) 是嵌入式设备上所支持的OpenGL子集。Android 系统框架提供的 OpenGL ES 接口给予我们一组可以显示高级动画和图形的工具集，可以说它强大的功能仅仅受限于我们自身的想象力。同时，在许多 Android 设备上搭载的图形处理单元都能为其提供 GPU 加速等性能优化。</p>
</blockquote>
<p>本系列文章主要是参照 Android 官方训练教程<a href="https://developer.android.com/training/graphics/opengl/index.html" target="_blank" rel="external"> Displaying Graphics with OpenGL ES</a> 来学习如何使用 OpenGL 构建应用的基础知识，包括环境配置、绘制对象、移动图形元素以及响应点击事件等等。有兴趣的也可以去看看原版内容加深理解。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><p><a href="http://www.jianshu.com/p/89881d6016b9" target="_blank" rel="external">配置 OpenGL ES 的环境</a><br>学习如何配置一个可以绘制 OpenGL 图形的 Android 应用。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/477fa60290bf" target="_blank" rel="external">OpenGL ES 定义图形形状</a><br>学习如何在 OpenGL 中定义图形形状</p>
</li>
<li><p><a href="http://www.jianshu.com/p/6cfccae3b2ca" target="_blank" rel="external">OpenGL ES 绘制形状（Shape）</a><br>学习如何在应用中利用 OpenGL 绘制形状。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/bfb1c4b16617" target="_blank" rel="external">OpenGL ES 运用投影与相机视角</a><br>学习如何通过投影和相机视角，获取图形对象的一个新的透视效果。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/47bd8da30d43" target="_blank" rel="external">OpenGL ES 添加视图动作</a><br>学习如何对一个 OpenGL 图形对象添加基本的运动效果。</p>
</li>
<li><p><a href="http://www.jianshu.com/p/7169d66fd456" target="_blank" rel="external">OpenGL ES 响应触摸事件</a><br>学习如何与 OpenGL 图形进行基本的交互。</p>
</li>
</ul>
<p>文章所涉及的样例代码使用的是 OpenGL ES 2.0 接口，这是目前 Android 设备所推荐的接口版本。关于更多 OpenGL ES 的版本信息，可以阅读 <a href="http://developer.android.com/guide/topics/graphics/opengl.html#choosing-version" target="_blank" rel="external">OpenGL 开发手册</a>。</p>
<blockquote>
<p><strong>Note：</strong>注意不要把 OpenGL ES 1.x 版本的接口和 OpenGL ES 2.0 的接口混合调用，这两种版本的接口不是通用的。</p>
</blockquote>
<p>文章中提到的所有案例的代码都可以到 Github 项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中找到示例。</p>
<p><strong>下面就开始第一章节的学习：  <a href="http://www.jianshu.com/p/89881d6016b9" target="_blank" rel="external">配置 OpenGL ES 的环境</a></strong></p>
]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置 OpenGL ES 的环境]]></title>
      <url>/2017/08/18/%E9%85%8D%E7%BD%AE%20OpenGL%20ES%20%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本篇文章属于 <a href="http://www.jianshu.com/p/5cfdceac57fa" target="_blank" rel="external">使用 OpenGL ES 进行图形绘制</a> 这个系列的第一篇文章，主要内容是介绍在 Android 应用使用 OpenGL ES 时需要配置的开发环境和整体流程说明。</p>
</blockquote>
<p>要在 Android 应用中使用 OpenGL ES 绘制图像，我们必须为它们创建一个 View 容器。一种比较直接的方法是实现 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 类和 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="external">GLSurfaceView.Renderer</a> 类。其中 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 是一个视图容器，它用来存放使用 OpenGL 绘制的图形，而 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="external">GLSurfaceView.Renderer</a> 则用来控制在该视图内容的绘制（渲染器）。关于这两个类的更多信息，可以阅读 <a href="http://developer.android.com/guide/topics/graphics/opengl.html" target="_blank" rel="external">OpenGL ES</a> 开发手册。</p>
<blockquote>
<p><strong>Note:</strong> GLSurfaceView 是一个 View container，用来存放绘制的图像。<br> GLSurfaceView.Renderer 是用来控制 View 中绘制的内容的渲染器。</p>
</blockquote>
<p>使用 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 是一种将 OpenGL ES 集成到应用中的方法之一。对于一个全屏的或者接近全屏的图形 View，使用它是一个理想的选择。开发者如果希望把 OpenGL ES 的图形集成在布局的一小部分里面，那么可以考虑使用 <a href="http://developer.android.com/reference/android/view/TextureView.html" target="_blank" rel="external">TextureView</a>。对于喜欢自己动手实现的开发者来说，还可以通过使用<br> <a href="http://developer.android.com/reference/android/view/SurfaceView.html" target="_blank" rel="external">SurfaceView</a> 搭建一个 OpenGL ES View，但这将需要编写更多的代码。</p>
<p>下面将展示如何在一个 Activity 中完成 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 和 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="external">GLSurfaceView.Renderer</a> 的最简单直接的实现。</p>
<h3 id="1-1-在-Manifest-配置文件中声明使用-OpenGL-ES"><a href="#1-1-在-Manifest-配置文件中声明使用-OpenGL-ES" class="headerlink" title="1. 1 在 Manifest 配置文件中声明使用 OpenGL ES"></a>1. 1 在 Manifest 配置文件中声明使用 OpenGL ES</h3><p><strong>为了让应用能够使用 OpenGL ES 2.0 接口，我们必须将下列声明添加到 Manifest 配置文件当中：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--0x00020000 代表使用 OpenGL ES 2.0 接口--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:glEsVersion</span>=<span class="string">"0x00020000"</span> <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><strong>如果应用要使用纹理压缩（Texture Compression），则必须声明对纹理压缩格式的支持，这样确保应用仅安装在可以兼容的设备上：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--纹理压缩格式格式声明--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">supports-gl-texture</span> <span class="attr">android:name</span>=<span class="string">"GL_OES_compressed_ETC1_RGB8_texture"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">supports-gl-texture</span> <span class="attr">android:name</span>=<span class="string">"GL_OES_compressed_paletted_texture"</span> /&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>纹理压缩通过减少内存需求并更有效地利用内存带宽，可以显着提高 OpenGL 应用程序的性能。更多关于纹理压缩的内容可以阅读 <a href="http://developer.android.com/guide/topics/graphics/opengl.html#textures" target="_blank" rel="external">OpenGL 开发手册</a> 。</p>
</blockquote>
<h3 id="1-2-为-OpenGL-ES-图形创建一个-Activity"><a href="#1-2-为-OpenGL-ES-图形创建一个-Activity" class="headerlink" title="1.2 为 OpenGL ES 图形创建一个 Activity"></a>1.2 为 OpenGL ES 图形创建一个 Activity</h3><p>使用 OpenGL ES 的 Android 应用跟其它类型的应用主要的区别体现在 Activity 布局内容上的差异。通常我们会使用  <a href="http://developer.android.com/reference/android/widget/TextView.html" target="_blank" rel="external">TextView</a>、<a href="http://developer.android.com/reference/android/widget/Button.html" target="_blank" rel="external">Button</a>等已经封装好的控件。而如果使用 OpenGL ES 的我们就得依赖 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 来自己实现了。</p>
<p>所以最简单的使用方式是直接创建一个 GLSurfaceView 实例，并把它作为 ContentView 设置到 Activity 中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenGLSample01Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    GLSurfaceView mGLSurfaceView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setTitle(<span class="string">"OpenGLSample01"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Create a GLSurfaceView instance and set it</span></div><div class="line">        <span class="comment">// as the ContentView for this Activity.</span></div><div class="line">        mGLSurfaceView = <span class="keyword">new</span> MyGLSurfaceView(<span class="keyword">this</span>);</div><div class="line">        setContentView(mGLSurfaceView);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> OpenGL ES 2.0 需要Android 2.2（API Level 8）或更高版本的系统，所以确保你的Android项目的 API 版本满足该要求。</p>
</blockquote>
<h3 id="1-3-构建一个-GLSurfaceView-对象"><a href="#1-3-构建一个-GLSurfaceView-对象" class="headerlink" title="1.3 构建一个 GLSurfaceView 对象"></a>1.3 构建一个 GLSurfaceView 对象</h3><p><a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 是一种比较特殊的 View，我们可以在该 View 中绘制 OpenGL ES 图形，不过它自己并不做太多和绘制图形相关的任务。绘制对象的任务是由你在该 View 中配置的 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="external">GLSurfaceView.Renderer</a> 所控制的。因此在实际开发中不建议直接使用 GLSurfaceView 来创建实例。</p>
<blockquote>
<p>事实上，<a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 的核心代码非常简短，你可能会直接创建一个未经修改的 GLSurfaceView 实例，不过请不要这么做，因为我们需要继承该类来捕捉触控事件，这方面知识会在 <a href="http://hukai.me/android-training-course-in-chinese/graphics/opengl/touch.html" target="_blank" rel="external">响应触摸事件</a>  中做进一步的介绍。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGLSurfaceView</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyGLRenderer mRenderer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyGLSurfaceView</span><span class="params">(Context context)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line"></div><div class="line">        <span class="comment">// Create an OpenGL ES 2.0 context</span></div><div class="line">        setEGLContextClientVersion(<span class="number">2</span>);</div><div class="line"></div><div class="line">        mRenderer = <span class="keyword">new</span> MyGLRenderer();</div><div class="line"></div><div class="line">        <span class="comment">// Set the Renderer for drawing on the GLSurfaceView</span></div><div class="line">        setRenderer(mRenderer);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一个对于 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 的可选选项是将渲染模式设置为：<a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_WHEN_DIRTY" target="_blank" rel="external">GLSurfaceView.RENDERMODE_WHEN_DIRTY</a>，其含义是仅在你的绘制数据发生变化时才在视图中进行绘制操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Render the view only when there is a change in the drawing data</span></div><div class="line">setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div></pre></td></tr></table></figure>
<p>如果选用这一配置选项，那么除非调用了 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html#requestRender(" target="_blank" rel="external">requestRender()</a>)，否则 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 不会被重新绘制，这样做可以让应用的性能及效率得到提高。</p>
<h3 id="1-4-构建一个渲染器类"><a href="#1-4-构建一个渲染器类" class="headerlink" title="1.4 构建一个渲染器类"></a>1.4 构建一个渲染器类</h3><p>在一个使用 OpenGL ES 的应用中，必定少不了 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="external">GLSurfaceView.Renderer</a> 类的实现。该类会控制和其相关联的 <a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 的绘制行为和内容，Renderer 这个类中有三个方法会被系统调用，所以需要实现下面三个方法：</p>
<ul>
<li><a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig" target="_blank" rel="external">onSurfaceCreated()</a>)：调用一次，用来配置 View 的 OpenGL ES 环境。</li>
<li><a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onDrawFrame(javax.microedition.khronos.opengles.GL10" target="_blank" rel="external">onDrawFrame()</a>)：每次重新绘制View时被调用。</li>
<li><a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html#onDrawFrame(javax.microedition.khronos.opengles.GL10" target="_blank" rel="external">onSurfaceChanged()</a>)：如果View的几何形态发生变化时会被调用，例如当设备的屏幕方向发生改变时。</li>
</ul>
<p>下面是一个非常基本的 OpenGL ES 渲染器的实现，它仅仅在<a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="external">GLSurfaceView</a> 中画一个黑色的背景：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGLRenderer</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 unused, EGLConfig config)</span> </span>&#123;</div><div class="line">        <span class="comment">// Set the background frame color</span></div><div class="line">        GLES20.glClearColor(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 unused)</span> </span>&#123;</div><div class="line">        <span class="comment">// Redraw background color</span></div><div class="line">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 unused, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上述代码，我们完成一个完整的 OpenGL ES 简单使用场景，程序运行起来会是一个黑色的背景。</p>
<p><strong>下面来简单回顾一下在应用中使用 OpenGL ES 的整个流程：</strong></p>
<ul>
<li>在 Manifest 中对使用 OpenGL ES 进行声明</li>
<li>给 OpenGL ES 绘制的图像创建 Activity</li>
<li>创建一个 GLSurfaceView 对象并设置到 Activity 中</li>
<li>创建一个 Renderer 类实现绘制逻辑，并设置到 GLSurfaceView </li>
</ul>
<p>文章中所有的代码示例都已放在 Github 上，可以去项目 <a href="https://github.com/baishixian/OpenGL-ES-Learning" target="_blank" rel="external">OpenGL-ES-Learning</a> 中查看 。</p>
<p>通过基于上面的内容，相信你对于如何使用 OpenGL 绘制图形有了基本的认识和铺垫。当然，这些都是相当基础的知识，如果你对 OpenGL ES 接口很熟悉，那么你现在就可以在应用中构建一个 OpenGL ES 的环境并绘制图形了。如果你希望获取更多关于 OpenGL 的内容，请继续看后面的内容。</p>
<ul>
<li><a href="http://www.jianshu.com/p/477fa60290bf" target="_blank" rel="external">OpenGL ES 定义图形形状</a><br>学习如何在 OpenGL 中定义图形形状</li>
<li><a href="http://www.jianshu.com/p/6cfccae3b2ca" target="_blank" rel="external">OpenGL ES 绘制形状（Shape）</a><br>学习如何在应用中利用 OpenGL 绘制形状。</li>
<li><a href="http://www.jianshu.com/p/bfb1c4b16617" target="_blank" rel="external">OpenGL ES 运用投影与相机视角</a><br>学习如何通过投影和相机视角，获取图形对象的一个新的透视效果。</li>
<li><a href="http://www.jianshu.com/p/47bd8da30d43" target="_blank" rel="external">OpenGL ES 添加视图动作</a><br>学习如何对一个 OpenGL 图形对象添加基本的运动效果。</li>
<li><a href="http://www.jianshu.com/p/7169d66fd456" target="_blank" rel="external">OpenGL ES 响应触摸事件</a><br>学习如何与 OpenGL 图形进行基本的交互。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> OpenGL ES </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FFmpeg 视频转高质量 gif 图输出方案对比]]></title>
      <url>/2017/07/10/FFmpeg%20%E8%A7%86%E9%A2%91%E8%BD%AC%E9%AB%98%E8%B4%A8%E9%87%8F%20gif%20%E5%9B%BE%E8%BE%93%E5%87%BA%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不好意思，这里先安利下自己最近上架的应用，因为这个 App 使用了本篇文章中提到的技术方案进行了实现，实际效果欢迎大家直接去 Google Play 或国内酷安市场下载安装试试，欢迎拍砖。<br><a href="https://play.google.com/store/apps/details?id=gdut.bsx.videoreverser" target="_blank" rel="external">VEditor - Google Play</a><br><a href="https://www.coolapk.com/apk/gdut.bsx.videoreverser" target="_blank" rel="external">VEditor - 酷安</a></p>
</blockquote>
<p>使用 ffmpeg 视频文件转 gif 输出时，需要压缩 gif 输出，参考文章<a href="http://note.rpsh.net/posts/2015/04/21/mac-osx-ffmpeg-mp4-gif-convert/" target="_blank" rel="external">使用 ffmpeg 实现 MP4 与 GIF 的互转 </a>可以进行基本的处理。但是看到<a href="http://www.oschina.net/translate/high-quality-gif-with-ffmpeg" target="_blank" rel="external">使用 FFmpeg 处理高质量 GIF 图片</a> 这篇文章中阐述了一些提升方案。按照文章中说的方案进行了处理，下面是对比使用普通方案的效果。</p>
<p>原理介绍的英文原文：<a href="http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html#content" target="_blank" rel="external">High quality GIF with FFmpeg</a></p>
<h3 id="原理（参考原文中的描述）"><a href="#原理（参考原文中的描述）" class="headerlink" title="原理（参考原文中的描述）"></a>原理（参考原文中的描述）</h3><p>GIF 是受限于256色调色板。并且默认情况下，FFmpeg 只使用一个通用调色版去尝试覆盖所有的颜色区域，以此来支持含有大量内容的文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-3bc3579ce53edb82.gif?imageMogr2/auto-orient/strip" alt="普通转换为GIF的效果图"></p>
<p>提高 GIF 图片质量的第一步就是定义一个更好的调色板。GIF格式存储了一个全局调色板，但你可以对一张图片重新定义一个调色板。</p>
<blockquote>
<p>每一帧的调色板都可以取代全局调色板来只对一帧起作用。一旦你停止定义一个调色板，它将会回落到全局调色板。</p>
</blockquote>
<p>因此先考虑为gif生成一个新的调色板，第一次遍运行是对整个图片计算一个调色板，这就是新的 <a href="https://ffmpeg.org/ffmpeg-filters.html#palettegen" target="_blank" rel="external">palettegen </a>滤波器参与进来的地方。<br>这个滤波器对每一帧的所有颜色制作一个直方图，并且基于这些生成一个调色板。这个滤波器是在做色彩量化，并且生成一个调色板（通常保存在一个PNG文件里）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-3a3753dcebd7becc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成全局调色板"></p>
<p>提升gif质量的第二步是解决颜色映射与抖动。<br>生成全局调色板后，第二步就是将颜色效果映射到颜色输出流中，这个是通过 <a href="https://ffmpeg.org/ffmpeg-filters.html#paletteuse" target="_blank" rel="external">paletteuse</a> 滤波器完成的。它将会使用这个调色板来生成最终的量化颜色流，它的任务是在生成的调色板中找出最合适的颜色来表示输入的颜色。<br>这个滤波器也是你可以选择使用哪种抖动方法的地方，抖动可以让图片更加清晰。使用这两个滤波器效果后可以让你将 GIF 编码成单全局调色板、抖动的。</p>
<blockquote>
<p>关于<a href="https://en.wikipedia.org/wiki/Dither" target="_blank" rel="external">抖动</a>，是指把图像从较高色彩深度（即可用的颜色数）向较低色彩深度的区域绘制时，在图像中有意地插入噪点，通过有规律地扰乱图像来让图像对于肉眼更加真实的做法。对于图像降低色彩深度绘制时，可以避免出现大片的色带与色块，借以提升实际观感效果。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-5409c458cfcfece7.gif?imageMogr2/auto-orient/strip" alt="进行高质量输出优化后的效果"></p>
<h3 id="实际测试环境"><a href="#实际测试环境" class="headerlink" title="实际测试环境"></a>实际测试环境</h3><p><strong>平台：</strong>  Nexus 5X<br><strong>操作系统：</strong> Android 7.1.1<br><strong>视频原文件：</strong> <a href="http://7xt7m8.com1.z0.glb.clouddn.com/demo.mp4" target="_blank" rel="external">demo.mp4</a><br><strong>FFmpeg库：</strong> <a href="https://github.com/baishixian/FFMPEG" target="_blank" rel="external">自编译支持 Android 平台的 ffmpeg 的 so 包</a></p>
<h3 id="普通方案下的处理"><a href="#普通方案下的处理" class="headerlink" title="普通方案下的处理"></a>普通方案下的处理</h3><p>####1.执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">普通方案生成 gif</div><div class="line">@param startTime 开始时间 秒/s</div><div class="line">@param duration  间隔时间 秒/s（用来截取视频）</div><div class="line">@param videoPath 源视频路径</div><div class="line">@param outFilePath Gif输出路径</div><div class="line">String command = &quot;ffmpeg -ss &quot; + startTime + &quot; -t &quot; + duration + &quot; -i &quot; + videoPath + &quot; -r 15 -vf fps=15,scale=270:-1 &quot; + outFilePath;</div></pre></td></tr></table></figure></p>
<p>####2.输出效果图<br><img src="http://upload-images.jianshu.io/upload_images/580515-75d4f2369291c9bc.gif?imageMogr2/auto-orient/strip" alt="demo_mp4_1499666734.gif"></p>
<p>####3.实际运行 Log 日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">普通视频转GIF方案执行耗时 5349 ms</div><div class="line">输出文件大小：2,649,453 字节</div><div class="line">尺寸：480 × 270</div><div class="line">07-10 14:10:45.360 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif videoPath：/storage/emulated/0/demo.mp4</div><div class="line">07-10 14:10:45.361 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif outFilePath：/storage/emulated/0/VideoReverser/demo_mp4_1499667045.gif</div><div class="line">07-10 14:10:45.361 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif startTime：2 duration: 11</div><div class="line">07-10 14:10:45.369 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command：ffmpeg -ss 2 -t 11 -i /storage/emulated/0/demo.mp4 -s 480*270 -b 568k -r 10 -pix_fmt rgb24 -f gif /storage/emulated/0/VideoReverser/demo_mp4_1499667045.gif</div><div class="line">07-10 14:10:45.371 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command onBegin</div><div class="line">07-10 14:10:47.208 5355-5355/gdut.bsx.videoreverser D/VideoReverser: onCompletion</div><div class="line">07-10 14:10:50.709 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command onEnd0</div><div class="line">07-10 14:10:50.709 5355-5355/gdut.bsx.videoreverser D/VideoReverser: cmdGif 耗时：5349</div></pre></td></tr></table></figure></p>
<p>###<strong>GIF高质量优化方案</strong></p>
<h4 id="1-创建全局调色板"><a href="#1-创建全局调色板" class="headerlink" title="1.创建全局调色板"></a>1.创建全局调色板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">生成全局调色板命令：</div><div class="line">@param startTime 开始时间 秒/s</div><div class="line">@param duration  间隔时间 秒/s（用来截取视频）</div><div class="line">@param videoPath 源视频路径</div><div class="line">@param globalPalettePicPath 输出的全局调色板的路径</div><div class="line">String command = &quot;ffmpeg -ss &quot; + startTime + &quot; -t &quot; + duration + &quot; -i &quot; + videoPath + &quot; -b 568k -r 20 -vf fps=20,scale=320:-1:flags=lanczos,palettegen -y &quot; + globalPalettePicPath;</div></pre></td></tr></table></figure>
<p><strong>输出的全局调色板图片：</strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-7fada055c764a39b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="全局调色板图片.png"></p>
<h4 id="2-输出优化后的-gif"><a href="#2-输出优化后的-gif" class="headerlink" title="2.输出优化后的 gif"></a>2.输出优化后的 gif</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">利用调色板图片和视频源文件同时处理生成 gif 命令：</div><div class="line">@param startTime 开始时间 秒/s</div><div class="line">@param duration  间隔时间 秒/s（用来截取视频）</div><div class="line">@param videoPath 源视频路径</div><div class="line">@param globalPalettePicPath 全局调色板的路径</div><div class="line">@param outFilePath Gif输出路径</div><div class="line">String command = &quot;ffmpeg -v warning -ss &quot; + startTime + &quot; -t &quot; + duration + &quot; -i &quot; + videoPath + &quot; -i &quot; + globalPalettePicPath + &quot; -r 15 -lavfi fps=15,scale=270:-1:flags=lanczos[x];[x][1:v]paletteuse -y &quot; + outFilePath;</div></pre></td></tr></table></figure>
<p><strong>输出最终 gif 图片：</strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-2d05dad5dac3c8e2.gif?imageMogr2/auto-orient/strip" alt="demo_mp4_1499666734.gif"></p>
<h4 id="3-实际日志输出"><a href="#3-实际日志输出" class="headerlink" title="3.实际日志输出"></a>3.实际日志输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">执行耗时： 16931 ms</div><div class="line">输出文件大小：2,951,864 字节</div><div class="line">尺寸：320 × 180</div><div class="line">07-10 14:05:34.327 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif videoPath：/storage/emulated/0/demo.mp4</div><div class="line">07-10 14:05:34.328 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif outFilePath：/storage/emulated/0/VideoReverser/demo_mp4_1499666734.gif</div><div class="line">07-10 14:05:34.328 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif startTime：2 duration: 11</div><div class="line">07-10 14:05:34.328 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command：ffmpeg -v warning -ss 2 -t 11 -i /storage/emulated/0/demo.mp4 -r 10 -vf fps=10,scale=320:-1:flags=lanczos,palettegen -y /storage/emulated/0/VideoReverser/demo_mp4_1499666734.png</div><div class="line">07-10 14:05:34.332 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command onBegin</div><div class="line">07-10 14:05:42.973 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command：ffmpeg -v warning -ss 2 -t 11 -i /storage/emulated/0/demo.mp4 -i /storage/emulated/0/VideoReverser/demo_mp4_1499666734.png -r 10 -lavfi fps=10,scale=320:-1:flags=lanczos[x];[x][1:v]paletteuse -y /storage/emulated/0/VideoReverser/demo_mp4_1499666734.gif</div><div class="line">07-10 14:05:51.258 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif Command onEnd0</div><div class="line">07-10 14:05:51.258 2557-2557/gdut.bsx.videoreverser D/VideoReverser: cmdGif 耗时：16931</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于 gif 的处理要考虑好媒体文件的相关特性，不论是从分辨率、帧率或采样率等都需要仔细考虑产品的需求依赖。要对文件图像质量和文件大小等方面综合考虑，以实际观感出发，确定文件合适的操作依据。</p>
<h3 id="再安利一波"><a href="#再安利一波" class="headerlink" title="再安利一波"></a>再安利一波</h3><p>最近自己开发的这个 App 按照了本篇文章中提到的技术方案进行了实现，实际效果大家直接去 Google Play 或国内酷安市场下载安装试试，欢迎拍砖。<br><a href="https://www.coolapk.com/apk/gdut.bsx.videoreverser" target="_blank" rel="external">VEditor - 酷安</a><br><a href="https://play.google.com/store/apps/details?id=gdut.bsx.videoreverser" target="_blank" rel="external">VEditor - Google Play</a><br><img src="http://upload-images.jianshu.io/upload_images/580515-4cf765867f93bdc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FFmpeg常用命令]]></title>
      <url>/2017/07/07/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="external">官网 ffmpeg Documentation</a></p>
<ul>
<li>命令格式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ffmpeg [global_options] &#123;[input_file_options] -i input_url&#125; ... &#123;[output_file_options] output_url&#125; ...</div><div class="line"></div><div class="line">ffmpeg -i [输入文件名] [参数选项] -f [格式] [输出文件] </div><div class="line"></div><div class="line">参数选项： </div><div class="line">(1) -an: 去掉音频 </div><div class="line">(2) -vn: 去掉视频 </div><div class="line">(3) -acodec: 设定音频的编码器，未设定时则使用与输入流相同的编解码器。音频解复用在一般后面加copy表示拷贝 </div><div class="line">(4) -vcodec: 设定视频的编码器，未设定时则使用与输入流相同的编解码器，视频解复用一般后面加copy表示拷贝 </div><div class="line">(5) –f: 输出格式（视频转码）</div><div class="line">(6) -bf: B帧数目控制 </div><div class="line">(7) -g: 关键帧间隔控制(视频跳转需要关键帧)</div><div class="line">(8) -s: 设定画面的宽和高，分辨率控制(352*278)</div><div class="line">(9) -i:  设定输入流</div><div class="line">(10) -ss: 指定开始时间（0:0:05）</div><div class="line">(11) -t: 指定持续时间（0:05）</div><div class="line">(12) -b: 设定视频流量，默认是200Kbit/s</div><div class="line">(13) -aspect: 设定画面的比例</div><div class="line">(14) -ar: 设定音频采样率</div><div class="line">(15) -ac: 设定声音的Channel数</div><div class="line">(16)  -r: 提取图像频率（用于视频截图）</div><div class="line">(17) -c:v:  输出视频格式</div><div class="line">(18) -c:a:  输出音频格式</div><div class="line"></div><div class="line">-vcoder 设定视频的编码器，未设定时则使用与输入流相同的编解码器</div></pre></td></tr></table></figure>
<p>参考：<a href="http://blog.csdn.net/huangblog/article/details/8739876" target="_blank" rel="external">视频压缩：I帧、P帧、B帧</a></p>
<ul>
<li>最简单例子：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -i input.mp4 output.avi</div><div class="line">1. -i 输入文件路径</div><div class="line">2. 命令行最后是输出文件路径</div></pre></td></tr></table></figure>
<ul>
<li><p>修改视频帧率：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -i input.avi -r 24 output.avi  // 强制把输出视频文件帧率改为 24 fps:</div><div class="line">-r 帧率</div></pre></td></tr></table></figure>
</li>
<li><p>截图命令：<br>截取一张352x240尺寸大小，格式为jpg的图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ffmpeg -i input_file -y -f image2 -t 0.001 -s 352x240 output.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>把视频的前30帧转换成一个Animated Gif</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i input_file -vframes 30 -y -f gif output.gif</div></pre></td></tr></table></figure>
</li>
<li><p>在视频的第8.01秒出截取230x240的缩略图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i input_file -y -f mjpeg -ss 8 -t 0.001 -s 320x240 output.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>每隔一秒截一张图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i out.mp4 -f image2 -vf fps=fps=1 out%d.png</div></pre></td></tr></table></figure>
</li>
<li><p>每隔20秒截一张图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i out.mp4 -f image2 -vf fps=fps=1/20 out%d.png</div></pre></td></tr></table></figure>
</li>
<li><p>多张截图合并到一个文件里（2x3）每隔一千帧(秒数=1000/fps25)即40s截一张图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i out.mp4 -frames 3 -vf &quot;select=not(mod(n\,1000)),scale=320:240,tile=2x3&quot; out.png</div></pre></td></tr></table></figure>
</li>
<li><p>从视频中生成GIF图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i out.mp4 -t 10 -pix_fmt rgb24 out.gif</div></pre></td></tr></table></figure>
</li>
<li><p>从视频截选指定长度的内容生成GIF图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -ss 3 -t 5 -i input.mp4 -s 480*270 -f gif out.gif</div></pre></td></tr></table></figure>
</li>
<li><p>转换视频为图片（每帧一张图）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i out.mp4 out%4d.png</div></pre></td></tr></table></figure>
</li>
<li><p>图片转换为视频</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -f image2 -i out%4d.png -r 25 video.mp4</div></pre></td></tr></table></figure>
</li>
<li><p>切分视频并生成M3U8文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i input.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hls_time 20 -hls_list_size 0 -hls_wrap 0 output.m3u8</div></pre></td></tr></table></figure>
</li>
<li><p>分离视频音频流</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i input_file -vcodec copy -an output_file_video    //分离视频流</div><div class="line">ffmpeg -i input_file -acodec copy -vn output_file_audio    //分离音频流</div></pre></td></tr></table></figure>
</li>
<li><p>视频解复用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i test.mp4 -vcoder copy -an -f m4v test.264</div><div class="line">ffmpeg -i test.avi -vcoder copy -an -f m4v test.264</div></pre></td></tr></table></figure>
</li>
<li><p>视频转码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i test.mp4 -vcoder h264 -s 352*278 -an -f m4v test.264    //转码为码流原始文件</div><div class="line">ffmpeg -i test.mp4 -vcoder h264 -bf 0 -g 25 -s 352-278 -an -f m4v test.264    //转码为码流原始文件</div><div class="line">ffmpeg -i test.avi -vcoder mpeg4 -vtag xvid -qsame test_xvid.avi    //转码为封装文件 -bf B帧数目控制, -g 关键帧间隔控制, -s 分辨率控制</div></pre></td></tr></table></figure>
</li>
<li><p>视频封装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i video_file -i audio_file -vcoder copy -acodec copy output_file</div></pre></td></tr></table></figure>
</li>
<li><p>视频剪切</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i test.avi -r 1 -f image2 image.jpeg //视频截图</div><div class="line">ffmpeg -i input.avi -ss 0:1:30 -t 0:0:20 -vcoder copy -acoder copy output.avi //剪切视频 -r 提取图像频率， -ss 开始时间， -t 持续时间</div></pre></td></tr></table></figure>
</li>
<li><p>视频录制</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i rtsp://hostname/test -vcoder copy out.avi</div></pre></td></tr></table></figure>
</li>
<li><p>内容反转（reverse）</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// For video only</div><div class="line">ffmpeg -i input-file.mp4 -vf reverse output.mp4</div><div class="line"></div><div class="line">// For audio and video:</div><div class="line">ffmpeg -i input-file.mp4 -vf reverse -af areverse output.mp4</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 执行 FFmpeg 命令]]></title>
      <url>/2017/07/07/Android%20%E6%89%A7%E8%A1%8C%20FFmpeg%20%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ol>
<li><p>编译Android 平台  FFmpeg.so 包：<br><a href="http://blog.csdn.net/mabeijianxi/article/details/74544879" target="_blank" rel="external">编译Android下可用的全平台FFmpeg(包含libx264与libfdk-aac)</a><br><a href="http://www.jianshu.com/p/313f378f9922" target="_blank" rel="external">Android多媒体之一：编译ffmpeg</a><br><a href="http://gavinliu.cn/2017/03/14/Android-FFmpeg-%E7%BC%96%E8%AF%91%E6%88%90%E5%8D%95so%E5%BA%93/" target="_blank" rel="external">Android - FFmpeg 编译成单so库</a></p>
</li>
<li><p>ndk 开发环境搭建：<br><a href="http://gavinliu.cn/2017/03/05/Android-FFmpeg-Mac-AndroidStudio-CMake-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">Android - FFmpeg &amp; Mac &amp; AndroidStudio &amp; CMake 环境搭建</a><br><a href="http://gavinliu.cn/2017/03/21/Android-FFmpeg-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F1/" target="_blank" rel="external">Android - FFmpeg 命令行运行方式1</a><br><a href="http://gavinliu.cn/2017/03/21/Android-FFmpeg-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F2/" target="_blank" rel="external">Android - FFmpeg 命令行运行方式2</a><br><a href="https://github.com/gavinliu/FFmpegBox" target="_blank" rel="external">开源项目：安卓平台的 FFmpeg 命令行工具箱</a></p>
</li>
<li><p>解决重复执行命令行时崩溃报错的问题<br>FFmpeg每次执行完命令后会调用 ffmpeg_cleanup 函数清理内存，并且会调用exit(0)结束当前进程，但是经过我们的修改，exit()的代码已经被删掉，我们在Android中自然不能结束当前进程了，所以有些变量的值还在内存中，这样就会导致下次执行的时候可能会出错。我也尝试过fork一个进程给ffmpeg执行，完事后通过 信号来进程间通信，这样管用但是很麻烦，我们其实只需要简单的重设一些变量即可。<br>打开ffmpeg.c找到之前的main函数 (函数名可能被你自己改名成其他方便记忆的)，然后在 return 前加上如下代码即可:</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">nb_filtergraphs = 0;</div><div class="line">progress_avio = NULL;</div><div class="line"></div><div class="line">input_streams = NULL;</div><div class="line">nb_input_streams = 0;</div><div class="line">input_files = NULL;</div><div class="line">nb_input_files = 0;</div><div class="line"></div><div class="line">output_streams = NULL;</div><div class="line">nb_output_streams = 0;</div><div class="line">output_files = NULL;</div><div class="line">nb_output_files = 0;</div></pre></td></tr></table></figure>
<p>参考：<a href="http://blog.csdn.net/mabeijianxi/article/details/72904694" target="_blank" rel="external">编译Android下可执行命令的FFmpeg</a></p>
<p>其他：动画效果<a href="http://blog.csdn.net/tongzhengtong/article/details/52044010" target="_blank" rel="external">Activit跳转动画之界面上某个位置 裂开上下拉伸动画跳转</a></p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Git 项目 Jenkins 持续集成 Gradle 自动打包]]></title>
      <url>/2017/06/03/Android%20Git%20%E9%A1%B9%E7%9B%AE%20Jenkins%20%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Gradle%20%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于程序员来说，遇到项目需要频繁地集成各成员的工作是相当头痛的。因为每次集成都需要进行一系列的质量把控（编译，打包，测试等），以保证各环节尽可能地少出错误。如此反复不仅消耗大量的时间和精力，也消磨着自己的耐心。那么，如何做到持续集成，把一些繁琐且无意义的工作交付给电脑自动完成，这是一个相当有必要去考虑的事情。比较，能提升幸福感的事情，何乐而不为呢。</p>
</blockquote>
<h2 id="不重复造轮子"><a href="#不重复造轮子" class="headerlink" title="不重复造轮子"></a>不重复造轮子</h2><p>充分借助已有资源，考虑自身实际场景，简单而有效的解决问题才是目标。很多人都推荐使用 Jenkins 来搭建持续化集成平台，这是一个行之有效的解决方案，下面就来看看如何减少集成问题并且快速实现。</p>
<blockquote>
<p>一个理念：能让电脑帮忙自动搞定的东西就尽量不要折腾自己</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本篇文章主要介绍 Android 项目的持续化集成平台基于 Jenkins 的实现，关于 iOS 的持续集成，推荐同事之前写的<a href="http://www.jianshu.com/p/c69deb29720d" target="_blank" rel="external">一篇一步一步构建iOS持续集成:Jenkins+GitLab+蒲公英+FTP</a>这篇文章，内容非常详细。</p>
<p>主要介绍一下搭建Android平台环境时渠道的各种坑</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-4f57699bcd66a59a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d8c515ab4400fa00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-2e4202541c0026ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-cec53c9b97745205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>Gradle Path: /Users/baishixian/.gradle/wrapper/dists/gradle-4.0-milestone-1-all/2rnr7rhi2zsmkxo9re7615fy6/gradle-4.0-milestone-1</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-509c6a5b675fcf4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-dfa5f2360dd57162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-91aaa81d3723ccb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-94223d4df4b9037e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-adbc0dc1d9dabf31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>使用git作为源码仓库这里有坑，使用https的方式行不通，必须用ssh的方式才行，不然一直pull代码到本地不成功。<br><a href="https://issues.jenkins-ci.org/browse/JENKINS-22909" target="_blank" rel="external">Jenkins SSH connection to a Git server is not working using username/password</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-519bc8444622b777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-41383b992c1b007b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8b11b233596f6566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>创建ssh 非对称加密 key，我这用的是阿里云code，参考<a href="https://code.aliyun.com/help/ssh/README" target="_blank" rel="external">https://code.aliyun.com/help/ssh/README</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-305f1a269908baf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7c42f69b3a16f914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>然后在Jenkins中配置ssh的私钥</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-00250c8872687cac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-1f0e13567bae5315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8c0ee4cf00390d39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-847a7da5305991d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f1b391d04e611193.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>对于 <a href="http://stackoverflow.com/questions/39568402/jenkins-giving-the-sdk-directory-doesnt-exist" target="_blank" rel="external">Jenkins giving The SDK Directory doesn’t exist</a> 或者<a href="http://stackoverflow.com/questions/29216244/jenkins-build-failed-due-to-missing-android-sdk" target="_blank" rel="external">Jenkins build failed due to missing android SDK</a>的问题，在编译时会造成如下问题：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7ac6806290fb6b88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>需要配置ANDROID_HOME</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b2c18bcf60d3c032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-01fb75a306eeb379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-ef365b3ba5f11bab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>代码仓库配置好了，意味着Jenkins具有了访问GitHub代码仓库的权限，可以成功地拉取代码。<br>那Jenkins什么时候执行构建呢？<br>这就需要配置构建触发策略，即构建触发器，配置项位于<strong>【Build Triggers】</strong>栏目。<br>触发器支持多种类型，常用的有：</p>
<ul>
<li>定期进行构建（Build periodically）</li>
<li>根据提交进行构建（Build when a change is pushed to GitHub）</li>
<li>定期检测代码更新，如有更新则进行构建（Poll SCM）<br>构建触发器的选择为复合选项，若选择多种类型，则任一类型满足构建条件时就会执行构建工作。如果所有类型都不选择，则该Jenkins Job不执行自动构建，但可通过手动点击【Build Now】触发构建。</li>
</ul>
<p><strong>关于定时器（Schedule）的格式，简述如下：</strong></p>
<ul>
<li>MINUTE HOUR DOM MONTH DOW</li>
<li>MINUTE: Minutes within the hour (0-59)</li>
<li>HOUR: The hour of the day (0-23)</li>
<li>DOM: The day of the month (1-31)</li>
<li>MONTH: The month (1-12)</li>
<li>DOW: The day of the week (0-7) where 0 and 7 are Sunday.</li>
</ul>
<p>通常情况下需要指定多个值，这时可以采用如下operator（优先级从上到下）：<br><strong> 适配所有有效的值，若不指定某一项，则以*占位；</strong><br><strong> M-N适配值域范围，例如7-9代表7/8/9均满足；</strong><br><strong> M-N/X或*/X：以X作为间隔；</strong></p>
<p><strong>A,B,C：枚举多个值。</strong><br>另外，为了避免多个任务在同一时刻同时触发构建，在指定时间段时可以配合使用H字符。添加H字符后，Jenkins会在指定时间段内随机选择一个时间点作为起始时刻，然后加上设定的时间间隔，计算得到后续的时间点。直到下一个周期时，Jenkins又会重新随机选择一个时间点作为起始时刻，依次类推。</p>
<p><strong>为了便于理解，列举几个示例：</strong></p>
<p><strong>H/15 * * * *：</strong>代表每隔15分钟，并且开始时间不确定，这个小时可能是:07,:22,:37,:52，下一个小时就可能是:03,:18,:33,:48；</p>
<p><strong>H(0-29)/10 * * * *：</strong>代表前半小时内每隔10分钟，并且开始时间不确定，这个小时可能是:04,:14,:24，下一个小时就可能是:09,:19,:29；</p>
<p><strong>H 23 * * 1-5：</strong>工作日每晚23:00至23:59之间的某一时刻；</p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Git </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见 Android 浏览器请求 UA 信息]]></title>
      <url>/2017/04/06/%E5%B8%B8%E8%A7%81%20Android%20%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%20UA%20%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h2 id="设备：Google-Nexus-5X-（Android-7-0）"><a href="#设备：Google-Nexus-5X-（Android-7-0）" class="headerlink" title="设备：Google Nexus 5X （Android 7.0）"></a>设备：Google Nexus 5X （Android 7.0）</h2><table>
<thead>
<tr>
<th style="text-align:center">浏览器</th>
<th style="text-align:left">UA</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">UC</td>
<td style="text-align:left">Mozilla/5.0 (Linux; U; Android 7.0; zh-CN; Nexus 5X Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/40.0.2214.89 UCBrowser/11.4.5.937 Mobile Safari/537.36</td>
</tr>
<tr>
<td style="text-align:center">QQ</td>
<td style="text-align:left">Mozilla/5.0 (Linux; U; Android 7.0; zh-cn; Nexus 5X Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko)Version/4.0 Chrome/37.0.0.0 MQQBrowser/7.3 Mobile Safari/537.36</td>
</tr>
<tr>
<td style="text-align:center">Chrome</td>
<td style="text-align:left">Mozilla/5.0 (Linux; Android 7.0; Nexus 5X Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.85 Mobile Safari/537.36</td>
</tr>
<tr>
<td style="text-align:center">360</td>
<td style="text-align:left">Mozilla/5.0 (Linux; Android 7.0; Nexus 5X Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/54.0.2840.85 Mobile Safari/537.36 Qihoo NewsSDK/1.1.6/8.1.0.302</td>
</tr>
<tr>
<td style="text-align:center">猎豹</td>
<td style="text-align:left">Mozilla/5.0 (Linux; Android 7.0; Nexus 5X Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/54.0.2840.85 Mobile Safari/537.36 LieBaoFast/4.35.2</td>
</tr>
<tr>
<td style="text-align:center">百度</td>
<td style="text-align:left">Mozilla/5.0 (Linux; Android 7.0; Nexus 5X Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/48.0.2564.116 Mobile Safari/537.36 baidubrowser/7.11.13.0 (Baidu; P1 7.0)</td>
</tr>
<tr>
<td style="text-align:center">搜狗</td>
<td style="text-align:left">Mozilla/5.0 (Linux; Android 7.0; Nexus 5X; Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.92 Mobile Safari/537.36 SogouMSE,SogouMobileBrowser/5.5.5</td>
</tr>
<tr>
<td style="text-align:center">WebView</td>
<td style="text-align:left">Mozilla/5.0 (Linux; Android 7.0; Nexus 5X Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/54.0.2840.85 Mobile Safari/537.36</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 技术调研 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 常见问题]]></title>
      <url>/2017/04/06/Android%20Studio%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="使用-Git"><a href="#使用-Git" class="headerlink" title="使用 Git"></a>使用 Git</h2><h3 id="1-Can’t-update-no-tracked-branch"><a href="#1-Can’t-update-no-tracked-branch" class="headerlink" title="1. Can’t update: no tracked branch"></a>1. Can’t update: no tracked branch</h3><p><strong>复现场景：</strong> 假设当前工作环境的 local 分支是 local-v1-dev，然后通过删除了这个分支，并 check out 到了另一个分支 local-v2-dev 上去，然后使用 pull 操作拉取远程 remote 分支代码时出现问题。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-1e1e52bda7784d33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>解决措施：</strong> 假设需要切换新的本地分支名称为newBranch，需要拉去远程的 newBranch 分支，并执行更新操作，通过使用Android Studio 的 终端 Terminal 工具，执行下面的命令让本地分支和远程分支完成匹配即可。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout newBranch</div><div class="line">git branch --set-upstream-to=origin/newBranch</div></pre></td></tr></table></figure></p>
<h3 id="2-重命名远程分支"><a href="#2-重命名远程分支" class="headerlink" title="2. 重命名远程分支"></a>2. 重命名远程分支</h3><blockquote>
<p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p>
</blockquote>
<p><strong>先查看远程分支：</strong><br>使用 git branch 命令可以查看当前所有本地分支，加上 -a 参数可以查看远程分支，远程分支会用红色表示出来：<br><figure class="highlight plain"><figcaption><span>branch -a ```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">![](http://upload-images.jianshu.io/upload_images/580515-dc9e1135b41c72a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">**删除远程分支和 tag：**</div><div class="line">a. 删除指定的远程分支（把 &lt;branchName&gt; 替换成要删除掉的分支名称）</div><div class="line">``` git push origin --delete &lt;branchName&gt;</div></pre></td></tr></table></figure></p>
<p>b. 删除指定的tag（把 <tagname> 替换成要删除掉的tag名称）<br><figure class="highlight plain"><figcaption><span>push origin --delete tag <tagname> ```</tagname></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; 在 github 上操作时，在删除远程分支时有可能碰到下面这个错误：</div><div class="line">remote: error: refusing to delete the current branch: </div><div class="line">这是由于在 github 中，被删除的分支是项目的默认分支。要解决此问题，需要进行下面的操作：</div><div class="line">- 进入 github 中该项目的 Settings 页面；</div><div class="line">- 设置 Default Branch 为其他的分支（例如 master）；</div><div class="line">- 重新执行删除远程分支命令。</div><div class="line"></div><div class="line">**重命名本地分支：**</div><div class="line">```git branch -m &lt;oldBranchName&gt; &lt;newBranchName&gt;</div></pre></td></tr></table></figure></tagname></p>
<p><strong>推送本地分支：</strong><br><figure class="highlight plain"><figcaption><span>push origin <newbranchname>```</newbranchname></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 3.为分支打上 tag</div><div class="line">**为本地分支打上 tag**</div><div class="line">```git tag -a v1.0.0 -m &apos;version 1.0.0&apos;</div></pre></td></tr></table></figure></p>
<p><strong>把本地tag推送到远程：</strong><br>推送本地全部的 tag<br><figure class="highlight plain"><figcaption><span>push --tags```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">推送本地指定的 tag</div><div class="line"> ```git push origin &lt;tagName&gt;</div></pre></td></tr></table></figure></p>
<p><strong>获取远程tag</strong><br><figure class="highlight plain"><figcaption><span>fetch origin tag <tagname>```</tagname></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 项目编译</div><div class="line"> ### 配置 apk 文件输出名称</div><div class="line">```xml</div><div class="line"> buildTypes &#123;</div><div class="line"> release &#123;</div><div class="line">  applicationVariants.all &#123; variant -&gt;</div><div class="line">                variant.outputs.each &#123; output -&gt;</div><div class="line">                    def outputFile = output.outputFile</div><div class="line">                    if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class="line">                        // 输出apk名称为appName-versionName-release.apk</div><div class="line">                        def fileName = &quot;appName-$&#123;defaultConfig.versionName&#125;-release.apk&quot;</div><div class="line">                        output.outputFile = new File(outputFile.parent, fileName)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意 Android Studio 3.0 中支持的新版本 gradle 改变  <figure class="highlight plain"><figcaption><span>``` 为私有属性，所以上面的代码要改成：</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```xml</div><div class="line">android.applicationVariants.all &#123; variant -&gt;</div><div class="line">    variant.outputs.all &#123;</div><div class="line">        outputFileName = &quot;$&#123;variant.name&#125;-$&#123;variant.versionName&#125;-release.apk&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Java-8-支持"><a href="#Java-8-支持" class="headerlink" title="Java 8 支持"></a>Java 8 支持</h3><p>```xml<br>defaultConfig {<br>   jackOptions {<br>            enabled true<br>        }<br>}<br>buildTypes {</p>
<pre><code>compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
}
</code></pre><p>}</p>
<p>注意 Android Studio 3.0 中支持的新版本 gradle 中把 <code>jackOptions</code> 移除。</p>
<h3 id="Sources-for-‘Android-API-26-Platform’-not-found"><a href="#Sources-for-‘Android-API-26-Platform’-not-found" class="headerlink" title="Sources for ‘Android API 26 Platform’ not found."></a>Sources for ‘Android API 26 Platform’ not found.</h3><p>这是 Android Studio 关联不上源码导致的，下载对应的 API 源码文件后，会存放在 /Users/xxxxx/Library/Android/sdk/sources/android-26 文件夹，但是有可能明明下载了源码但是 Android Studio  就是提示找不到。这是 Android Studio 配置文件未能更新导致的，可以自行修改即可：</p>
<p>1.找到以下路径，并打开文件<br>~/Library/Preferences/AndroidStudioXXX/options/jdk.table.xml</p>
<p>2.修改 jdk.table.xml 文件中对应 API 版本配置信息<br>手动配置 API 26 Sources 文件路径<br><img src="http://upload-images.jianshu.io/upload_images/580515-a2a0ea5e55dabaa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>3.保存配置文件，重新 Android Studio 即可。</p>
]]></content>
      
        <categories>
            
            <category> 开发技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用 Android 系统原生 API 实现分享功能]]></title>
      <url>/2017/04/01/%E5%88%A9%E7%94%A8%20Android%20%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%94%9F%20API%20%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于 App 的分享功能，基本上是一个刚需，本文主要介绍运用系统原生分享功能时候需要注意的一些问题。对于某些特定平台的一些高级分享特性，比如微信或者微博之类的分享来源标注，需要在其开放平台注册应用再接入其 sdk 才可以，这里不予以讨论。打算借助第三方库类似 ShareSDK 实现的同学们，这篇文章可能也帮不上你。</p>
</blockquote>
<h2 id="什么是-Android-系统的原生分享"><a href="#什么是-Android-系统的原生分享" class="headerlink" title="什么是 Android 系统的原生分享"></a>什么是 Android 系统的原生分享</h2><p>直接上图，这是一个典型的调用系统原生分享场景下的界面，相信大家应该都很熟悉。<br><img src="http://upload-images.jianshu.io/upload_images/580515-e00bb3db612feb95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>系统内建的分享机制，参照官方的教程，基本上可以满足你的一般需求：<a href="https://developer.android.com/training/building-content-sharing.html" target="_blank" rel="external">Android-training-building-content-sharing</a></p>
<p><strong>简单描述下创建分享的主要过程：</strong></p>
<ul>
<li><p>创建一个 <code>Intent</code> ，指定其 <code>Action</code> 为 <code>Intent.ACTION_SEND</code>，这表示要创建一个发送指定内容的隐式意图。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent sendIntent = new Intent();</div><div class="line">sendIntent.setAction(Intent.ACTION_SEND);</div></pre></td></tr></table></figure>
</li>
<li><p>指定需要发送的内容和类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 比如发送文本形式的数据内容</div><div class="line">// 指定发送的内容</div><div class="line">sendIntent.putExtra(Intent.EXTRA_TEXT, &quot;This is my text to send.&quot;);</div><div class="line">// 指定发送内容的类型</div><div class="line">sendIntent.setType(&quot;text/plain&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 比如发送二进制文件数据流内容（比如图片、视频、音频文件等等）</div><div class="line">// 指定发送的内容 (EXTRA_STREAM 对于文件 Uri )</div><div class="line">shareIntent.putExtra(Intent.EXTRA_STREAM, uriToImage);</div><div class="line">// 指定发送内容的类型 (MIME type)</div><div class="line">shareIntent.setType(&quot;image/jpeg&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>向系统发送隐式意图，打开系统分享选择器，出现如上图所示界面。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(Intent.createChooser(shareIntent, “Share to...”));</div></pre></td></tr></table></figure>
</li>
</ul>
<p>四不四看起来很简单，四不四感觉可以分分钟可以搞定。年轻人，我跟你港，别图样图森破，现在大家没遇几个坑都不好意思出来港，不过做人嘛～最重要的开心。</p>
<p>那下面说一下遇到的一些问题，特别针对是 7.0 以后的系统，以及兼容一些主流 app 时遇到的坑。</p>
<h3 id="1-获取文件类型（MimeType）"><a href="#1-获取文件类型（MimeType）" class="headerlink" title="1. 获取文件类型（MimeType）"></a>1. 获取文件类型（MimeType）</h3><p>前面说到分享文件时需要知道文件的类型，不然的指定类型为 <code>*/*</code> ，这样分享到某些 App 会因为无法判断文件类型而导致失败，所以最好先根据文件路径获取其文件类型。</p>
<p><strong>下面是一些常见文件的mimeType</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;.3gp&quot;, &quot;video/3gpp&quot;&#125;,  </div><div class="line">&#123;&quot;.apk&quot;, &quot;application/vnd.android.package-archive&quot;&#125;,  </div><div class="line">&#123;&quot;.asf&quot;, &quot;video/x-ms-asf&quot;&#125;,  </div><div class="line">&#123;&quot;.avi&quot;, &quot;video/x-msvideo&quot;&#125;,  </div><div class="line">&#123;&quot;.bin&quot;, &quot;application/octet-stream&quot;&#125;,  </div><div class="line">&#123;&quot;.bmp&quot;, &quot;image/bmp&quot;&#125;,  </div><div class="line">&#123;&quot;.c&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.class&quot;, &quot;application/octet-stream&quot;&#125;,  </div><div class="line">&#123;&quot;.conf&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.cpp&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.doc&quot;, &quot;application/msword&quot;&#125;,  </div><div class="line">&#123;&quot;.exe&quot;, &quot;application/octet-stream&quot;&#125;,  </div><div class="line">&#123;&quot;.gif&quot;, &quot;image/gif&quot;&#125;,  </div><div class="line">&#123;&quot;.gtar&quot;, &quot;application/x-gtar&quot;&#125;,  </div><div class="line">&#123;&quot;.gz&quot;, &quot;application/x-gzip&quot;&#125;,  </div><div class="line">&#123;&quot;.h&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.htm&quot;, &quot;text/html&quot;&#125;,  </div><div class="line">&#123;&quot;.html&quot;, &quot;text/html&quot;&#125;,  </div><div class="line">&#123;&quot;.jar&quot;, &quot;application/java-archive&quot;&#125;,  </div><div class="line">&#123;&quot;.java&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.jpeg&quot;, &quot;image/jpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.jpg&quot;, &quot;image/jpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.js&quot;, &quot;application/x-javascript&quot;&#125;,  </div><div class="line">&#123;&quot;.log&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.m3u&quot;, &quot;audio/x-mpegurl&quot;&#125;,  </div><div class="line">&#123;&quot;.m4a&quot;, &quot;audio/mp4a-latm&quot;&#125;,  </div><div class="line">&#123;&quot;.m4b&quot;, &quot;audio/mp4a-latm&quot;&#125;,  </div><div class="line">&#123;&quot;.m4p&quot;, &quot;audio/mp4a-latm&quot;&#125;,  </div><div class="line">&#123;&quot;.m4u&quot;, &quot;video/vnd.mpegurl&quot;&#125;,  </div><div class="line">&#123;&quot;.m4v&quot;, &quot;video/x-m4v&quot;&#125;,  </div><div class="line">&#123;&quot;.mov&quot;, &quot;video/quicktime&quot;&#125;,  </div><div class="line">&#123;&quot;.mp2&quot;, &quot;audio/x-mpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.mp3&quot;, &quot;audio/x-mpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.mp4&quot;, &quot;video/mp4&quot;&#125;,  </div><div class="line">&#123;&quot;.mpc&quot;, &quot;application/vnd.mpohun.certificate&quot;&#125;,  </div><div class="line">&#123;&quot;.mpe&quot;, &quot;video/mpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.mpeg&quot;, &quot;video/mpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.mpg&quot;, &quot;video/mpeg&quot;&#125;,  </div><div class="line">     &#123;&quot;.mpg4&quot;, &quot;video/mp4&quot;&#125;,  </div><div class="line">&#123;&quot;.mpga&quot;, &quot;audio/mpeg&quot;&#125;,  </div><div class="line">&#123;&quot;.msg&quot;, &quot;application/vnd.ms-outlook&quot;&#125;,  </div><div class="line">&#123;&quot;.ogg&quot;, &quot;audio/ogg&quot;&#125;,  </div><div class="line">&#123;&quot;.pdf&quot;, &quot;application/pdf&quot;&#125;,  </div><div class="line">&#123;&quot;.png&quot;, &quot;image/png&quot;&#125;,  </div><div class="line">&#123;&quot;.pps&quot;, &quot;application/vnd.ms-powerpoint&quot;&#125;,  </div><div class="line">&#123;&quot;.ppt&quot;, &quot;application/vnd.ms-powerpoint&quot;&#125;,  </div><div class="line">&#123;&quot;.prop&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.rar&quot;, &quot;application/x-rar-compressed&quot;&#125;,  </div><div class="line">&#123;&quot;.rc&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.rmvb&quot;, &quot;audio/x-pn-realaudio&quot;&#125;,  </div><div class="line">&#123;&quot;.rtf&quot;, &quot;application/rtf&quot;&#125;,  </div><div class="line">&#123;&quot;.sh&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.tar&quot;, &quot;application/x-tar&quot;&#125;,  </div><div class="line">&#123;&quot;.tgz&quot;, &quot;application/x-compressed&quot;&#125;,  </div><div class="line">&#123;&quot;.txt&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.wav&quot;, &quot;audio/x-wav&quot;&#125;,  </div><div class="line">&#123;&quot;.wma&quot;, &quot;audio/x-ms-wma&quot;&#125;,  </div><div class="line">&#123;&quot;.wmv&quot;, &quot;audio/x-ms-wmv&quot;&#125;,  </div><div class="line">&#123;&quot;.wps&quot;, &quot;application/vnd.ms-works&quot;&#125;,  </div><div class="line">//&#123;&quot;.xml&quot;, &quot;text/xml&quot;&#125;,  </div><div class="line">&#123;&quot;.xml&quot;, &quot;text/plain&quot;&#125;,  </div><div class="line">&#123;&quot;.z&quot;, &quot;application/x-compress&quot;&#125;,  </div><div class="line">&#123;&quot;.zip&quot;, &quot;application/zip&quot;&#125;,  </div><div class="line">&#123;&quot;&quot;, &quot;*/*&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>####<strong>获取文件类型的方法：</strong><br><strong>方式一（方便但不稳定）：通过 ContentResolver 查询 Android 系统提供的 ContentProvider 获取</strong></p>
<blockquote>
<p>当 targetSdkVersion &gt;= 24 时使用 Uri.fromFile(File file) 获取文件<br> uri 会报 android.os.FileUriExposedException 异常 ，应该要使用<br><a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html" target="_blank" rel="external">FileProvider</a> ，具体请参考 Android 7.0 FileProvider 适配相关，这里不再展开说明。关于 <a href="http://www.jianshu.com/p/8820cf8fac10" target="_blank" rel="external">FileProvider</a> 推荐一篇总结比较好的文章。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 获取文件的 url</div><div class="line">File shareFile = new File(shareFilePath);</div><div class="line">Uri fileUri = Uri.fromFile(shareFile);</div><div class="line"></div><div class="line">// 获取系统的提供的 ContentResolver</div><div class="line">ContentResolver contentResolver = getApplicationContext().getContentResolver();</div><div class="line">// 获取文件MimeType，如 image/png</div><div class="line">String fileMimeType = contentResolver.getType(fileUri);</div><div class="line"></div><div class="line">// 获取文件Type，如 png</div><div class="line">MimeTypeMap mime = MimeTypeMap.getSingleton();</div><div class="line">String fileType = mime.getExtensionFromMimeType(fileMimeType);</div></pre></td></tr></table></figure>
<p>使用这种方法获取文件类型，一定要注意 ContentResolver 获取返回为 null 的情况，不然空指针异常的崩溃率可能会让你笑不出来。实际测试中，发现在某些国产机型下，这个方法可以说直接是不可用，查询返回一直都是空，所以单纯依赖这一个方法会很不可靠。具体问题原因请看：<a href="https://stackoverflow.com/questions/13080540/what-causes-androids-contentresolver-query-to-return-null" target="_blank" rel="external">What causes Android’s ContentResolver.query() to return null?</a></p>
<p><strong>方式二 解析文件信息，通过匹配识别判断：</strong><br>在好用的方法却不可靠的情况下，只能配合看起来蠢一点的方法。目前大致的思路有两种：<br>1.识别文件后缀，根据后缀名来判断文件类型。<br>2.获取文件头信息，转成十六进制字符串后判断文件类型。<br>这两种都是根据特点信息去做匹配，因此需要先保存一份文件特点信息和文件类型的对应参照表。</p>
<p>下面按照第二条思路，按照文件头信息简单实现一个获取文件类型的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取文件类型</div><div class="line"> * @param filePath</div><div class="line"> * @return</div><div class="line"> */</div><div class="line"> public static String getFileType(String filePath) &#123;  </div><div class="line">        return mFileTypes.get(getFileHeader(filePath));  </div><div class="line"> &#125;  </div><div class="line"></div><div class="line"> private static final HashMap&lt;String, String&gt; mFileTypes = new HashMap&lt;String, String&gt;();  </div><div class="line"></div><div class="line"> // judge file type by file header content  </div><div class="line"> static &#123;  </div><div class="line">          mFileTypes.put(&quot;ffd8ffe000104a464946&quot;, &quot;jpg&quot;); //JPEG (jpg)         </div><div class="line">          mFileTypes.put(&quot;89504e470d0a1a0a0000&quot;, &quot;png&quot;); //PNG (png)         </div><div class="line">          mFileTypes.put(&quot;47494638396126026f01&quot;, &quot;gif&quot;); //GIF (gif)         </div><div class="line">          mFileTypes.put(&quot;49492a00227105008037&quot;, &quot;tif&quot;); //TIFF (tif)         </div><div class="line">          mFileTypes.put(&quot;424d228c010000000000&quot;, &quot;bmp&quot;); //16色位图(bmp)         </div><div class="line">          mFileTypes.put(&quot;424d8240090000000000&quot;, &quot;bmp&quot;); //24位位图(bmp)         </div><div class="line">          mFileTypes.put(&quot;424d8e1b030000000000&quot;, &quot;bmp&quot;); //256色位图(bmp)         </div><div class="line">          mFileTypes.put(&quot;41433130313500000000&quot;, &quot;dwg&quot;); //CAD (dwg)         </div><div class="line">          mFileTypes.put(&quot;3c21444f435459504520&quot;, &quot;html&quot;); //HTML (html)    </div><div class="line">          mFileTypes.put(&quot;3c21646f637479706520&quot;, &quot;htm&quot;); //HTM (htm)    </div><div class="line">          mFileTypes.put(&quot;48544d4c207b0d0a0942&quot;, &quot;css&quot;); //css    </div><div class="line">          mFileTypes.put(&quot;696b2e71623d696b2e71&quot;, &quot;js&quot;); //js    </div><div class="line">          mFileTypes.put(&quot;7b5c727466315c616e73&quot;, &quot;rtf&quot;); //Rich Text Format (rtf)         </div><div class="line">          mFileTypes.put(&quot;38425053000100000000&quot;, &quot;psd&quot;); //Photoshop (psd)         </div><div class="line">          mFileTypes.put(&quot;46726f6d3a203d3f6762&quot;, &quot;eml&quot;); //Email [Outlook Express 6] (eml)           </div><div class="line">          mFileTypes.put(&quot;d0cf11e0a1b11ae10000&quot;, &quot;doc&quot;); //MS Excel 注意：word、msi 和 excel的文件头一样         </div><div class="line">          mFileTypes.put(&quot;d0cf11e0a1b11ae10000&quot;, &quot;vsd&quot;); //Visio 绘图         </div><div class="line">          mFileTypes.put(&quot;5374616E64617264204A&quot;, &quot;mdb&quot;); //MS Access (mdb)          </div><div class="line">          mFileTypes.put(&quot;252150532D41646F6265&quot;, &quot;ps&quot;);  </div><div class="line">          mFileTypes.put(&quot;255044462d312e350d0a&quot;, &quot;pdf&quot;); //Adobe Acrobat (pdf)       </div><div class="line">          mFileTypes.put(&quot;2e524d46000000120001&quot;, &quot;rmvb&quot;); //rmvb/rm相同      </div><div class="line">          mFileTypes.put(&quot;464c5601050000000900&quot;, &quot;flv&quot;); //flv与f4v相同      </div><div class="line">          mFileTypes.put(&quot;00000020667479706d70&quot;, &quot;mp4&quot;);  </div><div class="line">          mFileTypes.put(&quot;49443303000000002176&quot;, &quot;mp3&quot;);  </div><div class="line">          mFileTypes.put(&quot;000001ba210001000180&quot;, &quot;mpg&quot;); //         </div><div class="line">          mFileTypes.put(&quot;3026b2758e66cf11a6d9&quot;, &quot;wmv&quot;); //wmv与asf相同        </div><div class="line">          mFileTypes.put(&quot;52494646e27807005741&quot;, &quot;wav&quot;); //Wave (wav)      </div><div class="line">          mFileTypes.put(&quot;52494646d07d60074156&quot;, &quot;avi&quot;);  </div><div class="line">          mFileTypes.put(&quot;4d546864000000060001&quot;, &quot;mid&quot;); //MIDI (mid)       </div><div class="line">          mFileTypes.put(&quot;504b0304140000000800&quot;, &quot;zip&quot;);  </div><div class="line">          mFileTypes.put(&quot;526172211a0700cf9073&quot;, &quot;rar&quot;);  </div><div class="line">          mFileTypes.put(&quot;235468697320636f6e66&quot;, &quot;ini&quot;);  </div><div class="line">          mFileTypes.put(&quot;504b03040a0000000000&quot;, &quot;jar&quot;);  </div><div class="line">          mFileTypes.put(&quot;4d5a9000030000000400&quot;, &quot;exe&quot;);//可执行文件    </div><div class="line">          mFileTypes.put(&quot;3c25402070616765206c&quot;, &quot;jsp&quot;);//jsp文件    </div><div class="line">          mFileTypes.put(&quot;4d616e69666573742d56&quot;, &quot;mf&quot;);//MF文件    </div><div class="line">          mFileTypes.put(&quot;3c3f786d6c2076657273&quot;, &quot;xml&quot;);//xml文件    </div><div class="line">          mFileTypes.put(&quot;494e5345525420494e54&quot;, &quot;sql&quot;);//xml文件    </div><div class="line">          mFileTypes.put(&quot;7061636b616765207765&quot;, &quot;java&quot;);//java文件    </div><div class="line">          mFileTypes.put(&quot;406563686f206f66660d&quot;, &quot;bat&quot;);//bat文件    </div><div class="line">          mFileTypes.put(&quot;1f8b0800000000000000&quot;, &quot;gz&quot;);//gz文件    </div><div class="line">          mFileTypes.put(&quot;6c6f67346a2e726f6f74&quot;, &quot;properties&quot;);//bat文件    </div><div class="line">          mFileTypes.put(&quot;cafebabe0000002e0041&quot;, &quot;class&quot;);//bat文件    </div><div class="line">          mFileTypes.put(&quot;49545346030000006000&quot;, &quot;chm&quot;);//bat文件    </div><div class="line">          mFileTypes.put(&quot;04000000010000001300&quot;, &quot;mxp&quot;);//bat文件    </div><div class="line">          mFileTypes.put(&quot;504b0304140006000800&quot;, &quot;docx&quot;);//docx文件    </div><div class="line">          mFileTypes.put(&quot;d0cf11e0a1b11ae10000&quot;, &quot;wps&quot;);//WPS文字wps、表格et、演示dps都是一样的    </div><div class="line">          mFileTypes.put(&quot;6431303a637265617465&quot;, &quot;torrent&quot;);  </div><div class="line"></div><div class="line"></div><div class="line">          mFileTypes.put(&quot;6D6F6F76&quot;, &quot;mov&quot;); //Quicktime (mov)      </div><div class="line">          mFileTypes.put(&quot;FF575043&quot;, &quot;wpd&quot;); //WordPerfect (wpd)       </div><div class="line">          mFileTypes.put(&quot;CFAD12FEC5FD746F&quot;, &quot;dbx&quot;); //Outlook Express (dbx)         </div><div class="line">          mFileTypes.put(&quot;2142444E&quot;, &quot;pst&quot;); //Outlook (pst)          </div><div class="line">          mFileTypes.put(&quot;AC9EBD8F&quot;, &quot;qdf&quot;); //Quicken (qdf)         </div><div class="line">          mFileTypes.put(&quot;E3828596&quot;, &quot;pwl&quot;); //Windows Password (pwl)             </div><div class="line">          mFileTypes.put(&quot;2E7261FD&quot;, &quot;ram&quot;); //Real Audio (ram)       </div><div class="line">          mFileTypes.put(&quot;null&quot;, null); //null  </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * 获取文件头信息</div><div class="line">   * @param filePath</div><div class="line">   * @return</div><div class="line">   */</div><div class="line">  public static String getFileHeader(String filePath) &#123;</div><div class="line">     File file=new File(filePath);  </div><div class="line">          if(!file.exists() || file.length()&lt;11)&#123;  </div><div class="line">              return &quot;null&quot;;  </div><div class="line">          &#125;  </div><div class="line">          FileInputStream is = null;  </div><div class="line">          String value = null;  </div><div class="line">          try &#123;  </div><div class="line">              is = new FileInputStream(file);  </div><div class="line">              byte[] b = new byte[10];  </div><div class="line">              is.read(b, 0, b.length);  </div><div class="line">              value = bytesToHexString(b);  </div><div class="line">          &#125; catch (Exception e) &#123;  </div><div class="line">          &#125; finally &#123;  </div><div class="line">              if(null != is) &#123;  </div><div class="line">                  try &#123;  </div><div class="line">                      is.close();  </div><div class="line">                  &#125; catch (IOException e) &#123;&#125;  </div><div class="line">              &#125;  </div><div class="line">          &#125;  </div><div class="line">          return value;  </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * 将byte字节转换为十六进制字符串</div><div class="line">   * @param src</div><div class="line">   * @return</div><div class="line">   */</div><div class="line">  private static String bytesToHexString(byte[] src) &#123;</div><div class="line">      StringBuilder builder = new StringBuilder();</div><div class="line">      if (src == null || src.length &lt;= 0) &#123;</div><div class="line">          return null;</div><div class="line">      &#125;</div><div class="line">      String hv;</div><div class="line">      for (int i = 0; i &lt; src.length; i++) &#123;</div><div class="line">          hv = Integer.toHexString(src[i] &amp; 0xFF).toUpperCase();</div><div class="line">          if (hv.length() &lt; 2) &#123;</div><div class="line">              builder.append(0);</div><div class="line">          &#125;</div><div class="line">          builder.append(hv);</div><div class="line">      &#125;</div><div class="line">      return builder.toString();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-获取分享文件的Uri进行分享"><a href="#2-获取分享文件的Uri进行分享" class="headerlink" title="2. 获取分享文件的Uri进行分享"></a>2. 获取分享文件的Uri进行分享</h3><blockquote>
<p>前面也有提到，在 Android 7.0 以后，系统对 scheme 为 file:// 的 uri 进行了限制，所以之前进行文件分享的一些接口就不能用了，此时就得使用其他的URI scheme 来代替 file://，比如 MediaStore 的 content:// 或者FileProvider 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public static void shareFile(Context context, String filePath) &#123;</div><div class="line">        if (context == null || TextUtils.isEmpty(filePath))&#123;</div><div class="line">            LogUtil.e(&quot;shareFile context is null or filePath is empty.&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        File file = new File(filePath);</div><div class="line">        if (file != null &amp;&amp; file.exists())&#123;</div><div class="line">            Intent intent = new Intent();</div><div class="line">            intent.setAction(Intent.ACTION_SEND);</div><div class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">            intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class="line">           </div><div class="line">// 如果需要指定分享到某个app，配置 componentName 即可</div><div class="line">           if (!TextUtils.isEmpty(componentName) &amp;&amp; &quot;com.tencent.mm&quot;.equals(componentName))&#123;</div><div class="line">                // 分享精确到微信的页面，朋友圈页面，或者选择好友分享页面</div><div class="line">                 ComponentName comp = new ComponentName(&quot;com.tencent.mm&quot;, &quot;com.tencent.mm.ui.tools.ShareToTimeLineUI&quot;);</div><div class="line">                 intent.setComponent(comp);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            intent.putExtra(Intent.EXTRA_STREAM, uri);</div><div class="line">            // 授予目录临时共享权限</div><div class="line">            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION</div><div class="line">                    | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line"></div><div class="line">            String fileType;</div><div class="line">            Uri fileUri = getFileUri(context, file);</div><div class="line">            if (fileUri != null &amp;&amp; !TextUtils.isEmpty(fileUri.toString())) &#123;</div><div class="line">                ContentResolver contentResolver = context.getContentResolver();</div><div class="line">                fileType = contentResolver.getType(fileUri);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (TextUtils.isEmpty(fileType))&#123;</div><div class="line">                fileType = getFileType(filePath); // 使用上面的根据文件头信息获取文件类型的方法</div><div class="line">            &#125;</div><div class="line"></div><div class="line">           if (TextUtils.isEmpty(fileType))&#123;</div><div class="line">               fileType =  &quot;*/*&quot;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">            LogUtil.d(&quot;shareFile fileType &quot; + fileType);</div><div class="line">            LogUtil.d(&quot;shareFile uri: &quot; + uri);</div><div class="line"></div><div class="line">            intent.setDataAndType(uri, fileType);</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                context.startActivity(Intent.createChooser(intent, file.getName()));</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>// 获取文件Uri<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public static Uri getFileUri(Context context, File file)&#123;</div><div class="line">        Uri uri;</div><div class="line">       // 低版本直接用 Uri.fromFile</div><div class="line">        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N) &#123;</div><div class="line">            uri = Uri.fromFile(file);</div><div class="line">        &#125;else &#123;</div><div class="line">            //  使用 FileProvider 会在某些 app 下不支持（在使用FileProvider 方式情况下QQ不能支持图片、视频分享，微信不支持视频分享）</div><div class="line">            uri = FileProvider.getUriForFile(context,</div><div class="line">                            &quot;gdut.bsx.videoreverser.fileprovider&quot;,</div><div class="line">                    file);</div><div class="line"></div><div class="line">            ContentResolver cR = context.getContentResolver();</div><div class="line">            if (uri != null &amp;&amp; !TextUtils.isEmpty(uri.toString())) &#123;</div><div class="line">                String fileType = cR.getType(uri);</div><div class="line">// 使用 MediaStore 的 content:// 而不是自己 FileProvider 提供的uri，不然有些app无法适配</div><div class="line">                if (!TextUtils.isEmpty(fileType))&#123;</div><div class="line">                    if (fileType.contains(&quot;video/&quot;))&#123;</div><div class="line">                        uri = getVideoContentUri(context, file);</div><div class="line">                    &#125;else if (fileType.contains(&quot;image/&quot;))&#123;</div><div class="line">                        uri = getImageContentUri(context, file);</div><div class="line">                    &#125;else if (fileType.contains(&quot;audio/&quot;))&#123;</div><div class="line">                        uri = getAudioContentUri(context, file);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return uri;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * Gets the content:// URI from the given corresponding path to a file</div><div class="line">   *</div><div class="line">   * @param context</div><div class="line">   * @param imageFile</div><div class="line">   * @return content Uri</div><div class="line">   */</div><div class="line">  public static Uri getImageContentUri(Context context, File imageFile) &#123;</div><div class="line">      String filePath = imageFile.getAbsolutePath();</div><div class="line">      Cursor cursor = context.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</div><div class="line">              new String[] &#123; MediaStore.Images.Media._ID &#125;, MediaStore.Images.Media.DATA + &quot;=? &quot;,</div><div class="line">              new String[] &#123; filePath &#125;, null);</div><div class="line">      if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">          int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));</div><div class="line">          Uri baseUri = Uri.parse(&quot;content://media/external/images/media&quot;);</div><div class="line">          return Uri.withAppendedPath(baseUri, &quot;&quot; + id);</div><div class="line">      &#125; else &#123;</div><div class="line">          if (imageFile.exists()) &#123;</div><div class="line">              ContentValues values = new ContentValues();</div><div class="line">              values.put(MediaStore.Images.Media.DATA, filePath);</div><div class="line">              return context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);</div><div class="line">          &#125; else &#123;</div><div class="line">              return null;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Gets the content:// URI from the given corresponding path to a file</div><div class="line">   *</div><div class="line">   * @param context</div><div class="line">   * @param videoFile</div><div class="line">   * @return content Uri</div><div class="line">   */</div><div class="line">  public static Uri getVideoContentUri(Context context, File videoFile) &#123;</div><div class="line">      String filePath = videoFile.getAbsolutePath();</div><div class="line">      Cursor cursor = context.getContentResolver().query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,</div><div class="line">              new String[] &#123; MediaStore.Video.Media._ID &#125;, MediaStore.Video.Media.DATA + &quot;=? &quot;,</div><div class="line">              new String[] &#123; filePath &#125;, null);</div><div class="line">      if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">          int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));</div><div class="line">          Uri baseUri = Uri.parse(&quot;content://media/external/video/media&quot;);</div><div class="line">          return Uri.withAppendedPath(baseUri, &quot;&quot; + id);</div><div class="line">      &#125; else &#123;</div><div class="line">          if (videoFile.exists()) &#123;</div><div class="line">              ContentValues values = new ContentValues();</div><div class="line">              values.put(MediaStore.Video.Media.DATA, filePath);</div><div class="line">              return context.getContentResolver().insert(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, values);</div><div class="line">          &#125; else &#123;</div><div class="line">              return null;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * Gets the content:// URI from the given corresponding path to a file</div><div class="line">   *</div><div class="line">   * @param context</div><div class="line">   * @param audioFile</div><div class="line">   * @return content Uri</div><div class="line">   */</div><div class="line">  public static Uri getAudioContentUri(Context context, File audioFile) &#123;</div><div class="line">      String filePath = audioFile.getAbsolutePath();</div><div class="line">      Cursor cursor = context.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,</div><div class="line">              new String[] &#123; MediaStore.Audio.Media._ID &#125;, MediaStore.Audio.Media.DATA + &quot;=? &quot;,</div><div class="line">              new String[] &#123; filePath &#125;, null);</div><div class="line">      if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">          int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));</div><div class="line">          Uri baseUri = Uri.parse(&quot;content://media/external/audio/media&quot;);</div><div class="line">          return Uri.withAppendedPath(baseUri, &quot;&quot; + id);</div><div class="line">      &#125; else &#123;</div><div class="line">          if (audioFile.exists()) &#123;</div><div class="line">              ContentValues values = new ContentValues();</div><div class="line">              values.put(MediaStore.Audio.Media.DATA, filePath);</div><div class="line">              return context.getContentResolver().insert(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, values);</div><div class="line">          &#125; else &#123;</div><div class="line">              return null;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>要向在 MediaStore 中查询到文件，要不就是通知媒体库更新查询或则往里面插入一条新记录（会比较耗时）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 删除或增加图片、视频等媒体资源文件时 通知系统更新媒体库，重新扫描</div><div class="line">     * @param filePath 文件路径，包括后缀</div><div class="line">     */</div><div class="line">    public static void notifyScanMediaFile(Context context, String filePath)</div><div class="line">    &#123;</div><div class="line">        if (context == null || TextUtils.isEmpty(filePath))&#123;</div><div class="line">            LogUtil.e(&quot;notifyScanMediaFile context is null or filePath is empty.&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        MediaScannerConnection.scanFile(context,</div><div class="line">                new String[] &#123; filePath &#125;, null,</div><div class="line">                new MediaScannerConnection.OnScanCompletedListener() &#123;</div><div class="line">                    public void onScanCompleted(String path, Uri uri) &#123;</div><div class="line">                        LogUtil.i(&quot;notifyScanMediaFile Scanned &quot; + path);</div><div class="line">                        LogUtil.i(&quot;notifyScanMediaFile -&gt; uri=&quot; + uri);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="最后安利一波"><a href="#最后安利一波" class="headerlink" title="最后安利一波"></a>最后安利一波</h3><p>最近自己开发的这个 App 按照了本篇文章中提到的分享方案进行了实现，实际效果大家直接去 Google Play 或国内酷安市场下载安装试试，欢迎拍砖。<br><a href="https://www.coolapk.com/apk/gdut.bsx.videoreverser" target="_blank" rel="external">VEditor - 酷安</a><br><a href="https://play.google.com/store/apps/details?id=gdut.bsx.videoreverser" target="_blank" rel="external">VEditor - Google Play</a><br><img src="http://upload-images.jianshu.io/upload_images/580515-4cf765867f93bdc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 项目组件化重构的一些考虑]]></title>
      <url>/2017/03/09/Android%20%E9%A1%B9%E7%9B%AE%E7%BB%84%E4%BB%B6%E5%8C%96%E9%87%8D%E6%9E%84%E7%9A%84%E4%B8%80%E4%BA%9B%E8%80%83%E8%99%91/</url>
      <content type="html"><![CDATA[<h2 id="重构的目的"><a href="#重构的目的" class="headerlink" title="重构的目的"></a>重构的目的</h2><p>一言以蔽之：重构就是为了改善既有代码的设计。</p>
<blockquote>
<p>在既不修正错误，又不增加新的功能性前提下，重构是用于提高代码的可维护性、改善代码内部结构与设计、移除冗余代码、增强代码可阅读性、降低业务耦合的重要手段。</p>
</blockquote>
<p>通过重构代码来增进内部的清晰性和一致性，面向代码未来的生命周期，使其在将来更具有维护性，可以说这是一种项目可持续的技术演进。</p>
<h2 id="重构内容"><a href="#重构内容" class="headerlink" title="重构内容"></a>重构内容</h2><p><strong>考虑到实际中的项目情况，项目重构的主要工作内容分为下面几个方面：</strong></p>
<ul>
<li>构建组件化多模块项目架构，分离业务组件和基础模块，提高业务组件的可测试性和基础模块的可复用性；</li>
<li>重复代码的提炼，剔除重复代码，提出核心库；</li>
<li>按照实际需求场景，整理竞品相关资料，统一业务逻辑、规范接口、解耦、增强模块扩展性；</li>
<li>代码优化，拆分冗长的类，Review 代码逻辑，完善业务流程；</li>
<li>提取继承体系中重复的属性与方法到父类，重新封装提告可复用性；</li>
</ul>
<h2 id="具体实施过程"><a href="#具体实施过程" class="headerlink" title="具体实施过程"></a>具体实施过程</h2><h3 id="构建模块化基础架构"><a href="#构建模块化基础架构" class="headerlink" title="构建模块化基础架构"></a>构建模块化基础架构</h3><p><strong>这个可以根据项目实际情况，针对项目组件化开发进行预研，确定了合适的技术选型方案，并考虑构建了组件化的项目基础架构。</strong></p>
<blockquote>
<p>关于组件化和模块化的区别，相信很多开发者对于两者的定义都有各自的理解。</p>
</blockquote>
<p>模块化就是将一个程序按照其功能做拆分，分成相互独立的模块，以便于每个模块只包含与其功能相关的内容。模块我们相对熟悉,比如登录功能可以是一个模块，搜索功能可以是一个模块。</p>
<p>组件化就是基于可重用的目的，将一个大的软件系统按照分离关注点的形式，拆分成多个独立的组件，降低耦合。所以一个组件也可以是模块，一个模块也可以是一个组件。</p>
<p>模块化和组件化本质思想是一样的，都是“大化小”，两者的目的都是为了重用和解耦，如果非要说区别，那么可以认为模块化粒度更小，更侧重于代码功能上的重用，而组件化粒度稍大于模块，更侧重于业务解耦。</p>
<p>所以组件化的核心思想其实是为业务解耦服务的，一个组件最大的特点是具有了独立运行的能力，可以作为一个能偶进行独立开发、运行、测试、发布的工程项目，所以最大的优势是大大缩减了工程结构直接降低了编译时间，让开发和测试可以同时进行，业务既可以整合也可以独立拆分。</p>
<h4 id="纵向维度划分——分层架构思想"><a href="#纵向维度划分——分层架构思想" class="headerlink" title="纵向维度划分——分层架构思想"></a>纵向维度划分——分层架构思想</h4><p>说到分层结构，就不得不提到 Uncle Bob 写的 <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">The Clean Architecture</a> 这篇文章。关于这篇文章中提到的 Clean 模型，有一个很重要的思想就是：<strong>代码结构用一个依赖规则分离到洋葱状的层来表示：内层不应该知道任何关于外层的东西，也就是外层依赖应该指向里面。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-1b62fb4364338bc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The Clean Architecture.png"></p>
<p>通常在 App 开发中提到的 3 层架构可以说是一种物理分层概念，从上往下即展示层、业务层、持久层，也从上往下由上一层依赖下一层。不同层之间也是<strong>高内聚低耦合</strong>的体现，层内高内聚，层间低耦合，<strong>所谓的层</strong>是对层内具体工作的高度抽象。低耦合则是依赖倒转原则体现出来，高层依赖于下层的抽象而不是具体。</p>
<p>而对于项目中开发中经常提到的采用了 <strong>M-V-C 或 M-V-P 或 M-V-VM </strong>架构设计，其实为了区别开 3 层架构的分层结构，<strong>M-V-X</strong>更适合说是一种项目设计模式，这些都是为了解决拥有图像界面的程序开发复杂性而产生的模式。</p>
<p>按照我开发中所面对的实际业务场景，如果从开发者 App 到 SDK 从外到内这个过程来划分，项目大致可分为<strong>业务核心层、数据模型层、 基础服务层</strong>三个层次。按照事件从外到内，数据从里及外的传递。每一层都有各自独立的功能模块，上层依赖于下一层的服务，下一层为上层的业务提供服务支撑。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-dfd4c9abcf1927d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="基础架构.png"></p>
<p>这里举个之前做 SDK 开发的例子。我们把现有业务 SDK 的不同业务类型作为划分业务组件的依据，实现了业务组件之间的相互独立，业务逻辑不会有相互耦合，而组件内部又是可以单独开发、运行调试、打包测试、单独发布。项目的基础服务层实现了多模块化，网络请求、缓存控制作为了数据核心模块单独提出，从各业务模块中抽离可共用的公共模块，提升可复用性，为上层业务提供统一的基础服务。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">The Clean Architecture</a></p>
<p><a href="https://www.kymjs.com/code/2016/10/18/01/" target="_blank" rel="external">Android业务组件化开发实践</a></p>
<p><a href="http://www.jianshu.com/p/3faa835de543" target="_blank" rel="external">Android 跨 module 交互和方法调用</a></p>
<p><a href="http://blog.spinytech.com/2016/12/28/android_modularization/" target="_blank" rel="external">Android架构思考(模块化、多进程)</a></p>
<p><a href="http://blog.csdn.net/dd864140130/article/details/53645290" target="_blank" rel="external">Android 开发:由模块化到组件化(一)</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[List 分页加载数据控制机制]]></title>
      <url>/2017/03/01/List%20%E5%88%86%E9%A1%B5%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>分页加载是一种应用很广泛的数据展示控制机制，相信绝大多数开发者对于这一套机制都非常熟悉。这篇文章的主要目的结合实际的使用场景，对以往在开发中遇到一些概念进行梳理，归纳的同时加深理解，也希望能帮助更多刚刚接触到开发的同学。</p>
</blockquote>
<p>本篇文章不聊怎么具体实现分页加载，因为现在太多成熟的方案，直接借助第三方的开源库可以减少很多细节的考虑，<strong>重复的造轮子是没有意义的</strong>。我们只需要从基本概念上切入，考虑实际场景的需求，针对一些主要问题进行分化，思考基本的解决方案是如何构建的即可，下面我们来一同进行思考。</p>
<h3 id="适合分页加载的场景"><a href="#适合分页加载的场景" class="headerlink" title="适合分页加载的场景"></a>适合分页加载的场景</h3><p>要实现分页加载这套机制，在不同终端上的实现可以说是：基本原理相同，只是展示时处理起来有所差异而已。</p>
<blockquote>
<p>在前端网页界面中，通常都是点击跳转后到下一页查看内容，一般都是直接提供了可点击的页码进行跳转，属于基本的分页式。而在移动设备 App 上，交互上主要靠手势的滑动控制，所以基本都是上滑时分页加载更多内容，可以说属于段页式。</p>
</blockquote>
<p>对于移动终端上采用了列表形式（ ListView 等等）展示内容时，在数据量较大的情况下，分页加载具有下面几个特点：</p>
<ul>
<li>减少初始加载的耗时（网络加载、数据解析、数据填充等）</li>
<li>减小缓存数据时的内存消耗</li>
<li>提升数据的实时性（一次请求缓存的数据，可能会存在实效性问题）</li>
<li>降低单次网络请求失败的概率（弱网环境下，数据量越大越容易失败）</li>
<li>减少一些不必要流量消耗（用户通常不会一次浏览特别多的数据）</li>
<li>可以提升用户在交互上的体验（上滑加载更多）</li>
</ul>
<p>在实际场景，如果需要对上述情况需求的，可以考虑一下进行分页加载。下面以在 Android 端实现 List 分页加载为例来梳理一些概念</p>
<h3 id="分页加载的数据请求行为"><a href="#分页加载的数据请求行为" class="headerlink" title="分页加载的数据请求行为"></a>分页加载的数据请求行为</h3><p>这里需要先明确两个概念：<strong>界面上每页实际展示的数量</strong>和<strong>控制请求时每页加载的数量</strong>。一般来说考虑到多设备适配，请求时每页加载的数量要大于每页实际展示的数量。</p>
<p><strong>通常对于分页加载的数据请求行为主要有下面三个：</strong></p>
<ul>
<li>初始化加载数据（首次启动界面时加载数据）</li>
<li>下拉刷新数据 （刷新当前页面的数据）</li>
<li>上拉加载更多 （加载下一页数据）</li>
</ul>
<p>初始化的时候数据作为在创建界面时展示的内容，所以需要在保证在基础数据完备的情况下，考虑如何更快完成 loading 过程。这里有一个理念就是<strong>先保证可用性再考虑锦上添花的事情</strong></p>
<p>通常对于实时性要求不高的应用，可以考虑读取预先缓存的历史数据作为初始化时的填充内容，界面加载完成后再主动请求进行刷新操作去更新界面内容。</p>
<p>在这种情况下，为了能够快速的滑动浏览内容，同时为了避免反复的网络请求，简单的实现可以设置一个 DataSet 作为网络数据请求成功后的内存缓存仓库，当然如果对应用有更高要求的，可以再考虑做数据持久化。这样就可以引出下面两种方案来设计。</p>
<h3 id="方案一：缓存容器控制"><a href="#方案一：缓存容器控制" class="headerlink" title="方案一：缓存容器控制"></a>方案一：缓存容器控制</h3><p>原则就是：每次都是先读取当前已经缓存在容器中的数据，而从网络获取的数据是为了更新容器的数据，在更新到显示界面。</p>
<p>该方案基于前面提到的使用一个 DataSet 作为数据请求成功后的内存缓存仓库，在此基础上，界面获取的数据可以从这个 DataSet 中读取，只需要一次请求缓存较多的数据，不需要每次从网络读取数据。</p>
<p>只有当数据需要刷新或者 DataSet 数据展示量到达一个设定的阀值时，才开始从网络请求获取数据对 DataSet 容器进行更新，而关于数据排重可以根据每条 item 的唯一 ID 完成。</p>
<p>类似图片缓存控制一样，所以考虑做三级缓存也是可以的。</p>
<h3 id="方案二：实时分页加载"><a href="#方案二：实时分页加载" class="headerlink" title="方案二：实时分页加载"></a>方案二：实时分页加载</h3><p>这个方案的原则是：每次请求按需加载，加载更多时进行实时数据获取。</p>
<p>实际处理起来还是会有一些问题，比如刷新时如何控制新增数据的填充，加载更多时如何控制数据变化导致的数据重复添加。为解决这些问题需要考虑下面几个因素：</p>
<ul>
<li>每次请求的数据量（每页的数据量）；</li>
<li>当前数据展示总量（list 中已经加载的量）；</li>
<li>服务端数据总量；</li>
<li>服务端总页数（按照当前每次请求数计算）；</li>
</ul>
<p><strong>初始化加载数据时</strong><br>初始化时，每次像服务器请求最新的第一页数据展示到 list，请求失败展示 No Content 页面（可手动刷新），并记录上面描述的几个数值。</p>
<p><strong>下拉刷新数据</strong><br>对比当前请求回来获取到的服务端数据总量和上次请求成功时保存服务端数据总量，两者的差值是否大于当前请求一页的数据量，如果是则直接替换原来的所有数据，不是的话只要把新增的数据 add 到 list 的 header 即可，注意数据排重。</p>
<p><strong>上拉加载更多</strong></p>
<p>获取上次请求时保存的页码数的下一页的数据添加到 list 的 footer 即可。</p>
<h3 id="解决下拉加载更多时，服务端数据变化导致数据重复的解决方法有三种："><a href="#解决下拉加载更多时，服务端数据变化导致数据重复的解决方法有三种：" class="headerlink" title="解决下拉加载更多时，服务端数据变化导致数据重复的解决方法有三种："></a>解决下拉加载更多时，服务端数据变化导致数据重复的解决方法有三种：</h3><h4 id="1、使用缓存："><a href="#1、使用缓存：" class="headerlink" title="1、使用缓存："></a>1、使用缓存：</h4><p>　　可以定时的把n页缓存到数据库中，这样获取前面n页的时候就不会有重复的问题了，但是后面的分页内容还是无法保证不重复。
　　</p>
<h4 id="2、使用id作为限定进行分页："><a href="#2、使用id作为限定进行分页：" class="headerlink" title="2、使用id作为限定进行分页："></a>2、使用id作为限定进行分页：</h4><p>　　客户端记录当前分页的最后一条记录的id，然后在请求下一页的时候，从这个id开始算起进行获取一页大小的内容，比如分页大小为20，按照id倒序获取列表内容：<br>　　select <em> from tablename where id<br>　　优点：这种方式可以确保不会获取到重复的数据；<br>　　缺点：需要调整服务器端和客户端的分页方法，通过当前记录id和pageSize去请求服务器端。并且如果按照其他字段而不是id进行的话要确保该字段不会被修改，并且不会有重复，考虑到性能，最好加上索引，推荐使用整型字段：<br>　　select </em> from tablename where 排序字段&lt;:排序字段当前记录值 order=”” by=”” desc=”” limit=”” 0=”” 20=”” span=””&gt;<br>　　另外，如果需要加列表缓存，只能按照当前页的最后一条记录的ID作为key的标示，这样缓存需要的存储空间需要很多，如果列表添加数据很快，用户访问第一页的时候，总是会获取到新的数据，这样会不断的读数据库，然后写缓存，缓存利用率不高。（而类似于Hibernate的列表缓存，都是在数据表有增删改操作的时候，让列表缓存失效的，我猜也是出于数据库数据有改动的情况下缓存命中率不高，所以让列表缓存失效的，以便节省内存空间。）</p>
<h4 id="3、客户端排除："><a href="#3、客户端排除：" class="headerlink" title="3、客户端排除："></a>3、客户端排除：</h4><p>　　通过在客户端中保存已加载记录的id，进行数据去重，如果被去重的数据比较多，则可以考虑在请求下一页的数据。<br>　　优点：客户端记录已经加载的数据，再次加载的时候过滤掉已有的数据。这种方法能确保不会出现重复的数据，并且不改动服务器端的原有逻辑；<br>　　缺点：当列表数据增加很快的情况下，比如日志记录表，获取下一页的数据会有很多的重复记录，不适合这种情况，适用于列表数据添加不是很频繁的情况。<br>　　即使是用到了缓存，当缓存时间比较长，或者新增数据比较快时，在缓存失效以后，重新获取分页数据的时候也会有大量的重复内容。</p>
]]></content>
      
        <categories>
            
            <category> 技术调研 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术思路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[X5 浏览器内核调研报告]]></title>
      <url>/2016/11/01/X5%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>关于这份调研报告，不是从技术角度深入探索，重点是从产品本身分析，通俗易懂才是重点。主要是为了锻炼平时做技术调研和竞品分析的能力，以及业务拓展的技术储备。内容有点多，下面 <strong>X5 </strong>内核调研报告将分为三个环节：<strong>Why - What - How</strong> 描述。</p>
</blockquote>
<p>##按照经典的 2W1H 的策略描述<br><img src="http://upload-images.jianshu.io/upload_images/580515-f3ab1a6782284a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2W1H策略"></p>
<p>##WHY</p>
<p>###一、Android 端为什么需要考虑浏览器内核问题 ？<br><strong>一言以蔽之：你是要搞定一个 X5 上的兼容性问题，还是要搞定几百台安卓手机上的兼容性问题。</strong>下面就从多个维度来分析兼容性问题：</p>
<h4 id="系统内置浏览器内核差异化"><a href="#系统内置浏览器内核差异化" class="headerlink" title="系统内置浏览器内核差异化"></a>系统内置浏览器内核差异化</h4><p>对于 Android 系统，通常以下面四个节点作为重要划分依据，分析浏览器内核的差异性先系统差异性说起，下面是目前 Google 最新统计数据：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-3074ce97e2e6b075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">系统版本</th>
<th style="text-align:center">设备占比</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Android 4.0以下</td>
<td style="text-align:center">0.9%</td>
</tr>
<tr>
<td style="text-align:center">Android 4.0 - Android 4.4</td>
<td style="text-align:center">11.0%</td>
</tr>
<tr>
<td style="text-align:center">Android 4.4</td>
<td style="text-align:center">20.0%</td>
</tr>
<tr>
<td style="text-align:center">Android5.0及以上</td>
<td style="text-align:center">68.1%</td>
</tr>
</tbody>
</table>
<p><strong>从上面数据来看，当前绝大多数 Android 手机使用的都是 Android 4.4 或以上的系统， 这也是System WebView 内核大变更的分界线。</strong><br>在 Android 4.4版本中，原本基于 Android WebKit 的 WebView 实现被换成基于Chromium的实现，新的 Chromium 实现专注于提供一致性的接口（为了兼容以前的应用），而内部的渲染引擎改为使用基于 Blink/Content 内核的引擎，这实现不管是从功能上还是性能来讲，都带来巨大的提升。</p>
<blockquote>
<p>Chromium是一个由Google主导的开源浏览器工程，Chrome浏览器会选择在它的某一个稳定版本进行开发和发布。除了Chrome浏览器，Chrome OS也是基于Chromium开发的。</p>
</blockquote>
<p>从 Android 5.0 开始，Google 把 Chromium blink内核 webview 作为 apk 单独从系统抽离出去，可以在应用市场上面接收安装更新。应用可以直接使用该webview内核，Google也可以及时发布更新，不用再通过更新系统才能更新浏览器内核，也避免部分了 Android 系统碎片化问题。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-55de30c3fac6ccdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="Android-平台碎片化"><a href="#Android-平台碎片化" class="headerlink" title="Android 平台碎片化"></a>Android 平台碎片化</h4><p><strong>关于 Android 碎片化问题集中表现在下面几个方面：</strong></p>
<ul>
<li>设备繁多，硬件配置参差不弃，设备性能各异，差距很大</li>
<li>品牌众多，厂商标准不一致，定制化系统体验不同</li>
<li>版本各异，国内外系统环境差异巨大</li>
<li>分辨率不统一，各种类型尺寸众多</li>
</ul>
<p>下图是 OpenSignal 在 2015 年 8 月发布的基础统计数据，针对市场上常见的 1294 种手机品牌进行了市场占有率统计，可以看出机型分布非常零碎。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-66234b0c88c92001.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下图是关于 Android 设备分辨率的分布图，可以看出 Android 设备各种类型尺寸众多，开发者需要进行适配的难度非常大。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-ebd0ec58e114677b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>特别是在 Android 系统开源但 Google 提供的基础服务在国内无法使用的情况下，国内厂商往往抛弃了 Google 既有的规范，对系统进行了大量的定制，导致设备ROM 与原生 Android 系统环境差异性巨大。</p>
<p>对于浏览器内核也是如此，即便是Google推出了基于 Chromium blink 内核实现的 WebView，但是很多国内厂商对其进行了精简或替代，导致 WebView 内核也是碎片化问题严重，这让开发者直接使用系统浏览器内核进行开发产生了众多顾虑，不同机型适配难度也大大增加。</p>
<h3 id="二、目前移动端-H5-适配已有的问题是什么？"><a href="#二、目前移动端-H5-适配已有的问题是什么？" class="headerlink" title="二、目前移动端 H5 适配已有的问题是什么？"></a>二、目前移动端 H5 适配已有的问题是什么？</h3><p><strong> 一言以蔽之：设备碎片化和UI风格的自定义（动画特效等）性能差。</strong><br>由于Android本身碎片化问题严重，不同设备上的体验差异性太大，开发者很难全面适配。虽然Google在不断引入行业中领先的技术改善体验，但是短时间内很难覆盖，况且开源特性也导致很难统一各厂商对系统定制化的取舍。</p>
<p>在一些旧机型上面，就算h5页面中图片与文本信息并不多,但在WebView中展示的时候都会出现拖拽不流畅，切换留白、窗口闪烁等的现象，这是 WebView 自身渲染能力不强的问题所致。</p>
<p>又比如Html5的Video控件播放视频，iOS点击视频部分，会用系统自带的浏览器全屏播放视频，体验效果佳；而Android的WebView无法全屏，体验效果差一些。<br>对于页面加载慢，偶尔内存泄露，不同 Android 系统版本采用了不同内核的兼容问题等等，这些都是使用原生 webview 组件进行开发时常会遇到的问题。</p>
<p><strong>因此目前面临的首要问题就是：如何解决当前描述的移动端生态乱象。</strong></p>
<h3 id="三、为什么要用-X5-内核来改善效果？（替腾讯浏览服务-X5-内核官网介绍背书）"><a href="#三、为什么要用-X5-内核来改善效果？（替腾讯浏览服务-X5-内核官网介绍背书）" class="headerlink" title="三、为什么要用 X5 内核来改善效果？（替腾讯浏览服务 X5 内核官网介绍背书）"></a>三、为什么要用 X5 内核来改善效果？（替腾讯浏览服务 X5 内核官网介绍背书）</h3><p>腾讯浏览服务由QQ浏览器团队出品，致力于优化移动端webview体验的整套解决方案，使用QQ浏览器X5内核SDK和X5云端服务，解决移动端webview使用过程中出现的一切问题，优化用户的浏览体验。</p>
<blockquote>
<p>X5 SDK是通过调用微信/手机QQ/空间的X5内核，解决系统webview兼容性差、加载速度慢、功能缺陷等问题，开发接入便捷，大小只有253K，仅需几行代码，即可解决一切令开发者们头疼的问题，为用户提供最优秀的浏览体验。</p>
</blockquote>
<p><strong>其相对于系统webview，具有下述明显优势：</strong><br>1) 速度快：相比系统webView的网页加载速度有近30%的提升。<br>2) 省流量：云端优化技术使流量节省20%<br>3) 更安全：24小时安全问题解决机制<br>4) 更稳定：经过亿级用户的使用考验，CRASH率0.15%<br>5) 集成强大的视频播放器，支持各种视频格式直接打开<br>6) 适屏排版、字体设置等浏览增强功能的提供<br>7) Html5更完整支持。<br>8) 无系统内核的碎片化问题，更少的兼容性问题<br>X5云端服务是通过云端技术保证用户在未装QQ浏览器的情况下同样可以使用X5内核提供的优秀服务，包括云加速、云安全、云转换三大功能。</p>
<h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><p>关于 Why 这个部分，主要通过分析当前市场环境和开发者所面临的问题，引出使用 x5 内核必要性讨论。<br>对于前端开发同学而言，考虑如何更加有效的适配尽可能多的设备，兼容更多的用户环境，打造趋于一致的用户体验，在保证高度可用性的情况下，提供更多丰富的交互体验。<br>腾讯对 x5 内核的介绍看上去似乎是相当可靠的，但它是什么，接下来还得一步一步讨论关于浏览器内核。</p>
<p>##WHAT</p>
<h3 id="一、关于浏览器内核是什么？"><a href="#一、关于浏览器内核是什么？" class="headerlink" title="一、关于浏览器内核是什么？"></a>一、关于浏览器内核是什么？</h3><p><strong>关于浏览器内核的讨论可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。</strong><br>渲染引擎负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<br>浏览器内核主要的作用是将页面转变成可视化的图像结果，整个过程可以简化描述成如下步骤：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-ad08754e3f360ef0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>2013 年以前，常见的浏览器内核代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、百度等等）也纷纷放弃 webkit，投入 blink 的怀抱。</p>
<blockquote>
<p>目前国内主流浏览器内核，如UC的U3内核、QQ浏览器的X5内核以及百度的T5内核在之前的版本都是基于开源内核 Webkit 开发，所以是在 Webkit 的基础上进行二次优化，在功能与性能上大同小异。而后随着 chrome 的发展，也逐渐转为了 blink 内核。</p>
</blockquote>
<h4 id="浏览器内核渲染引擎的基础结构"><a href="#浏览器内核渲染引擎的基础结构" class="headerlink" title="浏览器内核渲染引擎的基础结构"></a>浏览器内核渲染引擎的基础结构</h4><p>从内核整体结构上看，渲染引擎可以概括为主要包括HTML解释器、CSS解释器、布局和JavaScript引擎、绘图等：</p>
<ul>
<li>HTML解释器：解释HTML文本的解释器，主要作用是将HTML文本解释成DOM(文档对象模型)树，DOM是一种文档的表示方法.</li>
<li>CSS解释器：级联样式表的解释器，主要作用是为DOM中各个元素对象计算出样式信息，从而为计算最后网页的布局提供基础设施。</li>
<li>布局：在DOM创建之后，WebKit需要将其中的元素对象同样式信息结合起来，计算他们的大小位置等布局信息，形成一个能够表示这所有信息的内部表示模型。</li>
<li>JavaScript引擎：使用JavaScript代码可以修改网页的内容，也能修改CSS的信息，JS引擎能够解释JS代码并通过DOM接口和CSSOM接口来修改网页内容和样式信息，从而改变渲染的结果。</li>
<li>绘图：使用图形库将布局计算后的各个网页的节点绘制成图形结果。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-2c9ee51ccecd91e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="关于Android-浏览器内核"><a href="#关于Android-浏览器内核" class="headerlink" title="关于Android 浏览器内核"></a>关于Android 浏览器内核</h4><p>前面介绍有提到，在 Android 4.4版本中，原本基于 Android WebKit 的 WebView 实现被换成的Chromium实现，新的 Chromium 内部的渲染引擎改为使用基于 Blink/Content 内核的引擎。</p>
<p>关于 WebKit 和 Chromium 的区别，关键在于Google 放弃了之前由 Apple 主导的开源 WebKit，可以说 WebKit 是以前维系 Google 和 Apple 一个技术交流的重要纽带。Chromium 是从一个 WebKit 分支基础上逐渐走上了自研的道路，其采用了自研的 Blink 渲染引擎和 V8 JavaScript 引擎作为新内核重要支撑。</p>
<p>下面基于高低Android系统版本的两台测试机型的实际表现，<strong>对 WebView 内核在不同系统版本中的性能差异性进行简单量化：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-997967c72da651f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从对比测试来看，在 Android 4.4 以上系统中基于 Chromium 内核的开发的WebView对比旧版本的 WebKit 性能和兼容性方面有了显著的提升，与之相对的是 Chromium 多进程的特性导致内存占用变大，而且库文件也达到了 28M 左右。<br>下图是 Chromium 的架构和主要模块示意图，从图上可知 Blink 只是其中的一个模块，和它并列的还有众多的 Chromium 模块，包括 GPU/CommandBuffe r(硬件加速架构)、V8 JavaScript 引擎、沙箱模型、CC(Chromium合成器)、IPC、UI等</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-a3b54c9053f973f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="二、关于x5-内核有什么优劣，是否有其他成熟解决方案？"><a href="#二、关于x5-内核有什么优劣，是否有其他成熟解决方案？" class="headerlink" title="二、关于x5 内核有什么优劣，是否有其他成熟解决方案？"></a>二、关于x5 内核有什么优劣，是否有其他成熟解决方案？</h2><h3 id="腾讯浏览器服务-TBS-——-X5内核"><a href="#腾讯浏览器服务-TBS-——-X5内核" class="headerlink" title="腾讯浏览器服务 TBS —— X5内核"></a>腾讯浏览器服务 TBS —— X5内核</h3><p>腾讯浏览服务 TBS 在 2.3 版本中，其 X5 内核就是基于 Android 5.0 WebView Blink内核（M37版本）适配定制优化。</p>
<p> X5 内核号称适配 Android 全部主流平台，可以在所有 Android 手机上使用Blink的技术能力，具有更好的 H5/CSS3 支持和性能。设备有安装微信、手机QQ、QQ空间即可使用最新的 TBS2.3Blink 内核。其官网提供了x5内核相关参数信息：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-37e960476b7ac8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>实际对比测试表现：下面是在同一设备下，QQ 浏览器和 Google Chrome 浏览器在 H5 支持度对比数据。</strong><br>设备 ：华为 Nexus 6p   Android 7.1<br>测试平台：<a href="https://html5test.com" target="_blank" rel="external">https://html5test.com</a><br>左：QQ Browser 7.2    X5 内核<br>右：Chrome Dev 55    Chromium 内核</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-403a4221a32e17cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从实际测试对比来看，对比Chromium 内核实际数据，X5 内核的表现并不及预期。当然测试依据主要是从兼容性和 H5 支持度这些技术指标，主要是从技术的维度来考察的。<br>考虑到实际开发场景中主要是兼容性问题比较突出，跑分不是最终目的，所以统一场景才是最重要的。下面看看 x5 的特点，可以做些什么。</p>
<h4 id="典型行业解决方案介绍——白鹭引擎"><a href="#典型行业解决方案介绍——白鹭引擎" class="headerlink" title="典型行业解决方案介绍——白鹭引擎"></a>典型行业解决方案介绍——白鹭引擎</h4><p>目前针对HTML5游戏的解决方案已经非常多，针对成熟的技术类产品对比，通常有多个维度进行对比，不仅仅是技术层面，还有许多非技术层面的内容，这里不展开比较。</p>
<p>之所以选择白鹭引擎来介绍，不仅仅是因为白鹭引擎拥有众多成熟的产品可以一站式解决而受开发者热捧，关键在于它还跟腾讯 X5 浏览器有深度合作，其好处不言而喻，恐怕会是微信游戏开发不二之选。<br>白鹭Egret引擎是一个开源免费的游戏框架，用于构建二维游戏、演示程序和其他图形界面交互应用等。Egret使用TypeScript脚本语言开发。当游戏完成最终的打包后，可以将程序转换为HTML5游戏。实现跨平台特性。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f9eb981a12298478.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>Egret Runtime 是白鹭一款支持3D的HTML5游戏加速器，解决低端机对HTML5标准支持不佳、体验差的弊端，适配不同的系统让HTML5游戏效果媲美原生游戏。跟腾讯浏览器 x5的合作，直接支持了H5游戏运行所需的底层功能， 从根本上解决了碎片化和性能问题。</p>
<p>腾讯浏览器 X5 已经解决了 HTML5 游戏在各个应用场景的运行问题，而跟合作白鹭 Egret Runtime 又可以大幅优化终端体验。根据官网介绍，在有 Egret Rumtime 加速的情况下，HTML5游戏会有3-5倍的性能提升，对比 PhoneGAP 方案约有30倍的性能提升，从而使 HTML5 游戏接近原生游戏的体验。</p>
<h1 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h1><h2 id="一、如何借助-x5-内核来进行实践？"><a href="#一、如何借助-x5-内核来进行实践？" class="headerlink" title="一、如何借助 x5 内核来进行实践？"></a>一、如何借助 x5 内核来进行实践？</h2><p>通过<a href="x5.tencent.com/">腾讯浏览服务官网</a>提供的 X5 内核接入指南，将提供的内核服务的sdk集成到应用中。由于 x5 内核是在 Android 原生 WebView 基础上的二次开发，所以其提供的 在开发者调用接口上和原生保持一致，兼容原生 webview 的各种属性设置，如果之前使用原始 webview 的几乎时可以无缝替换。</p>
<p>虽然对于主流移动应用开发模式的讨论已经是老生常谈，之前热议的 Hybrid 混合开发模式也被现在 ReactNative 、Weex 抢了风头。关键还是越来越多的场景需要高度动态化的内容，保持对用户友好且统一的体验同时，考虑更多的轻便快捷交互、快速迭代更新的特性。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-082a89de1b3c24b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>脱离实际的应用场景来讨论哪一种开发模式孰优孰劣没有意义，关键还是要贴合场景选择最适合的，所以这里对三种开发模式的相关细节不展开讨论，只针对开发有 Web 类场景需求的情况进行考虑：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b9b6e060f4418cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>相比Native App，Web 体验中受限于以上5个因素：网络环境，渲染性能，平台特性，受限于浏览器内核，系统限制。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-ab90c2341fd9e4d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>因此解决这些问题的关键在于提供一个良好的基础运行环境和一个成熟的完整解决方案。借助 x5 内核可以改善运行环境，到达交互趋于一致性。</p>
<p>关于“一致性”经常被理解为同一个应用在各种平台和场景下要有一致性的体验。但是在移动平台开发过程中，“一致性”应该是App视觉和交互习惯与其运行平台的习惯保持一致，用户整体体验保持一致。而 Web 开发“一次开发，跨平台运行”的特性与此存在一定程度上的冲突是合理的。</p>
<p>如上所述，借助 x5 内核的来进行实践的目的也就是如此。下面就按照这个设计思路就来进行具体的 x5 嵌入实施过程，从技术角度切入后，通过编写Demo试验比对实际效果，来判断带来怎样效益的提升。</p>
<h3 id="二、要怎样进行具体的实施过程，解决那些已有的问题？"><a href="#二、要怎样进行具体的实施过程，解决那些已有的问题？" class="headerlink" title="二、要怎样进行具体的实施过程，解决那些已有的问题？"></a>二、要怎样进行具体的实施过程，解决那些已有的问题？</h3><p>具体实施过程大致分为嵌入集成和实际功能应用两个部分。</p>
<h4 id="集成-X5-内核"><a href="#集成-X5-内核" class="headerlink" title="集成 X5 内核"></a>集成 X5 内核</h4><p>腾讯浏览服务 TBS 官网提供了 X5 内核SDK分为完整版和精简版。精简版不可独立下载x5内核，只能共享使用微信或手Q的x5内核，JAR包约190Kb。而完整版可独立下载x5内核，也可共享使用微信或手Q的x5内核，JAR包约280Kb。</p>
<blockquote>
<p>由于X5内核的API接口和系统的保持高度一致，因此实际的使用方式与使用原生进行开发一样。关于实际的编码过程不展开描述，具体参照官方的接入文档进行。</p>
</blockquote>
<p><strong>x5集成过程中发现了下面有几个特点：</strong></p>
<ul>
<li>如果有安装QQ 或 微信 （国内发布的版本），并且已经打开过内置- web，下拉网页顶部空白处会出现了由x5内核提供技术，表示应用是可以使用共享的x5内核。</li>
<li>如果没有安装qq微信，应用不可以可以共享使用微信 或 QQ 中的 x5 内核，但是不能共享使用其他集成了x5应用的内核，只能使用完整版内核sdk包。</li>
<li>有些设备首次启动无法启用 x5 内核，需要进程重启或首次启动长耗时等待以后才能正常使用 x5 内核。</li>
<li>当无法使用 x5 内核，腾讯浏览服务 TBS SDK 会默认使用系统内置的webview，两者接口保持高度一致。</li>
<li>x5对视频播放的支持很好，可全屏效果控制方便，腾讯也提供了配套的sdk后台服务。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-3da826c6dffbfb32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="实际功能应用（X5EngineDemo-示例程序）"><a href="#实际功能应用（X5EngineDemo-示例程序）" class="headerlink" title="实际功能应用（X5EngineDemo 示例程序）"></a>实际功能应用（<a href="https://github.com/baishixian/X5WebEngineDemo" target="_blank" rel="external"><strong>X5EngineDemo</strong> 示例程序</a>）</h4><p>用QQ浏览器 X5 内核SDK和 X5 云端服务，解决移动端 webview 使用过程中出现困扰开发者需要适配兼容性的问题，提升性能的同时优化用户的浏览体验，有利于统一用户设备基础环境。</p>
<p>带来的效益，主要是减少适配难度，提升产品兼容性和表现效果。成熟的产品和广泛的用户人群，提升保障同时减少出现不必要的麻烦，降低开发成本。</p>
<p>在开放中有使用Html5的Video控件来播放视频的情况，为了举例说明使用 x5 可以带来的效益。下面就从展示网页这个角度切入，对比看看 X5 内核能带来的什么样的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-24c2d5bd31ebb4d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-4e1ba9b854d97616.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从上图测试可以看出，对于首次加载网页，使用systemWebView进行网页加载耗时要优于x5，针对有开启缓存的情况喜爱，多次打开相同网页情况，x5的耗时是略比系统的少。</p>
<h4 id="H5-游戏测试"><a href="#H5-游戏测试" class="headerlink" title="H5 游戏测试"></a>H5 游戏测试</h4><p><img src="http://upload-images.jianshu.io/upload_images/580515-9b3b664ac0d80561.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>如下图所示，在测试全屏H5游戏效果时，对比发现两者在高硬件配置的设备上体验差异不大，x5的帧率比较稳定。在某些低配置和低版本系统上运行时，x5的表现要优于系统浏览器内核，而且适配性更强。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-d0098737590147ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="播放网页视频"><a href="#播放网页视频" class="headerlink" title="播放网页视频"></a>播放网页视频</h4><p><img src="http://upload-images.jianshu.io/upload_images/580515-75756a873c573f55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>如下图所示，测试腾讯视频网站，发现使用系统 WebView 存在视频加载错误的问题，而使用了 X5 内核的则是可以正常播放。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7319fdd59638db6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>但是，接入 x5 内核的成本也是需要考虑，开发者对于 X5 的评价也褒贬不一。<br>下面测试哔哩哔哩弹幕网站的效果，在使用系统 webview 的情况下，是采用了哔哩哔哩带有弹幕的播放器，可以正常播放的同时也支持弹幕的显示。而采用了X5内核进行播放时，则自动替换成 x5 自带的播放器，可以看到loading显示的也是x5提供的界面，所以导致弹幕无法正常展示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-afbef1c49919fc10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下面再看看全屏模式下的播放，x5 对比原生区别很明显。而在测试 H5 游戏时，x5是能够正常音画同步，而系统webview则没有正常背景音乐，帧率偶尔也会低了10左右，这些也都是很多开发者选择 x5 的重要因素。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-1fe36c49df2cadb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="Native与JS交互效果测试（JsBridge）"><a href="#Native与JS交互效果测试（JsBridge）" class="headerlink" title="Native与JS交互效果测试（JsBridge）"></a>Native与JS交互效果测试（JsBridge）</h4><p>首先我们来了解一下为什么要使用JSBridge，在开发中，为了追求开发的效率以及移植的便利性，一些展示性强的页面我们会偏向于使用 H5 来完成，功能性强的页面我们会偏向于使用 Native 来完成。<br>而一旦使用了 H5，为了在 H5 中尽可能的得到native的体验，我们 Native 层需要暴露一些方法给js调用，比如，弹Toast提醒，弹Dialog，分享等等，有时候甚至把h5的网络请求放着native去完成，而JSBridge做得好的一个典型就是微信，微信给开发者提供了JSSDK，该SDK中暴露了很多微信native层的方法，比如支付，定位等。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-9480c4c1c01e16d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>测试通过JsBridge进行webview中的js代码调用本地java接口的效果，试验进行辅助sdk开发的可行性。X5 内核也提供了js接口安全调研机制来保证webview本身的安全漏洞问题，而且也会及时响应 Google 对于浏览器内核漏洞的修复。</p>
<h3 id="三、如何评判引入-x5-内核后带来的提升？"><a href="#三、如何评判引入-x5-内核后带来的提升？" class="headerlink" title="三、如何评判引入 x5 内核后带来的提升？"></a>三、如何评判引入 x5 内核后带来的提升？</h3><p><strong> 总的来说，关于 X5 引入带来的提升，可以从下面的维度去讨论。在之前的对比分析中依旧有描述相关特性，而且关于实际表现很难定性指标依据，这里不再重复介绍。具体可以参照 Demo 中的实际使用效果，对比 X5 内核带来的提升效果。</strong></p>
<ul>
<li>页面加载速度（部分页面预加载缓存控制）</li>
<li>界面使用流畅度（游戏帧率，效果稳定性）</li>
<li>显示兼容性（页面兼容性，多机型适配，界面效果一致性，视频播放等）</li>
<li>交互和特性支持（js支持丰富友好程度，新的HTML特性）</li>
<li>稳定性和安全性（安全漏洞补丁修复）</li>
<li>可持续性（迭代更新支持）</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过预研X5内核，梳理了浏览器内核相关的概念，按照典型的 2W1H 模型对比分析X5内核其技术特性和实际应用场景，在技术试验方面从多个维度来讨论可应用性。</p>
<p>其实从前面的描述可以知道，腾讯推出 X5 内核主要是为了解决Android终端设备的差异性所造成的前端页面适配和浏览体验问题，意在打造一个可以让开发者减少适配工作成本，提升用户体验的一致性，为移动应用提供基础浏览器服务。</p>
<p>根据调研过程中对浏览器内核技术的学习，以及对市场成熟应用场景的分析，基于 X5 内核sdk，我们可以做些什么？</p>
<p>如果考虑开发 H5 游戏引擎，这个行业中已经太多的成熟解决方案，而且用户普遍对H5游戏的接受程度还有待提高。像微信拥有很好的流量入口，本来是拓展H5游戏的好平台，但是自身加以了严格限制，禁止朋友圈公众号转发H5游戏之类的。</p>
<p>假设基于x5做二次封装，打造自己的sdk。但是 X5 跟系统 webview 接口保持高度一致，二次封装只能是增加开发者使用难度。而且浏览器内核相当难以维护，因为快速迭代导致直接整合的成本太高。</p>
<p>如果做集成辅助类sdk，类似微信的JS-SDK，这是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包，目的是减少网页开发者使用 js 与 微信App Native交互的成本。这里设想一个场景来考虑：<br>比如有这样一个场景，一个网页开发者打算开发一款游戏或者应用，但是考虑到开发成本和效益，直接通过实现H5界面后包成壳后，作为 App 来上架发布。这样实现快速开发的同时，又可以进行动态化内容可以快速更新，减少传统 App 迭代更新的各种弊端。</p>
<p>现在有很多类似白鹭引擎之类的厂商提供了一整套的解决方案，但是链接 H5 和 Native相关的设想确并不是很多。比如 H5 开发者使用native平台本身的特性来进行交互设计的成本还是太大。虽然有类似 JsBridge 手段，但是同时兼顾js和native开发，需要网页开发者更大的成本，而怎么提供更丰富流畅的H5交互体验支持就是可以尝试去解决的问题。</p>
<p><strong>总之，可以利用 x5 的适配性强的特点展开更多丰富交互设计和提升用户的设想，把浏览器内核这项基础性的底层服务应用得更好。</strong></p>
<h1 id="部分参考资料："><a href="#部分参考资料：" class="headerlink" title="部分参考资料："></a>部分参考资料：</h1><p><a href="http://www.cnblogs.com/vajoy/p/3735553.html" target="_blank" rel="external">各主流浏览器内核介绍</a><br><a href="https://zhuanlan.zhihu.com/p/20799653" target="_blank" rel="external">Layabox 解读微信全面升级 X5 Blink 内核</a><br><a href="http://web.jobbole.com/84826/" target="_blank" rel="external">主流浏览器内核介绍（前端开发值得了解的浏览器内核历史）</a><br><a href="http://blog.csdn.net/luoshengyang/article/details/53209199" target="_blank" rel="external">Android WebView加载Chromium动态库的过程分析</a><br><a href="http://www.jianshu.com/p/0469cd7b1711" target="_blank" rel="external">HTML5游戏引擎深度测评</a><br><a href="http://games.qq.com/a/20150211/043398.htm" target="_blank" rel="external">腾讯X5联手白鹭EgretRuntime 共推HTML5游戏</a><br><a href="http://x5.tencent.com/" target="_blank" rel="external">腾讯浏览服务</a><br><a href="http://www.jianshu.com/p/e4009688119b" target="_blank" rel="external">基于腾讯X5内核的混合APP开发模式</a><br><a href="https://segmentfault.com/a/1190000004263182" target="_blank" rel="external">Hybrid APP架构设计思路</a><br><a href="travelchu.com/2016/03/14/理解JSBridge/">理解JSBridge</a><br><a href="http://blog.csdn.net/sbsujjbcy/article/details/50752595" target="_blank" rel="external">Android JSBridge的原理与实现</a></p>
<h2 id="X5-示例Demo项目"><a href="#X5-示例Demo项目" class="headerlink" title="X5 示例Demo项目"></a>X5 示例Demo项目</h2><p><a href="https://github.com/baishixian/X5WebEngineDemo" target="_blank" rel="external"><strong>X5EngineDemo</strong> GitHub 地址</a></p>
]]></content>
      
        <categories>
            
            <category> 技术调研 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写给Android开发者的UI自动化测试上手指南]]></title>
      <url>/2016/10/18/%E5%86%99%E7%BB%99Android%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们常常听到这样的问题：“为什么软件的开发者们不适合测试他们自己开发的软件？”。事实上，要回答这个问题需要明白开发者去进行测试的目的。本篇文章不会深入到自动化测试的具体细节，是对如何减少重复测试进行简单实践，让业务开发人员能够简单快速上手才是最终目的。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-140f2546b1853051.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="developer-pk-tester.jpg"></p>
<p><strong>开发人员测试自己所开发软件的行为就像学生在完成考试后对自己的成绩进行评估，所以可能会出现下面的问题：</strong></p>
<ul>
<li>开发人员对其所写代码有主观认同感</li>
<li>开发人员对软件过于乐观的心态</li>
<li>开发人员对需求易产生偏差与混淆</li>
<li>开发人员擅长修复但不擅长拆解</li>
<li>开发人员缺乏对软件后续开发的展望</li>
<li>开发人员缺乏测试经验和方法</li>
</ul>
<hr>
<h2 id="开发者测试的目的"><a href="#开发者测试的目的" class="headerlink" title="开发者测试的目的"></a>开发者测试的目的</h2><p>就如前面所说，软件开发者测试自己开发的程序好像并没多大意义，测试工程师具有很多优势条件，那作为开发者进行自动化测试的目的是什么？<br>其实从下面的图就能解释一切，程序员这个职业存在的意义不就是最大化利用机器，通过自动化来完成工作吗？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-10c457f04707efdb.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>作为软件开发者需求很明显，当需要对自己开发的功能进行验证时，总是需要反复调试后才能提测。这不可避免的需要我们重复UI操作去覆盖测试路径，通过查看界面内容和日志输出验证问题。而UI自动化测试恰恰可以满足这一点，减少我们重复操作ui验证的步骤。</p>
<hr>
<h2 id="Android自动化测试介绍"><a href="#Android自动化测试介绍" class="headerlink" title="Android自动化测试介绍"></a>Android自动化测试介绍</h2><p>关于Android自动化测试，可以去官网看一下介绍<a href="https://developer.android.com/training/testing/start/index.html" target="_blank" rel="external">Getting Started with Testing</a>。<br><img src="http://upload-images.jianshu.io/upload_images/580515-d80bc48a73e3c808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>本篇文章不会对深入到自动化测试的细节进行描述，只是作为开发人员对如何减少重复工作量进行简单的实践，所以这里直接推荐腾讯U测社区的一篇文章：<a href="http://bbs.utest.qq.com/1131" target="_blank" rel="external">5个最佳的Android测试框架</a>，有兴趣的童鞋可以了解一下目前主流的自动化测试框架。<br><img src="http://upload-images.jianshu.io/upload_images/580515-5c6fd547731cf3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Comparing-Android-Testing-Frameworks.png"></p>
<h2 id="解放你的双手"><a href="#解放你的双手" class="headerlink" title="解放你的双手"></a>解放你的双手</h2><p>作为一个业务开发人员，解放双手进行功能验证性测试才是最根本的需求，所以下面介绍一下使用<a href="https://google.github.io/android-testing-support-library/docs/espresso/" target="_blank" rel="external">Espresso</a>进行UI自动化测试的流程。</p>
<blockquote>
<p>为什么选择Espresso测试框架？<br>很简单，<a href="https://google.github.io/android-testing-support-library/docs/espresso/" target="_blank" rel="external">Espresso</a>是Google针对Android平台开源的一款最新的Android自动化测试框架。不用考虑跨平台、兼容性等各种问题，最贴合需求才是最好的。</p>
</blockquote>
<h3 id="UI自动化测试依据"><a href="#UI自动化测试依据" class="headerlink" title="UI自动化测试依据"></a>UI自动化测试依据</h3><p>UI自动化测试的基本思路：<strong>把自己当成用户，只关注我能看到的东西。</strong></p>
<blockquote>
<p>我们把自己作为使用程序的最终用户，要让机器模拟我的测试过程，那么就需要针对那些我能看到的东西，也就是UI组件进行验证。<br><strong>比如说，</strong>作为用户并不关心某个网络请求返回值的具体数据是否正确，我关心的是能在UI上看到希望看到的结果。</p>
</blockquote>
<p>基于此，做各个测试用例的一个通用的思路就是：<strong>找到某个元素，做一些操作，检查结果。</strong>这里包含了三个流程：</p>
<blockquote>
<ul>
<li><strong>找元素：</strong>找到UI上测试所针对的元素；</li>
<li><strong>做操作：</strong>给这个元素做一些操作；</li>
<li><strong>检查结果：</strong>这个元素做出了我期望的行为。</li>
</ul>
</blockquote>
<p>再直观一点，我们测试向一个EditText输入一段文字，那么整个过程就可以描述为：</p>
<blockquote>
<ul>
<li><strong>找元素：</strong>找到EditText组件；</li>
<li><strong>做操作：</strong>向EditText输入字符串；</li>
<li><strong>检查结果：</strong>EditText显示了我输入的字符串，验证内容是否符合。</li>
</ul>
</blockquote>
<p>以上三个小步骤实际上也是我们作为用户在使用一个APP的时候所遵循的流程。而我们的测试也是基本遵循这样一个流程的。下面是官方文档中给出的一个简单测试用例的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greeterSaysHello</span><span class="params">()</span> </span>&#123;</div><div class="line">  onView(withId(R.id.name_field))</div><div class="line">    .perform(typeText(<span class="string">"Steve"</span>));</div><div class="line">  onView(withId(R.id.greet_button))</div><div class="line">    .perform(click());</div><div class="line">  onView(withText(<span class="string">"Hello Steve!"</span>))</div><div class="line">    .check(matches(isDisplayed()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>代码逻辑也是典型的三步：</strong></p>
<blockquote>
<ol>
<li>首先通过withId方法找到了id为name_field的EditText组件，并且调用typeText方法对其进行设置text内容为”Steve”；</li>
<li>再通过withId方法找到id为greet_button的Button组件，掉头click方法模拟点击该按钮；</li>
<li>最后通过withText方法查找text内容等于”Hello Steve!”的TextView组件，调用check方法判断该组件是否匹配(matches方法)是否可见状态(isDisplayed)。</li>
</ol>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-7e2869f9a40b1856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一些Espresso的主要方法"></p>
<h2 id="UI自动化具体实例"><a href="#UI自动化具体实例" class="headerlink" title="UI自动化具体实例"></a>UI自动化具体实例</h2><p>这里建议参照官方文档给出的步骤进行实践，示例给出自己在实践demo中配置自动化测试的基本步骤。<a href="https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html#setup-your-test-environment" target="_blank" rel="external">Espresso setup instructions</a></p>
<p><strong>1. 在gradle添加支持</strong><br>在app目录下build.gradle中dependencies设置对Espresso库的编译依赖，在android.defaultConfig设置InstrumentationRunner。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在app目录下的build.gradle添加对Espresso的依赖</span></div><div class="line">dependencies &#123;</div><div class="line">  androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;    </div><div class="line">     exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></div><div class="line">  &#125;)</div><div class="line">  androidTestCompile <span class="string">'com.android.support.test.espresso:espresso-idling-resource:2.2.2'</span></div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在app目录下的build.gradle中设置instrumentation runner</span></div><div class="line">defaultConfig &#123;</div><div class="line">  ...</div><div class="line">  testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2. 创建Test Case文件</strong><br>在Android Studio执行测试的代码类文件需要在app模块的androidTest文件夹下创建。如下图所示:<br><img src="http://upload-images.jianshu.io/upload_images/580515-0f7be970ca75ca53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="project.png"></p>
<p><strong>3. 编写测试用例代码</strong><br>比如当我们为TestActivity创建TestActivityTest测试用例类文件成功以后：</p>
<ul>
<li>首先需要在测试用例类的类体前添加@RunWith的注解，并设置测试运行平台为AndroidJUnit4</li>
<li>如果允许测试需要较大消耗，可以使用@LargeTest注解</li>
<li>设置ActivityTestRule用来指明被测试的Activity，使用@Rule注解。<blockquote>
<p>运行测试时用例时会自动启动到对应的Activity，并且通过ActivityTestRule的示例获取到被测试Activity的context。</p>
</blockquote>
</li>
<li>编写测试方法，按照前面说的“找元素，做操作， 验证结果”三个步骤编 写测试方法，使用@Test注解。<blockquote>
<p>建议使用test作为方法名的开头，这样可以更好区分普通方法和测试方法</p>
</blockquote>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-acedf05c7034892a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>如上图所示，代码为TestActivity创建了测试用例类TestActivityTest，其中testDeciceName为其中一个测试用例方法。该方法主要是通过id查找到EditText，自动输入内容后模拟点击id为bt_get_string的button，最后验证textview显示内容是否符合。</p>
<p><strong>4. 运行Test Case</strong><br> 在Android Studio的终端中输入<code>gradlew connectedAndroidTest 或 gradlew cAT</code>执行测试用例。<br>整体运行效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/580515-c37b3b3ef3c3fc58.gif?imageMogr2/auto-orient/strip" alt="run.gif"></p>
<p><strong>5. 异步和延迟</strong><br>有时点击一个按钮，ui操作后需要执行一个较为耗时的事情时通常会采用异步回调的方式通知显示结果，这时进行UI自动化测试的第三步验证结果的时机就不能才能同步的方式去执行，而是需要做异步回调通知执行或延迟执行。</p>
<p>Espresso提供了原生的异步测试支持，通过实现IdlingResource接口，复写getName()、isIdleNow()、registerIdleTranstionCallback()方法。<br>如图所示FuncExecuteIdlingResource：<br><img src="http://upload-images.jianshu.io/upload_images/580515-78a116385bd7a201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后在测试用例的类中注册和反注册接口：<br>Espresso.registerIdlingResources(idlingResource);</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8f6d2886a4d28c9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>当方法执行完成，调用ResourceCallback.onTransitionToIdle();则会进行回调通知测试线程继续执行验证代码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一切能自动化完成的测试操作就不要浪费时间用手动完成。后续将会对单元测试进行说明，共同学习，相互提升。</p>
]]></content>
      
        <categories>
            
            <category> 自动化测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google TagManager概念梳理（Android )]]></title>
      <url>/2016/09/06/Google-TagManager%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86%EF%BC%88Android/</url>
      <content type="html"><![CDATA[<p>##概述</p>
<p>跟踪代码管理器是一个代码管理系统，可以轻松地更新移动应用上的代码和代码段被触发的时机，在有预先埋点的情况下，完成对第三方sdk代码或自定义代码逻辑的“动态”管理。</p>
<blockquote>
<p>例如通过tagmanager添加和更新Google Analytics等第三方sdk代码或自定义代码，而无需修改应用代码。这样既减少了错误，也免除了配置代码时向开发者求助的麻烦。</p>
</blockquote>
<p>##基本概念</p>
<p>TagManager必须了解的一些基本概念，比如容器，代码，数据层、触发器和变量等。</p>
<blockquote>
<p>简单的说，一个公司注册一个账号，可以创建多个容器，比如一个android应用对应一个容器，容器里面主要包含了代码（tags）、触发器（triggers），宏变量（variables）等。</p>
</blockquote>
<p>###容器</p>
<p>对于android端而言，容器就是提供给sdk的一份二进制配置文件（有导出的json文件），sdk可以更具容器配置文件来进行处理。sdk也可以从服务器获取最新的配置文件来替换当前本地的文件。</p>
<blockquote>
<p>通过获取容器，开发者可以获取动态获取集合值类型的宏变量值，要处理替换部分预设宏变量的参数，比如app id等，也可以获取容器相关的信息等。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-79b60f837fdc62f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###代码</p>
<p>代码指的是向第三方sdk发送信息的代码段。如果不使用诸如跟踪代码管理器这样的代码管理解决方案，则需要将这些代码段直接添加到移动应用的文件中。而使用tagmanager，就无需再在源代码文件中维护每个代码段，而只需在跟踪代码管理器界面中指定希望触发的代码，以及希望的触发时间。</p>
<blockquote>
<p>对于android端而言，代码就是指定了调用第三方sdk的信息，比如说可以设置tag产品为Google Analytics时，指定该第三方sdk需要配置的的Tracking ID（追踪id）、追踪类型（相当于sdk触发的事件类型，比如说指定为app view事件）等信息。</p>
</blockquote>
<p>代码效果相当于就是把我们需要在嵌入第三方sdk后要做的事件，转由tagmanager完成触发，不需要再显式地调用第三方sdk的代码。这样做的好处有下面几点：</p>
<ul>
<li>只需tagmanager实现一次触发动作，减少调用多个sdk的代码实现，相当于代码统一管理，避免重复多个sdk调用代码。</li>
<li>后台可以动态配置代码，客户端获取到新的容器配置后，会解析配置文件后根据新的代码和规则，改变触动动作的时机以及调用第三方sdk的方法具体参数，实现“动态”配置（在必须先埋好点的基础上）。</li>
<li>方便后期替换支持的第三方sdk时，可以做到项目代码不改变（在tagmanager支持的第三方sdk，不需要再显式调用第三方sdk触发代码）,当然所有的前提的都是要埋点。</li>
</ul>
<p>###触发器</p>
<blockquote>
<p>首先需要再次明确一点：tagmanager并不是减少了埋点的数量，该埋的位置照样还是要埋，只不过是将原来调用第三方sdk触发事件的方法转由tagmanager来完成，相当于tagmanaager作为第三方sdk的代理者（其实是后面的数据层实现了数据映射）。</p>
</blockquote>
<p>触发器，简单的说就是一组行为触发的条件规则，满足条件的行为才会被触发。这也是tagmanager的“动态”性表现之一。也就是用户行为要触发代码前，需要达到触发器设置的条件规则才能执行，这个触发器配置内容包含在从后端获取的容器配置文件中。</p>
<p>“触发器”是指在运行时求值结果为“true”或“false”的条件。求值方法是对比“变量”的值与在定义触发器时指定的值，附加到代码的触发器用于控制该代码在何时触发或不触发。</p>
<p>“tagmanager变量”是指经过配置的“名称-值”对，其中的值在运行时填充。tagmanager有许多内置变量，还可以配置自定义变量。</p>
<p>例如，预定义的变量“url”始终包含当前加载的网页的网址。如果希望仅针对网页 example.com/purchase/receipt.html触发代码，那么需要定义这样的规则:<br>事件：网页浏览<br>触发器类型：网页浏览<br>触发条件：某些网页浏览<br>当以下条件的结果为“true”时触发代码：<br>网址包含 example.com/purchase/receipt.html</p>
<p>可以根据自己的需要定义变量(多种宏类型变量)，每个变量都包含需要在运行时使用的某些信息。然后，可以在触发器条件中使用这些变量，或者通过这些变量将信息传递给代码。</p>
<p>常见的触发条件：</p>
<table>
<thead>
<tr>
<th style="text-align:center">条件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">包含</td>
</tr>
<tr>
<td style="text-align:center">开头为</td>
</tr>
<tr>
<td style="text-align:center">结尾为</td>
</tr>
<tr>
<td style="text-align:center">匹配正则表达式</td>
</tr>
<tr>
<td style="text-align:center">与正则表达式相匹配（忽略大小写）</td>
</tr>
<tr>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">小于或等于</td>
</tr>
<tr>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">不包含</td>
</tr>
<tr>
<td style="text-align:center">开头不是</td>
</tr>
<tr>
<td style="text-align:center">结尾不是</td>
</tr>
<tr>
<td style="text-align:center">不匹配正则表达式</td>
</tr>
<tr>
<td style="text-align:center">与正则表达式不匹配（忽略大小写）</td>
</tr>
</tbody>
</table>
<p>###宏变量</p>
<p>在tagmanager中变量都是具有固定的类型匹配的.</p>
<ul>
<li>已启用广告跟踪：对于 Android，如果启用了广告跟踪，该变量返回 true，如果用户选择停用针对用户兴趣的广告，则返回 false。在 Android 开发者中心中了解详情。v4 以前的 SDK 版本将始终返回 false。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>应用 ID：该值设置为程序包名称 (Android) 或捆绑包 ID (iOS)。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>应用名称：该值设置为当前正在运行的应用的名称。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>应用版本号：该值设置为当前正在运行的应用的版本。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>常量：该值设置为提供的字符串。</li>
<li>容器 ID：该值为该容器的公共 ID（如 GTM-ABC42）。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>容器版本号：当容器处于预览模式时，此变量值为容器的预览版本号。在其他情况下，此变量值是容器的实际版本号。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>设备 ID：对于 Android，该值设置为设备 ID。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>设备名称：该值设置为当前正在运行的应用的设备名称（如“Samsung Android”、“Android SDK built for x86”）。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>事件名称：在应用中执行以下代码时，该值设置为“eventNameXYZ”：</li>
<li>事件参数：该值设置为针对给定键记录的 Firebase Analytics 事件参数值。</li>
<li>Firebase 用户属性：该值设置为给定键的 Firebase Analytics 用户属性值。</li>
<li>函数调用：该值设置为调用预注册的函数所返回的值。要了解详情，请参阅 SDK 文档（Android 或 iOS）。</li>
<li>用于广告的 ID：对于 Android，该值设置为广告 ID。在 Android 开发者中心中了解详情。v4 以前的 SDK 版本将始终返回 ‘’（空字符串）。</li>
<li>语言：该值设置为两个字母的语言代码，用于表示用户设置的设备语言。移动应用容器中会提供此类型的预定义变量，无需定义这一类型的新变量。</li>
<li>对照表：该值根据对照表中的说明进行设置。对照表包含两列（下表中不包含任何数据，数据的使用方法在下文中介绍）：<br>操作系统版本：该值设置为安装应用的操作系统的版本。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>平台：该值设置为当前正在运行的应用所属的平台（如“Android”）。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>随机数字：该值设置为介于 0 到 2147483647 之间的一个随机数字。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>屏幕分辨率：该值设置为当前正在运行应用的设备的屏幕分辨率。格式为“&lt;宽&gt;x&lt;高&gt;”，例如“1024x768”。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>SDK 版本：该值设置为安装应用的操作系统的 SDK 版本。移动应用容器中会提供此类型的内置变量，无需定义这一类型的新变量。</li>
<li>操作系统版本：该值设置为安装应用的操作系统的版本。</li>
<li>平台：该值设置为目前正在运行应用的平台（“Android”或“iOS”其中之一）。移动应用容器中会提供此类型的预定义变量，无需定义这一类型的新变量。</li>
<li>随机数：该值设置为介于 0 到 2147483647 之间的一个随机数。</li>
<li>屏幕分辨率：该值设置为当前正在运行应用的设备的屏幕分辨率。格式为“宽 x 高”，例如“1024x768”。移动应用容器中会提供此类型的预定义变量，无需定义这一类型的新变量。</li>
<li>SDK 版本：该值设置为安装应用的操作系统的 SDK 版本。移动应用容器中会提供此类型的预定义变量，无需定义这一类型的新变量。</li>
</ul>
<p>###数据层映射</p>
<p>数据层是一种对象，可配置希望传递到tagmanager的信息。这需要配置数据层变量，用来采集这些值以备日后使用。要使tagmanager评估数据层变量的值，系统还必须推送事件，使用push来完成这个操作。</p>
<blockquote>
<p>在android中，数据层就是维持了一个事件队列，开发者通过push一个包含key-value的map对象来添加到队列中，当push接受到一个key=event的是对象时，将把队列中的事件内容提取出来，并匹配容器中触发器规则条件，两者相符合的即触发相应代码逻辑。因此数据层包含了接收开发者push过来的事件map对象，包含了容器中配置的数据层变量信息等。</p>
</blockquote>
<p>##Google TagManager实际示例</p>
<p>先在项目代码中通过getDataLayer()获取数据层对象 可以使用push或pushEvent方法将数据传到数据层</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-c5e7e31073ffe814.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>如上图，使用<code>pushEvent(object)</code>相当于<code>push(&quot;event&quot;,object)</code>，表示向数据层push了一个<code>key ＝ “event”，value ＝ “openScreen”</code>和一个<code>key ＝ “screen-name”,value ＝ “test page”</code>的map对象集。这些数据层变量会映射到Google Analytiecs中成为触发的参数。</p>
<p>###<strong>下面来演示一下Google Tagmanager的具体操作步骤</strong></p>
<p>####<strong>创建变量</strong></p>
<p>创建数据层变量screen-name，作为传入数据层map的key，命名必须跟项目代码中保持一致性，注意上面的screen name2只是用于管理界面操作的标示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-755143c1d7213783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>创建一个常量类型的变量，用于保存Google Analytiecs的tracking id</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-dddadaa0b94a4710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>####<strong>创建触发器</strong></p>
<ol>
<li><p>触发器openScreen: 在管理界面Event中数据层变量event值等于openScreen时触发<br><img src="http://upload-images.jianshu.io/upload_images/580515-c1c6bc2df7374327.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>触发器TestScrenn: 管理界面变量screen name2中的数据层变量screen-name值等于test page时触发<br><img src="http://upload-images.jianshu.io/upload_images/580515-532438a02017d49b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ol>
<p>####<strong>创建代码Tag</strong></p>
<p>先看看需要配置的的整体效果<br><img src="http://upload-images.jianshu.io/upload_images/580515-d9fcbe5df1dcf44c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>选择管理代码的产品类型，这里选择Google Analytiecs，择好后再配置tag相关信息，比如GA所需的tracking id，触发的事件类型为App View，触发GA统计方法时传入的参数screenName会替换成数据层变量screen name2的值。就是数据层变量的值映射到GA的方法参数。</p>
<p>借助tagmanager中的自动事件跟踪功能，无需在调用ga的<code>send(&quot;event&quot;, &quot;category&quot;, &quot;action&quot;, &quot;label&quot;)</code>硬编码每个点击操作，可以直接在TagManager界面中创建事件代码，然后基于预定义的变量或可以在TagManager界面中创建的自定义变量使用触发器触发这些代码。<br><img src="http://upload-images.jianshu.io/upload_images/580515-c7523e19b770fe1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>配置代码触发器，选择之前配置的两个触发器就行。<br><img src="http://upload-images.jianshu.io/upload_images/580515-56704645e9bcb242.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>全部配置完成后点击保存完成，点击publish生成新的版本发布。<br><img src="http://upload-images.jianshu.io/upload_images/580515-e7af81c7761814db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>####<strong>整体的关系效果图</strong></p>
<p>通过调用tagmanager配置的数据层变量和方法，最终数据映射到Google analytiecs，这个过程并未在项目代码中显式的调用GA统计的代码，但是数据还是会传输到GA.<br><img src="http://upload-images.jianshu.io/upload_images/580515-6c6bdf84480ec1a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>####<strong>在goole analytiecs查看数据</strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-c1779e4416123204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术调研 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android,TagManager </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[No锁区，畅玩Pokemon Go]]></title>
      <url>/2016/07/25/No%E9%94%81%E5%8C%BA%EF%BC%8C%E7%95%85%E7%8E%A9Pokemon%20Go/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前段时间任天堂发布的首款移动平台AR游戏——Pokemon Go，这款游戏不仅是借助宠物小精灵粉这个众多怀旧粉的IP，更多的人也是因为先体验当前大热的AR和VR技术热潮带来的改变，这款游戏无可厚非地在短时间内产生了巨大的效应。这篇文章打算针对技术宅们，聊聊自己的解决思路，实际是基于xposed进行了实现，希望能够起到抛砖引玉的效果，欢迎大家交流。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-6495980031de0a94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="关于游戏锁区"><a href="#关于游戏锁区" class="headerlink" title="关于游戏锁区"></a>关于游戏锁区</h3><p>由于游戏上线初期，为了避免大量用户涌入对服务器造成的巨大压力，任天堂选择了分区域开放游戏的同时，针对部分区域还进行了锁区。至于为什么锁区，这里就不继续黑了，但有一点毫无疑问，中国肯定是其中之一。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-5690d75063cb2927.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">zhendui红框内区域大部分被锁</p>
<h3 id="国内-Android-用户的玩法"><a href="#国内-Android-用户的玩法" class="headerlink" title="国内 Android 用户的玩法"></a>国内 Android 用户的玩法</h3><p>很多国内用户为了体验 Pokemon Go 在满大街抓小精灵的“快感”，不得不去试验网上各种的教程，什么个人信息安全都先放一边。</p>
<p><strong>Android 用户体验：</strong>虽然国内应用市场没发布，但还是很容易找到apk包安装，由于需要Google地图的支持，首先不得不刷去个gapps，搞定谷歌服务后还得翻墙，所以VPN肯定少不了。一切搞定后，打开游戏～没问题！直接用google账户登入～成功！进入游戏界面～速度很快，正准备浪起来，但是！但是！但是！卧槽，周围怎么一个小精灵和道馆都没有！说好的满大街收集小精灵呢～</p>
<blockquote>
<p>Pokemon Go锁区，不是封锁了登陆的ip地址或是google账号，其实是锁了几个坐标范围，因此我们需要模拟位置到锁区外才能愉快地找小精灵。</p>
</blockquote>
<h3 id="技术宅拯救世界"><a href="#技术宅拯救世界" class="headerlink" title="技术宅拯救世界"></a>技术宅拯救世界</h3><blockquote>
<p>技术宅拯救世界这句第一次出现的时候已经无法考证了。但是就目前而言，能够拯救世界的，大概只有技术宅了。当然还有春哥，七颗龙珠。     ————萌娘百科</p>
</blockquote>
<p>下面用Xposed实现模拟位置信息成功开飞机到澳大利亚，通过屏幕上悬浮按钮手动控制当前人物移动并成功收集到小精灵。不怕开飞机导致被封号的，可以先来看看实际使用效果：</p>
<p><a href="http://v.youku.com/v_show/id_XMTY1Mzc5NTcwMA==.html" target="_blank" rel="external">Pokémon Go手动控制模拟位置移动</a></p>
<p><a href="http://v.youku.com/v_show/id_XMTY1Mzc5OTk1Ng==.html" target="_blank" rel="external">Pokémon Go成功在澳大利亚的堪培拉大街上抓到Doduo</a></p>
<p>下面介绍如何一步一步地实现对Pokemon Go的锁区的突破。</p>
<h3 id="应用反编译分析"><a href="#应用反编译分析" class="headerlink" title="应用反编译分析"></a>应用反编译分析</h3><p>Android 获取位置信息的来源包含多个维度（GPS，WIFI，移动网络），通过反编译 Pokemon Go 的 apk 包，查看项目源码可知：其通过 Android 系统 API 提供的 LocationManager 类，调用 getLastKnownLocation 方法来获取位置信息对象 Location 。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-f4e1adc98b4822b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="反编译查看项目源码"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-703b94686760e6b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="获取位置信息的最终调用方法"></p>
<p>而最终获取位置经纬度的方法则是调用 Location 类的 getLatitude()<br> 和 getLongitude() 方法来实现，获取经纬度相关信息后应用就会针对当前的位置坐标进行判断，如果不在游戏开放区域内，将无法请求到相应的游戏数据（表现出来就是玩家无法在锁区内找到宠物小精灵）。</p>
<p>下面根据从反编译得到的得到的相关信息，考虑如何针对应用进行位置模拟或更改，突破其位置锁区的封闭。</p>
<h3 id="两种实现方式——基于Xposed"><a href="#两种实现方式——基于Xposed" class="headerlink" title="两种实现方式——基于Xposed"></a>两种实现方式——基于Xposed</h3><p>因为游戏最先在澳大利亚开放，所以demo的实现演示如何开飞机到堪培拉去抓小精灵，下面介绍目前自己能想到的两种实现方式。</p>
<p><strong>方式一：位置偏移转化</strong><br>该方式简单来说就是对获取位置方法的 hook，让本地 GPS 偏移转化成目标地的位置信息变化。首先需要事先计算锁区内（天朝某地）与未锁区目标地（堪培拉）的地理位置坐标差，设置好相对合理modify偏移值，再利用设备获取到的实际 GPS 定位信息，使用 Xposed 对<br> Pokemon Go 获取位置信息的方法进行 hook，对实际的位置数据进行向目标位置的偏移处理，实现从本地 GPS 到目标地位置的信息转化：</p>
<p>具体的转化公式：（demo 是广州转化到堪培拉，google 地图提供的经纬度坐标数据）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">广州位置坐标：lat_gz = 23.129042,  long_gz = 113.264435 </div><div class="line">堪培拉位置坐标：lat_cap = -35.302747,  long_cap = 149.125318</div><div class="line">modify坐标差：modify_lat = 58.431789  modify_long = 35.860883</div><div class="line">坐标修正魔数：corrected = 0.000868</div><div class="line">转化公式 ：</div><div class="line">convertLocation.latitude =  localLocation.latitude - modify_lat + corrected                               </div><div class="line">convertLocation.longtitude = localLocation.longtitude + modify_long + corrected</div></pre></td></tr></table></figure>
<p><strong>具体的编码实现</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-8349af0b012b90c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过xposed来Hook获取位置信息的方法"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-5f0a1ddd2073b8be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过xposed来Hook获取位置信息的方法
"></p>
<p><strong>方式二：位置信息模拟</strong><br>Android 开发者调试模式中有用于位置模拟的接口，可以利用相关的<br> api 直接进行模拟位置信息，通过结合悬浮控制按钮可以实现手动控制游戏人物位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置模拟位置信息的方法</span></div><div class="line"><span class="comment">// 参数localLocation为传入的模拟位置location</span></div><div class="line">LocationManager.setTestProviderLocation(providerName,localLocation);</div></pre></td></tr></table></figure>
<p>需要在开发者选项中开启位置模拟：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-769d7b796a762ee4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">开启位置模拟相关的源码也会在整理push到github，</p>
<p>如果直接使用模拟位置的方法，系统也提供有相应的检测方法，<br> Pokemon Go 会判断是否开启了位置模拟，如果检测到是模拟位置还是无法解决锁区的问题，所以需要对相关检测方法进行 hook ，下面是使用xposed对判断是否开启了位置模拟的方法 hook 的编码实现:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-4e05b9b48d303fdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="判断方法hook"></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>由于是文章中介绍的基于 xposed 进行了实现，所以对于普通玩家来说，使用起来的门槛还是先对较高，所以相关的 demo 也不打算开放出来，当然如果有朋友想要体验一下的，也可以给我留言，我私下会发一下。所以主要目的是针对技术宅们，提供点自己的解决思路，很多细节的处理当然也有不同的实现方式，后续会对 xposed 的实际使用和实现细节写一篇纯技术文章，相关的源码也会在整理 push 到<br> github。希望能够起到抛砖引玉的效果，欢迎大家交流。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android,Xposed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VideView播放视频遇到的坑]]></title>
      <url>/2016/04/21/VideView%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h3 id="实现-Android-的视频播放，通常有以下几种方式"><a href="#实现-Android-的视频播放，通常有以下几种方式" class="headerlink" title="实现 Android 的视频播放，通常有以下几种方式"></a>实现 Android 的视频播放，通常有以下几种方式</h3><ol>
<li><p>使用自带的播放器，指定 <figure class="highlight plain"><figcaption><span>为 ```ACTION_VIEW```，```Data``` 为 ``Uri``，```Type``` 为其 ```MIME``` 类型。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 使用 [VideoView](https://developer.android.com/reference/android/widget/VideoView.html) 来播放，在布局文件中使用 [VideoView](https://developer.android.com/reference/android/widget/VideoView.html) 结合```MediaController``` 来实现对其控制。</div><div class="line"></div><div class="line">3. 使用 ```MediaPlayer``` 类和 ```SurfaceView``` 来实现，这种方式很灵活。</div><div class="line"></div><div class="line">### 使用 VideoView 播放视频的步骤：</div><div class="line">1.在界面布局文件中定义 [VideoView](https://developer.android.com/reference/android/widget/VideoView.html) 组件，或在程序中创建</div><div class="line"> [VideoView](https://developer.android.com/reference/android/widget/VideoView.html) 组件 </div><div class="line">2.调用 [VideoView](https://developer.android.com/reference/android/widget/VideoView.html) 的如下两个方法来加载指定的视频</div><div class="line"></div><div class="line">&gt;```setVidePath(String path) // 加载path文件代表的视</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>uri)</span><a href="//">加载uri所对应的视频 ```</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3.调用 ```start()、stop()、pause()```方法来控制视频的播放</div><div class="line">4.通过与 ```MediaController``` 类结合使用，开发者可以不用自己控制播放与暂停</div><div class="line"></div><div class="line">### 调用 seekTo 方法跳转不准的问题</div><div class="line">###典型场景：</div><div class="line">当用户从后台恢复播放界面时，需要跳转到之前退出的时间点继续播放原来的视频。其实现逻辑大致上是：</div><div class="line"></div><div class="line">&gt;  </div><div class="line">1. 在暂停时保存当前 ```VideoView``` 的 ```currantPosition``` 进度 </div><div class="line">2. 恢复播放时，调用 ```seekTo``` 方法，传入 ```currantPosition``` 作为跳转参数</div><div class="line"></div><div class="line">按照官方提供的 API 来看，这是最合理的使用方式。但在某些情况下，我们会遇到视频恢复播放时进度位置不准的问题，甚至有些会重头开始播放。</div><div class="line">**下面就针对使用 ```VideoView``` 播放视频时 ```seekTo``` 跳转不准的问题进行分析。**</div><div class="line"></div><div class="line">### 问题定位</div><div class="line"></div><div class="line">#### 1. 消除方法异步执行的影响</div><div class="line"></div><div class="line">首先明确一点： **```VideoView``` 的 ```seekTo``` 方法是异步执行的**，因此会有 ```seek``` 未完成但播放已经开始的现象。需要消除 ```seekTo``` 对恢复播放的影响，应该在  ```seek``` 操作完成的 ```seekComplete``` 回调方法中执行 ```ViedeoView``` 的 ```start``` 方法。</div><div class="line"></div><div class="line">&gt; **Tip:** ```seekComplete``` 属于 ```MediaPlayer``` 类的 ```OnPreparedListener``` 监听器的一个回调方法。虽然 ```VideoView``` 是基于 ```MediaPlayer``` 实现的，但没提供 ```setOnSeekCompleteListener``` 设置监听器的方法，所以我们要拿到 ```VideoView``` 内部持有 ```MediaPlayer``` 对象。</div><div class="line">&gt; </div><div class="line"></div><div class="line">``` java</div><div class="line">// 设置 VideoView 的 OnPrepared 监听，拿到 MediaPlayer 对象。</div><div class="line">videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onPrepared(MediaPlayer mp) &#123;</div><div class="line">            //设置 MediaPlayer 的 OnSeekComplete 监听</div><div class="line">                mp.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void onSeekComplete(MediaPlayer mp) &#123;</div><div class="line">                    // seekTo 方法完成时的回调</div><div class="line">                        if(isPause)&#123;</div><div class="line">                            videoView.start();</div><div class="line">                            isPause = false;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="2-消除视频源的问题"><a href="#2-消除视频源的问题" class="headerlink" title="2. 消除视频源的问题"></a>2. 消除视频源的问题</h4><p>其实 <figure class="highlight plain"><figcaption><span>跳转的位置其实并不是参数所带的 ```position```，而是离 ```position``` 最近的[视频关键帧](http://baike.baidu.com/item/%E5%85%B3%E9%94%AE%E5%B8%A7)。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 关于[视频关键帧](http://baike.baidu.com/item/%E5%85%B3%E9%94%AE%E5%B8%A7)建议大家可以去了解一下相关知识，大致上就是视频播放时需要从一个关键帧的位置开始。</div><div class="line"></div><div class="line">所以当视频在跳转到相应的 ```position``` 位置缺少关键帧的情况下，调用 ```seekTo``` 方法是无法在当前位置开始播放。这时会寻找离指定 ```position``` 最近的关键帧位置开始播放。</div><div class="line"></div><div class="line">**关于视频源造成的问题，可以采取以下解决措施：**</div><div class="line">* 替换成满足需求的视频源文件（寻找合格的视频文件）</div><div class="line">* 对视频源文件进行处理，增加其关键帧数量，比如可以1s设置一个关键帧（基于目前已有的视频文件进行处理）。</div><div class="line"></div><div class="line">&gt;如果选择第二种方式，要增加视频的关键帧数量，可以推荐大家使用FFmpeg进行增加关键帧的处理工作。 http://ffmpeg.org/</div><div class="line"></div><div class="line">**FFmpeg 工具相关命令行语句：**</div><div class="line">```ffmpeg.exe -i &quot;D:\in.mp4&quot; -c:v libx264  -preset superfast -x264opts keyint=25 -acodec copy -f  mp4 &quot;D:\out.mp4&quot;</div></pre></td></tr></table></figure></p>
<p>命令语句大致意思是：在 D 盘路径下把 in.mp4 视频文件每隔 25 帧设置一个关键帧，音轨保持原视频参数，其余使用 FFmpeg 提供的default 值，最后保存为 out.mp4 文件到 D 盘。</p>
<hr>
<p>###总结</p>
<p>在深究问题的原因时不可浅尝而止，也不要一味的怀疑是不是代码造成了问题。很多情况下都选择盲目地替换不同的视频组件出实现，而忽略了视频源文件本身的问题。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android线上bug热修复分析]]></title>
      <url>/2016/04/21/Android%E7%BA%BF%E4%B8%8Abug%E7%83%AD%E4%BF%AE%E5%A4%8D%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>针对app线上修复技术，目前有好几种解决方案，开源界往往一个方案会有好几种实现。重复的实现会有造轮子之嫌，但分析解决方案在技术上的探索和衍变，这轮子还是值得去推动的</p>
</blockquote>
<h3 id="关于Hot-Fix技术"><a href="#关于Hot-Fix技术" class="headerlink" title="关于Hot Fix技术"></a>关于Hot Fix技术</h3><p>Hot Fix技术，简单来说就是针对线上已发布app出现了bug，在不推送新版本的情况下通过发布修复补丁进行修复。通常是刚上线的app，需要快速线上修复bug，类似的技术就叫做热修复或热补丁。</p>
<p><img src="http://7xt7m8.com2.z0.glb.clouddn.com/fix1.png" alt="fix it"></p>
<h3 id="热修复技术能带来什么"><a href="#热修复技术能带来什么" class="headerlink" title="热修复技术能带来什么"></a>热修复技术能带来什么</h3><ul>
<li>让app具有了上线后被修复的可能性，增加事故风险可控性；</li>
<li>避免为修复bug而快速增发新版本，让用户“无感”，提升体验；</li>
<li>推送新版本app修复时，用户升级覆盖面无法保证；</li>
<li>避免增发修复版本的复杂流程，减少发布新版本app成本；</li>
</ul>
<h3 id="现有的技术方案"><a href="#现有的技术方案" class="headerlink" title="现有的技术方案"></a>现有的技术方案</h3><p>目前，从技术解决方案上来说，有以下几种思路：</p>
<ul>
<li><a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">Dexposed</a><blockquote>
<p>来自阿里手淘团队，白衣（花名）基于Xposed实现了Dexposed，在此基础上手淘团队推出了<a href="http://www.infoq.com/cn/presentations/mobilephone-taobao-hotpatch-technology-introduction" target="_blank" rel="external">HotPatch</a>二方库。</p>
</blockquote>
</li>
<li><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a><blockquote>
<p>出自阿里支付宝技术团队，同样是对方法的hook，但未基于Dexposed去实现，避免了在art上运行时存在兼容性问题。</p>
</blockquote>
</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">基于ClassLoader</a><blockquote>
<p>QQ空间终端开发团队提供了技术思路，目前基于此实现的热门的开源项目有<a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">Nuwa</a>,<a href="https://github.com/dodola/HotFix" target="_blank" rel="external">HotFix</a>,<a href="https://github.com/bunnyblue/DroidFix" target="_blank" rel="external">DroidFix</a>，这三种方案的原理却徊然不同，各有优缺点。</p>
</blockquote>
</li>
</ul>
<p>关于三者技术的介绍，这里推荐一篇文章：<a href="http://blog.zhaiyifan.cn/2015/11/20/HotPatchCompare/" target="_blank" rel="external">各大热补丁方案分析和比较</a>，这里不做细说。</p>
<h3 id="技术预研"><a href="#技术预研" class="headerlink" title="技术预研"></a>技术预研</h3><h4 id="热修复-动态替换-动态加载"><a href="#热修复-动态替换-动态加载" class="headerlink" title="热修复 == 动态替换 == 动态加载"></a>热修复 == 动态替换 == 动态加载</h4><p>得出上面的等式，是因为热修复一般来说就是增发patch文件，避免用户调用错误代码，并不是直接修改了原来的代码。这相当于是对问题文件做了动态替换，而要实现动态替换就是避免默认的加载，改变成动态地加载替换文件。<br><strong>动态加载的基础是ClassLoader</strong>，Java程序在运行时加载对应的类是通过ClassLoader来实现的， Java 类可以被动态加载到 Java 虚拟机中并执行。所以ClassLoader所做的工作实质就是把类文件从硬盘读取到内存中。<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/fix2.png" alt="AndFix示例图"></p>
<h4 id="Java中ClassLoader的基本概念："><a href="#Java中ClassLoader的基本概念：" class="headerlink" title="Java中ClassLoader的基本概念："></a>Java中ClassLoader的基本概念：</h4><p><img src="http://7xt7m8.com2.z0.glb.clouddn.com/fix3.png" alt="ClassLoader.png"></p>
<ul>
<li><strong>类加载器的树状结构：</strong>在JVM中，所有类加载器实例按树状结构组织，根结点为引导类加载器。除根结点外的所有类加载器都有一个非空的父类加载器，从而构成树状结构；</li>
<li><p><strong>双亲委托（代理）模型：</strong>当类加载器收到加载类或资源的请求时，通常都是先委托给父类加载器加载，也就是说只有当父类加载器找不到指定类或资源时，自身才会执行实际的类加载过程；</p>
<blockquote>
<p>代理模式是为了保证 Java 核心库的类型安全。通过代理模式，对于 Java 核心库的类的加载工作由bootClassLoader来统一完成，保证了 Java 应用所使用的都是同一个版本的 Java 核心库的类，是互相兼容的。</p>
</blockquote>
</li>
<li><p><strong>类的判等：</strong>即使类完全相同（名称相同、字节码相同），不同类加载器实例加载的类对象也是不相等的；</p>
<blockquote>
<p>这条规则是Java类加载机制中非常核心的规则，它保证了类加载机制实现“类隔离”、“保护JDK中的基础类”等目标。</p>
</blockquote>
</li>
<li><p><strong>类的垃圾回收：</strong>只有当类加载器可被作为垃圾回收的前提下，其加载的类才有可能被回收；</p>
</li>
</ul>
<p><a href="http://blog.jobbole.com/96145/" target="_blank" rel="external">源码分析ClassLoader机制</a></p>
<h4 id="Android的classLoader机制"><a href="#Android的classLoader机制" class="headerlink" title="Android的classLoader机制"></a>Android的classLoader机制</h4><p>Android的Dalvik/ART虚拟机如同标准JAVA的JVM虚拟机一样，在运行程序时首先需要将对应的类加载到内存中。因此可以利用这一点，在程序运行时手动加载Class，从而达到代码中动态加载可执行文件的目的。</p>
<p><img src="http://7xt7m8.com2.z0.glb.clouddn.com/fix4.png" alt="Android的ClassLoader体系.png"></p>
<p>在Android系统启动的时候会创建一个Boot类型的ClassLoader实例，用于加载一些系统Framework层级需要的类。由于Android应用里也需要用到一些系统的类，所以APP启动的时候也会把这个Boot类型的ClassLoader传进来。</p>
<p>此外，APP也有自己的类，这些类保存在APK的dex文件里面，所以APP启动的时候，也会创建一个自己的ClassLoader实例，用于加载自己dex文件中的类。<br>下面实际验证看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> @Override</div><div class="line"> protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">      super.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">      ClassLoader classLoader = getClassLoader();</div><div class="line">      Log.i(&quot;ClassLoader&quot; , &quot;classLoader &quot; + classLoader.toString());</div><div class="line"></div><div class="line">      while (classLoader.getParent() != null) &#123;</div><div class="line">          classLoader = classLoader.getParent();</div><div class="line">          if (classLoader != null) &#123;</div><div class="line">              Log.i(&quot;ClassLoader&quot;, &quot;classLoaderParent &quot; + classLoader.toString());</div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/ClassLoader: classLoader dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/com.sunteng.classloader-1/base.apk&quot;],nativeLibraryDirectories=[/vendor/lib, /system/lib]]]</div><div class="line">I/ClassLoader: classLoaderParent java.lang.BootClassLoader@2d0a3af7</div></pre></td></tr></table></figure></p>
<p>可以看见有2个Classloader实例，一个是BootClassLoader（系统启动的时候创建的），另一个是PathClassLoader（应用启动时创建的，用于加载当前已安装app里面的类）。</p>
<h5 id="Android经常使用的是PathClassLoader和DexClassLoader"><a href="#Android经常使用的是PathClassLoader和DexClassLoader" class="headerlink" title="Android经常使用的是PathClassLoader和DexClassLoader"></a><strong>Android经常使用的是PathClassLoader和DexClassLoader</strong></h5><ul>
<li>PathClassLoader<blockquote>
<p>官方注释：一个简单的ClassLoader的实现，工作在本地文件系统中的文件和目录的列表上，但不尝试从网络加载类。 Android使用这个类为它的系统类加载器和应用类加载器。</p>
</blockquote>
</li>
</ul>
<p>可以看出，Android是使用这个类作为其系统类和应用类的加载器。并且对于这个类呢，只能去加载已经安装到Android系统中的apk文件。</p>
<ul>
<li>DexClassLoader<blockquote>
<p>官方注释：一个ClassLoader的实现，从.jar和.apk文件内部加载classes.dex。这可以用于执行非安装程序作为已安装应用程序的一部分的代码。</p>
</blockquote>
</li>
</ul>
<p>也就是说可以加载比如sd目录下的dex文件，获取到不是已安装app里面的类。</p>
<p>Android中使用PathClassLoader类作为Android的默认的类加载器，PathClassLoade本身继承自BaseDexClassLoader，BaseDexClassLoader重写了findClass方法，该方法是ClassLoader的核心。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#BaseDexClassLoader</div><div class="line">@Override</div><div class="line">protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</div><div class="line">    List&lt;Throwable&gt; suppressedExceptions = new ArrayList&lt;Throwable&gt;();</div><div class="line">    Class c = pathList.findClass(name, suppressedExceptions);</div><div class="line">    if (c == null) &#123;</div><div class="line">        ClassNotFoundException cnfe = new ClassNotFoundException(&quot;Didn&apos;t find class \&quot;&quot; + name + &quot;\&quot; on path: &quot; + pathList);</div><div class="line">        for (Throwable t : suppressedExceptions) &#123;</div><div class="line">            cnfe.addSuppressed(t);</div><div class="line">        &#125;</div><div class="line">        throw cnfe;</div><div class="line">    &#125;</div><div class="line">    return c;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看源码可知，BaseDexClassLoader将findClass方法委托给了pathList对象的findClass方法，pathList对象是在BaseDexClassLoader的构造函数中new出来的，它的类型是DexPathList。看下DexPathList.findClass源码是如何做的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#DexPathList</div><div class="line">public Class findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</div><div class="line">    for (Element element : dexElements) &#123;</div><div class="line">        DexFile dex = element.dexFile;</div><div class="line"></div><div class="line">        if (dex != null) &#123;</div><div class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</div><div class="line">            if (clazz != null) &#123;</div><div class="line">                return clazz;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (dexElementsSuppressedExceptions != null) &#123;</div><div class="line">        suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#DexFile </div><div class="line">public Class loadClassBinaryName(String name, ClassLoader loader) &#123;</div><div class="line">    return defineClass(name, loader, mCookie);</div><div class="line">&#125;</div><div class="line">private native static Class defineClass(String name, ClassLoader loader, int cookie);</div></pre></td></tr></table></figure></p>
<p>直接就是遍历dexElements列表，然后通过调用element.dexFile对象上的loadClassBinaryName方法来加载类，如果返回值不是null，就表示加载类成功，会将这个Class对象返回。而且dexElements对象是在DexPathList类的构造函数中完成初始化的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory, suppressedExceptions);</div></pre></td></tr></table></figure></p>
<p>makeDexElements所做的事情就是遍历我们传递来的dexPath，然后一次加载每个dex文件。可以看出，BaseDexClassLoader中有个pathList对象，pathList中包含一个DexFile的集合dexElements，而对于类加载，就是遍历这个集合，通过DexFile去寻找。</p>
<p>这样的话，我们可以在这个dexElements中去做一些事情，比如在这个数组的第一个元素放置我们的patch.jar，里面包含修复过的类。当遍历findClass的时候，修复的类就会被查找到，从而替代有bug的类。</p>
<blockquote>
<p>一个ClassLoader可以包含多个dex文件，每个dex文件是一个Element，多个dex文件排列成一个有序的数组dexElements，当找类的时候，会按顺序遍历dex文件，然后从当前遍历的dex文件中找类，如果找类则返回，如果找不到从下一个dex文件继续查找</p>
</blockquote>
<p>标准JVM中，ClassLoader是用defineClass加载类的，而Android中defineClass被弃用了，改用了loadClass方法，而且加载类的过程也挪到了DexFile中，在DexFile中加载类的具体方法也叫defineClass</p>
<h4 id="ClassLoader特性"><a href="#ClassLoader特性" class="headerlink" title="ClassLoader特性"></a>ClassLoader特性</h4><p>使用ClassLoader的一个特点就是，当ClassLoader在成功加载某个类之后，会把得到类的实例缓存起来。下次再请求加载该类的时候，ClassLoader会直接使用缓存的类的实例，而不会尝试再次加载。也就是说，如果程序不重新启动，加载过一次的类就无法重新加载。</p>
<blockquote>
<p>如果使用ClassLoader来动态升级APP或者动态修复BUG，都需要重新启动APP才能生效。</p>
</blockquote>
<p>除了使用ClassLoader外，还可以使用jni hook的方式修改程序的执行代码。后者做的已经是Native层级的工作了，直接修改应用运行时的内存地址，所以使用jni hook的方式时，不用重新应用就能生效。<br>而阿里的dexposed和AndFix采用了jni hook方案</p>
<p><strong>Android程序比起一般Java程序在使用动态加载时麻烦在哪里</strong><br>使用ClassLoader动态加载一个外部的类是非常容易的事情，所以很容易就能实现动态加载新的可执行代码的功能，但是比起一般的Java程序，在Android程序中使用动态加载主要有两个麻烦的问题：</p>
<ul>
<li>Android中许多组件类（如Activity、Service等）是需要在Manifest文件里面注册后才能工作的（系统会检查该组件有没有注册），所以即使动态加载了一个新的组件类进来，没有注册的话还是无法工作；</li>
<li>Res资源是Android开发中经常用到的，而Android是把这些资源用对应的R.id注册好，运行时通过这些ID从Resource实例中获取对应的资源。如果是运行时动态加载进来的新类，那类里面用到R.id的地方将会抛出找不到资源或者用错资源的异常，因为新类的资源ID根本和现有的Resource实例中保存的资源ID对不上；</li>
</ul>
<p>说到底，一个Android程序和标准的Java程序最大的区别就在于他们的上下文环境（Context）不同。</p>
<blockquote>
<p>Android中context可以给程序提供组件需要用到的功能，也可以提供一些主题、Res等资源，而现在的各种Android动态加载框架中，核心要解决的东西也正是如何给外部的新类提供上下文环境的问题。</p>
</blockquote>
<h3 id="希望最终的效果"><a href="#希望最终的效果" class="headerlink" title="希望最终的效果"></a>希望最终的效果</h3><p>能够简单地集成热修复sdk，开发者修改代码后能轻松地完成向用户发Patch操作，在用户无感知的情况下修复bug。</p>
<h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul>
<li>对开发者友好，使用热修复要简单直接，能尽快解决问题；</li>
<li>对用户友好，尽量减少用户感知；</li>
<li>减小bug的影响，尽量扩大修复时覆盖的用户范围。</li>
</ul>
<p><strong>就一个理念：只有适合当前情况的才是最好的。</strong></p>
<h4 id="插件化和热修复"><a href="#插件化和热修复" class="headerlink" title="插件化和热修复"></a>插件化和热修复</h4><p>前面关于Android中ClassLoader的介绍，Android使用PathClassLoader作为其类加载器，DexClassLoader可以从.jar和.apk类型的文件内部加载classes.dex文件。</p>
<p>如果大家对于插件化有所了解，其实Android应用的插件化，就可以利用DexClassLoader来动态加载非安装应用的类来实现，当然也就可以做到只有单用户点击相应插件模块，才会从网络获取相应插件文件，再通过DexClassLoader实现类加载。</p>
<p>而热修复可以利用BaseDexClassLoader中的pathList对象，pathList中包含一个DexFile的集合dexElements，我们可以在这个dexElements中去做一些事情，比如在这个数组的第一个元素放置我们的patch.jar，里面包含修复过的类。</p>
<blockquote>
<p>这样的话，当遍历findClass的时候，我们修复的类就会被查找到，从而替代有bug的类。不过这样处理还存在一个CLASS_ISPREVERIFIED的问题<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a&amp;scene=1&amp;srcid=1106Imu9ZgwybID13e7y2nEi#wechat_redirect" target="_blank" rel="external">安卓App热补丁动态修复技术介绍</a>。</p>
</blockquote>
<h3 id="热修复具体实施"><a href="#热修复具体实施" class="headerlink" title="热修复具体实施"></a>热修复具体实施</h3><p>上面分析了Android中的类的加载的流程，可以看出：</p>
<ul>
<li>DexPathList对象中的dexElements列表是类加载的一个核心，一个类如果能被成功加载，那么它的dex一定会出现在dexElements所对应的dex文件中。</li>
<li>exElements中出现的顺序也很重要，在dexElements前面出现的dex会被优先加载，一旦Class被加载成功，就会立即返回。</li>
<li>我们的如果想做hot fix，一定要保证我们的pacth dex文件出现在dexElements列表的前面。</li>
</ul>
<blockquote>
<p>要实现热修复，就需要我们在运行时去更改PathClassLoader.pathList.dexElements，由于这些属性都是private的，因此需要通过反射来修改。</p>
</blockquote>
<p>另外，构造我们自己的dex文件所对应的dexElements数组的时候，我们也可以采取一个比较取巧的方式：</p>
<ul>
<li>通过构造一个DexClassLoader对象来加载我们的dex文件</li>
<li>调用一次dexClassLoader.loadClass(dummyClassName)方法</li>
<li>这样dexClassLoader.pathList.dexElements中就会包含我们的dex<blockquote>
<p>通过把dexClassLoader.pathList.dexElements插入到系统默认的classLoader.pathList.dexElements列表前面，就可以让系统优先加载我们的dex中的类，从而可以实现热修复了。</p>
</blockquote>
</li>
</ul>
<p>###自己的思考<br>通过分析三者的差异化对比，以及思考到底什么才是合适的，通过hook方法的方式实现起来确实最直接，但是问题却也很明显，首先成功覆盖率和稳定性是个问题，而且操作起来复杂性比较高。</p>
<p>而通过classloader考虑的是从系统动态加载的特性入手，所以理所当然以局限于系统的特性，比如由于对于已经加载的类，类加载器不会再调用loadClass方法，所以想要修复要等到下次启动程序才行。</p>
<p><strong>Android项目中，动态加载技术按照加载的可执行文件的不同大致可以分为两种：</strong><br>1.动态加载so库；<br>2.动态加载dex/jar/apk文件（通常都是这种）</p>
<p><strong>所以理解起来就是：</strong><br>1.动态调用外部的Dex文件则是完全没有问题的。<br>2.在APK文件中往往有一个或者多个Dex文件，我们写的每一句代码都会被编译到这些文件里面。<br>3.Android应用运行的时候就是通过执行这些Dex文件完成应用的功能的。<br>4.虽然一个APK一旦构建出来，我们是无法更换里面的Dex文件，但是我们可以通过加载外部的Dex文件来实现。</p>
<blockquote>
<p>外部文件可以放在外部存储，或者从网络下载。</p>
</blockquote>
<p>因此最极端的情况就是，直接把APK自身带有的Dex文件当做空壳，只是作为一个程序的入口，所有的功能都通过从服务器下载最新的Dex文件完成。<br>当然，一般来说只要利用Android动态加载技术，通过动态加载新的dex的方式，完成对有bug类的“替换”，来达到避免调用存在bug的代码，这也就是所谓的Hot Fix。</p>
<blockquote>
<p>总体的思路就是这样，至于具体的实现，就有很多环节需要细化的，因为Android本身也有很多自身的特性。</p>
</blockquote>
<p>接下来就是考虑实际编码实现了。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android事件总线编程的考虑]]></title>
      <url>/2016/04/21/Android%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF%E7%BC%96%E7%A8%8B%E7%9A%84%E8%80%83%E8%99%91/</url>
      <content type="html"><![CDATA[<h3 id="在实际项目开发中，经常会遇到当执行某个业务逻辑时，希望调用其他处理逻辑。"><a href="#在实际项目开发中，经常会遇到当执行某个业务逻辑时，希望调用其他处理逻辑。" class="headerlink" title="在实际项目开发中，经常会遇到当执行某个业务逻辑时，希望调用其他处理逻辑。"></a>在实际项目开发中，经常会遇到当执行某个业务逻辑时，希望调用其他处理逻辑。</h3><p>通常最简单粗暴的方法是直接依赖其他模块，调用模块相应方法，但这样会带来一些问题：</p>
<ul>
<li>模块间相互依赖，耦合度高。</li>
<li>后期维护起来困难。</li>
<li>代码缺少设计，不利于拓展。</li>
</ul>
<p>举个例子：比如在购物网站，通常客户订单提交后，需要进行订单支付以及一些其他的业务处理，如发邮件通知客户下单成功等操作。<br>下面就这经典的购物网站下订单为例，探讨关于代码的编程设计几种思路：</p>
<p>####高度耦合实现<br>订单模块直接依赖支付服务模块及用户服务模块，调用各模块的相应实现方法。由于模块间相互依赖，后期修改下订单逻辑时，则需要修改提交订单的代码，某些时候考虑到业务稳定性可能无法立即修改，也可能涉及到多处操作。</p>
<p><img src="http://7xt7m8.com2.z0.glb.clouddn.com/event1.png" alt="高度耦合情况.png"></p>
<h4 id="观察者模式实现"><a href="#观察者模式实现" class="headerlink" title="观察者模式实现"></a>观察者模式实现</h4><p>通过观察者模式来进行解耦，当被观察对象发生变化时，通知其观察者。观察者监听到相应的事件，由观察者实现相应的处理。体现在订单逻辑时：定义多个观察者观察下订单这个主题，当下订单的动作发生时，通知其所有观察者，再由每个观察者进行处理。</p>
<p><img src="http://7xt7m8.com1.z0.glb.clouddn.com/even2.png" alt="观察者模式.png"></p>
<h4 id="基于事件总线编程的实现"><a href="#基于事件总线编程的实现" class="headerlink" title="基于事件总线编程的实现"></a>基于事件总线编程的实现</h4><p>虽然观察者模式对源代码进行了解耦，但是还是有一些不足：</p>
<ul>
<li>相关模块需要实现相应接口；</li>
<li>需要主动调用相关的addListener方法设置监听器；</li>
<li>一个监听器智能监听一种操作。</li>
</ul>
<p><strong>EventBus是对于监听者模式的实现，通过EventBus事件总线来实现。</strong></p>
<p>使用EventBus来实现监听者模式，只需要三步操作：</p>
<ul>
<li>通过注解@Subscribe来声明事件回调方法；</li>
<li>调用EventBus的register方法来注册监听器；</li>
<li>通过post方法来触发事件；</li>
</ul>
<p><img src="http://7xt7m8.com2.z0.glb.clouddn.com/event3.png" alt="监听者模式.png"></p>
<p>感谢：<br><a href="http://pingguohe.net/2016/02/19/java-event-bus.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">事件驱动编程</a>作者提供的思路，自己只是稍加进行了整理。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android网络分析和优化]]></title>
      <url>/2016/04/18/Android%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E5%92%8C%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>目前针对开发中Android端的SDK进行实际测试，反映出存在网络加载资源缓慢的问题，在知晓目前CDN的可能存在不稳定的情况下，针对sdk本身的网络模块进行了相应的分析，整理出相关的测试记录，帮助后期可以做出的优化。</p>
<h3 id="典型的HTTP请求流程说明："><a href="#典型的HTTP请求流程说明：" class="headerlink" title="典型的HTTP请求流程说明："></a>典型的HTTP请求流程说明：</h3><p><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net1.png" alt="一次Http请求流程"></p>
<h3 id="发起一次完整的视频广告请求包括："><a href="#发起一次完整的视频广告请求包括：" class="headerlink" title="发起一次完整的视频广告请求包括："></a>发起一次完整的视频广告请求包括：</h3><ul>
<li>根据广告位请求Ad内容</li>
<li>下载广告视频截图</li>
<li>下载Logo角标请求</li>
<li>下载插屏页模板Temp资源</li>
<li>下载广告视频的video文件</li>
<li>下载插屏页html的source资源</li>
</ul>
<p>如下图所示，根据广告请求AD返回成功后，才会执行下载资广告资源的任务，这里是同步。而当服务器返回AD数据以后，发起多线程异步下载广告资源的任务。只有当一次视频广告所需的全部资源全部下载成功时，才会进入广告的播放显示流程。<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net2.png" alt="Paste_Image.png"></p>
<blockquote>
<p>简单的理解就是，多个下载任务是并发的，对内容的获取是异步的。</p>
</blockquote>
<h3 id="数据获取和内容解析"><a href="#数据获取和内容解析" class="headerlink" title="数据获取和内容解析"></a>数据获取和内容解析</h3><p>一般来说，客户端从服务端请求获取数据，缓存数据内容，最终按不同形式呈现出来。所以对资源的加载简单地分为下面两个环节：</p>
<ul>
<li>数据获取：也就是发送请求给服务器返回相应的数据。</li>
<li>内容解析：对服务器返回的不同数据类型，在设备上缓存的文件形式，对应其不同的解析方式。</li>
</ul>
<h3 id="网络任务分析"><a href="#网络任务分析" class="headerlink" title="网络任务分析"></a>网络任务分析</h3><p>通过手机端设置代理方式，借助Fiddler对手机端的网络数据进行抓包分析。下面是针对SDK项目的demo程序来进行数据抓包分析：<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net3.png" alt=""><br>可以看出，针对一次完成的视频广告请求，一共是发起6次网络请求的任务，与上面描述的内容一致，下面针对这些任务的实际执行情况和相应的数据指标来进行分析。</p>
<h5 id="网络任务耗时分析："><a href="#网络任务耗时分析：" class="headerlink" title="网络任务耗时分析："></a>网络任务耗时分析：</h5><p>通过分析请求AD任务的整体耗时分布，发现耗时主要是在进行DNS解析和TCP握手连接两个方面。<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net4.png" alt=""><br><strong>针对上面两点通常的优化有下面几种方式：</strong><br>1.采用IP直连的方式，避免需要把域名通过DNS服务器解析得到IP地址这个耗时过程；<br>2.同时考虑到CDN分布式部署情况，域名解析到的IP地址并不一定，增加DNS缓存的设置；</p>
<blockquote>
<p>将域名和从DNS服务器解析得到的IP地址保存在DNS缓存中。当下一次再使用这个域名时，就直接从DNS缓存里获得所需的信息，而无需再访问DNS服务器。</p>
</blockquote>
<p>3.建立TCP/IP可靠连接，是需要三次握手协议，每次请求都重复这个建立连接的过程，无疑是非常耗时的，考虑下面的方式：</p>
<blockquote>
<p>请求合并，对数据量小而零散请求都一次集中执行完毕，类似的请求做合并；<br>分优先级、延迟部分请求，将不重要的请求延迟，削峰减少并发；<br>连接复用，不需要每次都通过“三次握手：建立一个新连接，再通过“四次挥手”来关闭连接；</p>
</blockquote>
<p>整个请求的TimeLine<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net5.png" alt=""></p>
<p>#####网络任务数据传输分析：<br>请求头和响应头<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net6.png" alt=""><br>请求和响应的内容：<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net7.png" alt=""><br>所占的比例<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net8.png" alt=""><br>通过上面的数据表现，考虑对网络传输的数据进行一下处理：<br><strong>减小请求数据大小</strong><br>1.对于 POST 请求，Body 可以做 Gzip 压缩<br>2.对请求头进行压缩，Http 1.1 不支持，可以进行SPDY改造后支持， Http 2.0 原生支持。 </p>
<blockquote>
<p>Http 1.1 可以通过服务端对前一个请求的请求头进行缓存，后面相同请求头用 md5 之类的 id 来表示即可。</p>
</blockquote>
<p><strong>减小返回数据大小</strong><br>通常一般对网络数据优化的措施是：<br>(1) 对返回的内容数据使用 Gzip 压缩<br>(2) 精简数据格式如 JSON 代替 XML，WebP 代替其他图片格式<br>(3) 对于不同的设备不同网络返回不同的内容，如不同分辨率图片<br>(4) 增量更新需要数据更新时，可考虑数据增量更新。如常见的服务端进行 bsdiff，客户端进行 bspatch。<br>(5) 大文件下载支持断点续传和多线程下载，并缓存 Http Resonse 的 ETag 标识，下次请求时带上，从而确定是否数据改变过，未改变则直接返回 304。</p>
<p><strong>下图是对比Json数据使用 Gzip 压缩前后对比图</strong><br>返回内容开启 Gzip压缩前<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net9.png" alt=""><br>开启Gzip压缩后<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net10.png" alt=""><br>对比发现，开启Gzip后可以减少57.3%的数据传输量<br><img src="http://7xt7m8.com2.z0.glb.clouddn.com/net11.png" alt=""></p>
<h5 id="网络任务优化措施"><a href="#网络任务优化措施" class="headerlink" title="网络任务优化措施"></a>网络任务优化措施</h5><ul>
<li>考虑预取包括预连接、预加载数据。</li>
<li>使用HttpUrlConnection替换目前的HttpClient，可以具有默认的Gzip压缩和连接复用实现</li>
<li>DNS优化，确定IP直连和DNS缓存两者结合的方式</li>
<li>多连接下载，对于较大文件，如大图片、文件下载可考虑多连接下载<blockquote>
<p>需要控制请求的最大并发量，毕竟移动端网络受限</p>
</blockquote>
</li>
<li>增加网络性能的监控，毕竟优化需要通过数据对比才能看出效果，所以监控系统必不可少，通过前后端的数据监控确定调优效果。</li>
<li></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android反编译后重新打包]]></title>
      <url>/2016/04/13/Android%E5%8F%8D%E7%BC%96%E8%AF%91%E5%90%8E%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在android开发中经常会遇到需要反编译竞品的需求，题主也就针对反编译apk后替换sdk后重新打包的场景进行试验，下面一步一步来说明Android如何反编译后重新打包。</p>
</blockquote>
<p>###一个典型apk包中包含的内容<br>我们知道android项目编译成应用程序后的安装文件是.apk文件，运行期间classloader加载的是dex文件中的class。所以我们先来看看一个典型的apk包中具有哪些基本内容：<br><img src="http://upload-images.jianshu.io/upload_images/580515-a7a84327951bf419.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="apk包内容.png"></p>
<p>###方式一：使用apktool直接反编译apk（酷市场为例，2016.8.12更新）<br><img src="http://upload-images.jianshu.io/upload_images/580515-0872dbd6b03a95c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>####配置apktool环境：<br><strong>1.打开<a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="external">apktool官网</a></strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-e62666c3579b940a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>2.下载执行脚本文件和apktool.jar包</strong></p>
<blockquote>
<p>先下载脚本文件 ：<br>mac os 对应 apktool.sh<br>windows 对应 apktool.bat</p>
</blockquote>
<p>再下载最新的<a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="external">apktool.jar</a><br><img src="http://upload-images.jianshu.io/upload_images/580515-09c9618e79026d09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>3.配置apktool的运行环境</strong></p>
<blockquote>
<p>windows：把下载的两个文件都copy到c:/windows目录，或者放到自己指定的目录下再修改系统path也行<br>Mac os: 把下载的两个文件都copy到/usr/local/bin目录下，修改权限为可执行chmod a+x</p>
</blockquote>
<p>在命令行终端模式下，输入apktool验证是否完成apktool环境配置<br><img src="http://upload-images.jianshu.io/upload_images/580515-d1f87da928407684.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###<strong>反编译apk包</strong><br>1.命令行进入到apk包所在的文件夹路径<br><img src="http://upload-images.jianshu.io/upload_images/580515-accefc11f0861647.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>2.执行反编译命令 <code>apktool d filename</code><br><img src="http://upload-images.jianshu.io/upload_images/580515-b404534c151cc552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>3.得到反编译后的文件夹<br><img src="http://upload-images.jianshu.io/upload_images/580515-a0e4c2d43c8bc154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-85d8ca6cde81ba3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###4.修改apk内容（举例替换logo）<br>查看manifest.xml文件，icon对应的就是配置应用logo<br><img src="http://upload-images.jianshu.io/upload_images/580515-25992f383721074b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><strong>logo图片资源所在</strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-917821ea89b8e25d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###5.重新签名打包<br><strong>1.回编译apk<code>apktool b files</code></strong><br>files就是对应刚刚修改的apk文件夹，执行完后会重新生成一个apk文件</p>
<blockquote>
<p>注意：编译后的apk是安装不成功的，总是提示 <code>Failure [INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION]</code>，实质是没签名。 </p>
</blockquote>
<p><strong>2.生成签名:</strong><br><code>keytool -genkey -keystore coolapk.keystore -keyalg RSA -validity 10000 -alias coolapk</code></p>
<blockquote>
<p>注意：上面-keystore后面跟的是签名文件的名字，而-alias是别名，一般情况下-keystore后面跟-alias是一样的，但其实两者没有关系，这也是我故意搞成不一样的原因。 </p>
</blockquote>
<p><strong>3.为apk增加签名：</strong><br><code>jarsigner -digestalg SHA1 -sigalg MD5withRSA -tsa -verbose -keystore coolapk.keystore -signedjar coolapk-signed.apk coolapk.apk coolapk</code></p>
<blockquote>
<p>注意：<br>1.最后的”coolapk”就是－alias后面带的，必须保持一致<br>2.如果不带-digestalg SHA1 -sigalg MD5withRSA签名后的apk安装也会不成功，INSTALL_PARSE_FAILED_NO_CERTIFICATES的错误，如果不带-tsa会报一个时间方面的警告.</p>
</blockquote>
<p>##方式二：使用dex2jar反编译查看java代码（为例，2016.4月更新）</p>
<p>###<strong>下载dex2jar和jd-gui</strong></p>
<blockquote>
<p>dex2jar: <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">https://github.com/pxb1988/dex2jar</a><br>   jd-gui: <a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a></p>
</blockquote>
<p>###<strong>使用dex2jar将从apk中解压得到的dex文件转成jar包</strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-1d12038996f129ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###<strong>使用jd-gui来查看jar包内容</strong><br><img src="http://upload-images.jianshu.io/upload_images/580515-1235c80628a8d655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jd-gui.png"></p>
<p>###<strong>将要需改的类更改代码后复制到jar内，完成覆盖替换</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-a9df51bf94f40fdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="覆盖替换类"></p>
<p>###<strong>把jar包重新转成dex文件</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-aeff3847f43cd4ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-e73bfd26f811c838.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###<strong>将修改完成后的dex文件复制到原来的apk文件中</strong><br>直接覆盖原来的dex文件<br><img src="http://upload-images.jianshu.io/upload_images/580515-935497dbd67e5e4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-84668b82abb302b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>然后就兴冲冲地直接去安装了，然而～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-e0eb73f3728d7da4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>看来果然没这么简单就能呢个搞定，继续排查原因。</p>
<p>###找原因<br>看看apk文件中有什么可疑对象导致了安装失败，果然除了dex和资源文件以外，还发现了三个文件<br><img src="http://upload-images.jianshu.io/upload_images/580515-62fd096179e44b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###原来是apk包本身的防篡改机制导致的<br>打开文件来一探究竟，果然里面都是对打包时对文件进行了标识记录，看来这是避免文件被篡改的安全机制。<br><img src="http://upload-images.jianshu.io/upload_images/580515-186440cecac5265d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###找到问题原因就来解决，嘿咻嘿咻<br>想想既然是这些文件导致的，那先试试简单粗暴地直接把文件删了，避免防篡改检查<br><img src="http://upload-images.jianshu.io/upload_images/580515-935497dbd67e5e4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>然而，这样的是不行的，必须要有这个文件夹才能解析apk包，可能这些相当于是读取安装文件列表清单，必须具有，看来此路不通，<br><img src="http://upload-images.jianshu.io/upload_images/580515-f5de483a1b21c670.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>既然原来的清单内容对不上，但又不能不提供，那能不能我们给它配一个新的？<br>想到这里，感觉可以动手试试，嘿咻嘿咻～</p>
<p>这些文件既然是在编译打包成apk时期自动生成的，那要想再生成一份新的，所以应该重新打包就可以。可是这个本身已经就是apk文件了，怎么再编译打包？<br>停下来想了想，对啊，突然想起来可以给包签个名呗，打签名应该也会有同样的效果才对，继续嘿咻嘿咻。</p>
<p>找个工具来签名吧，用自己的去签名留下点什么不良记录就不好了，嘿嘿～<br><img src="http://upload-images.jianshu.io/upload_images/580515-259f93b87a9726c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###签名成功后<br><img src="http://upload-images.jianshu.io/upload_images/580515-00a8040ac4ee33b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>###成功安装，破解完成</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java源码分析--String的设计]]></title>
      <url>/2016/03/30/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90--String%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>笔者马上毕业了，准备开始 Java 的进阶学习计划。于是打算先从 String 类的源码分析入手，作为后面学习的案例。这篇文章寄托着今后进阶系列产出的愿望，希望能坚持下去，不忘初心，让自己保持那份对技术的热爱。</p>
</blockquote>
<p>因为学习分析源码，所以借鉴了 HollisChuang <a href="http://www.hollischuang.com/" target="_blank" rel="external">成神之路</a>的大部分内容，并在此基础上对源码进行了学习，在此感谢。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-b56e704b46879cd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="等风来"></p>
<h2 id="问题的引入"><a href="#问题的引入" class="headerlink" title="问题的引入"></a>问题的引入</h2><p>关于 String 字符串，对于 Java 开发者而言，这无疑是一个非常熟悉的类。也正是因为经常使用，其内部代码的设计才值得被深究。所谓知其然，更得知其所以然。</p>
<p>举个例子，假如想要写个类去继承 String，这时 IDE 提示 String 为final类型不允许被继承。<br><img src="http://upload-images.jianshu.io/upload_images/580515-614176e44c92da21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>此时最先想到的肯定是 java 中类被 final 修饰的效果，其实由这一点也可以引出更多思考：<br><strong>比如说 String 类被设计成 final 类型是出于哪些考虑？</strong></p>
<blockquote>
<p>在 Java 中，被 final 类型修饰的类不允许被其他类继承，被 final 修饰的变量赋值后不允许被修改</p>
</blockquote>
<hr>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>查看 String 类在 jdk7 源码中的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span></span>&#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出 String 是 final 类型的，表示该类不能被其他类继承，同时该类实现了三个接口：<code>java.io.Serializable</code>  <code>Comparable&lt;String&gt;</code> <code>CharSequence</code></p>
<p>对于 Sting 类，官方有如下注释说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">Strings are constant; </span></div><div class="line"><span class="comment">their values can not be changed after they are created.</span></div><div class="line"><span class="comment">Stringbuffers support mutable strings.</span></div><div class="line"><span class="comment">Because String objects are immutable they can be shared. Forexample:</span></div><div class="line"><span class="comment">*/</span></div></pre></td></tr></table></figure>
<p>String 字符串是常量，其值在实例创建后就不能被修改，但字符串缓冲区支持可变的字符串，因为缓冲区里面的不可变字符串对象们可以被共享。（其实就是使对象的引用发生了改变）</p>
<hr>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">The value isused for character storage.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</div></pre></td></tr></table></figure>
<p>这是一个字符数组，并且是 final 类型，用于存储字符串内容。从 fianl 关键字可以看出，String 的内容一旦被初始化后，其不能被修改的。</p>
<p>看到这里也许会有人疑惑，String 初始化以后好像可以被修改啊。比如找一个常见的例子：<br><code>String str = “hello”;     str = “hi”</code><br>其实这里的赋值并不是对 str 内容的修改，而是将str指向了新的字符串。另外可以明确的一点：<strong>String 其实是基于字符数组 char[] 实现的。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">Cache the hashcode for the string</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash;  <span class="comment">//Default to 0</span></div></pre></td></tr></table></figure>
<p>缓存字符串的 hash Code，其默认值为 0</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">use serialVersionUID from JDK 1.0.2 for interoperability</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">Class String is special cased with in the Serialization Stream Protocol.</span></div><div class="line"><span class="comment">*/</span></div><div class="line">privates tatic <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =  <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>因为 String 实现了 Serializable 接口，所以支持序列化和反序列化支持。Java 的序列化机制是通过在运行时判断类的 serialVersionUID 来验证版本一致性的。在进行反序列化时，JVM 会把传来的字节流中的 serialVersionUID 与本地相应实体（类）的 serialVersionUID 进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常(InvalidCastException)。</p>
<hr>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><strong>空的构造器</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">this</span>.value = <span class="string">""</span>.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该构造方法会创建空的字符序列，注意这个构造方法的使用，因为创造不必要的字符串对象是不可变的。因此不建议采取下面的创建 String 对象:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String str = <span class="keyword">new</span> String()</div><div class="line">str = <span class="string">"sample"</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样的结果显而易见，会产生了不必要的对象。</p>
</blockquote>
<p><strong>使用字符串类型的对象来初始化</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span></span>&#123;</div><div class="line">  <span class="keyword">this</span>.value = original.value;</div><div class="line">  <span class="keyword">this</span>.hash = original.hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里将直接将源 String 中的 value 和 hash 两个属性直接赋值给目标 String。因为 String 一旦定义之后是不可以改变的，所以也就不用担心改变源<br> String 的值会影响到目标 String 的值。</p>
<p><strong>使用字符数组来构造</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(offset&lt;<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(count&lt;<span class="number">0</span>)&#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="function">String <span class="title">IndexOutOfBoundsException</span><span class="params">(count)</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(offset &lt;= value.length)&#123;</div><div class="line">      <span class="keyword">this</span>.value = <span class="string">""</span>.value;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"> <span class="comment">//Note:offset or count might be near-1&gt;&gt;&gt;1.</span></div><div class="line">  <span class="keyword">if</span>(offset &gt; value.length - count)&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(offset+count);</div><div class="line">  &#125;</div><div class="line"> <span class="keyword">this</span>.value=Arrays.copyOfRange(value,offset,offset+count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里值得注意的是：当我们使用字符数组创建<br> String 的时候，会用到 Arrays.copyOf 方法或<br> Arrays.copyOfRange 方法。这两个方法是将原有的字符数组中的内容逐一的复制到String中的字符数组中。会创建一个新的字符串对象，随后修改的字符数组不影响新创建的字符串。</p>
<p><strong>使用字节数组来构建 String </strong></p>
<p>在 Java 中，String 实例中保存有一个 char[] 字符数组，char[] 字符数组是以 unicode 码来存储的，String 和 char 为内存形式。<br>byte 是网络传输或存储的序列化形式，所以在很多传输和存储的过程中需要将 byte[] 数组和String进行相互转化。所以，String 提供了一系列重载的构造方法来将一个字符数组转化成 String，提到 byte[] 和 String 之间的相互转换就不得不关注编码问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String(<span class="keyword">byte</span>[] bytes, Charset charset)</div></pre></td></tr></table></figure>
<p>该构造方法是指通过 charset 来解码指定的 byte 数组，将其解码成 unicode 的 char[] 数组，够造成新的 String。<br>这里的 bytes 字节流是使用 charset 进行编码的，想要将他转换成 unicode 的 char[] 数组，而又保证不出现乱码，那就要指定其解码方式**</p>
<p>同样使用字节数组来构造 String 也有很多种形式，按照是否指定解码方式分的话可以分为两种：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[])</span></span>&#123;</div><div class="line">  <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">  checkBounds(bytes, offset, length);</div><div class="line">    <span class="keyword">this</span>.value = StringCoding.decode(bytes, offset, length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们在使用 byte[] 构造 String 的时候，使用的是下面这四种构造方法(带有 charsetName 或者<br> charset 参数)的一种的话，那么就会使用<br> StringCoding.decode 方法进行解码，使用的解码的字符集就是我们指定的 charsetName 或者<br> charset 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String(<span class="keyword">byte</span> bytes[])</div><div class="line">String(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</div><div class="line">String(<span class="keyword">byte</span> bytes[], Charset charset)</div><div class="line">String(<span class="keyword">byte</span> bytes[], String charsetName)</div><div class="line">String(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset)</div><div class="line">String(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</div></pre></td></tr></table></figure>
<p>们在使用 byte[] 构造 String 的时候，如果没有指明解码使用的字符集的话，那么 StringCoding 的 decode 方法首先调用系统的默认编码格式，如果没有指定编码格式则默认使用 ISO-8859-1 编码格式进行编码操作。主要体现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">char</span>[] decode(<span class="keyword">byte</span>[] ba, <span class="keyword">int</span> off, <span class="keyword">int</span> len)&#123;</div><div class="line">    String csn = Charset.defaultCharset().name();</div><div class="line">    <span class="keyword">try</span>&#123; <span class="comment">//use char set name decode() variant which provide scaching.</span></div><div class="line">         <span class="keyword">return</span> decode(csn, ba, off, len);</div><div class="line">    &#125; <span class="keyword">catch</span>(UnsupportedEncodingException x)&#123;</div><div class="line">         warnUnsupportedCharset(csn);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">return</span> decode(<span class="string">"ISO-8859-1"</span>, ba, off, len);  </div><div class="line">       &#125; <span class="keyword">catch</span>(UnsupportedEncodingException x)&#123;</div><div class="line">         <span class="comment">//If this code is hit during VM initiali zation, MessageUtils is the only way we will be able to get any kind of error message.</span></div><div class="line">       MessageUtils.err(<span class="string">"ISO-8859-1 char set not available: "</span> + x.toString());</div><div class="line">        <span class="comment">// If we can not find ISO-8859-1 (are quired encoding) then things are seriously wrong with the installation.</span></div><div class="line">       System.exit(<span class="number">1</span>);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用 StringBuffer 和 StringBuider 构造一个 String</strong></p>
<p>作为 String 的两个“兄弟”，StringBuffer 和 StringBuider 也可以被当做构造 String 的参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(buffer) &#123;</div><div class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(buffer.getValue(), buffer.length());</div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</div><div class="line">     <span class="keyword">this</span>.value = Arrays.copyOf(builder.getValue(), builder.length());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，这两个构造方法是很少用到的，因为当我们有了 StringBuffer 或者 StringBuilfer 对象之后可以直接使用他们的 toString 方法来得到 String。</p>
<blockquote>
<p>关于效率问题，Java 的官方文档有提到说使用 StringBuilder 的 toString 方法会更快一些，原因是 StringBuffer 的 toString 方法是 synchronized 的，在牺牲了效率的情况下保证了线程安全。</p>
</blockquote>
<p>StringBuilder 的 toString() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="comment">//Create a copy, don't share the array</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> String(value,<span class="number">0</span>,count);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>StringBuffer 的 toString() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">if</span> (toStringCache == <span class="keyword">null</span>)&#123;</div><div class="line">    toStringCache = Arrays.copyOfRange(value, <span class="number">0</span>, count);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> String(toStringCache, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>一个特殊的保护类型的构造方法</strong></p>
<p>String 除了提供了很多公有的供程序员使用的构造方法以外，还提供了一个保护类型的构造方法（Java 7），我们看一下他是怎么样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String(<span class="keyword">char</span>[] value, <span class="keyword">boolean</span> share) &#123;</div><div class="line"> <span class="comment">// assert share : "unshared not supported";</span></div><div class="line"> <span class="keyword">this</span>.value = value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中我们可以看出，该方法和 String(char[] value) 有两点区别：</p>
<ul>
<li><p>第一个，该方法多了一个参数：boolean share，其实这个参数在方法体中根本没被使用。注释说目前不支持 false，只使用 true。<br>那可以断定，加入这个 share 的只是为了区分于 String(char[] value) 方法，不加这个参数就没办法定义这个函数，只有参数是不能才能进行重载。</p>
</li>
<li><p>第二个区别就是具体的方法实现不同。我们前面提到过，String(char[] value) 方法在创建 String 的时候会用到 Arrays 的 copyOf 方法将value中的内容逐一复制到 String当中，而这个 String(char[] value, boolean share) 方法则是直接将value的引用赋值给String的value。</p>
</li>
</ul>
<p>那么也就是说，这个方法构造出来的 String 和参数传过来的 char[] value 共享同一个数组。 </p>
<p><strong>为什么 Java 会提供这样一个方法呢？</strong></p>
<ul>
<li><strong>性能好</strong></li>
</ul>
<p>这个很简单，一个是直接给数组赋值（相当于直接将 String 的 value 的指针指向char[]数组），一个是逐一拷贝。当然是直接赋值快了。</p>
<ul>
<li><strong>节约内存</strong></li>
</ul>
<p>该方法之所以设置为 protected，是因为一旦该方法设置为公有，在外面可以访问的话，如果构造方法没有对 arr 进行拷贝，那么其他人就可以在字符串外部修改该数组，由于它们引用的是同一个数组，因此对 arr 的修改就相当于修改了字符串，那就破坏了字符串的不可变性。</p>
<ul>
<li><strong>安全的</strong></li>
</ul>
<p>对于调用他的方法来说，由于无论是原字符串还是新字符串，其 value 数组本身都是 String 对象的私有属性，从外部是无法访问的，因此对两个字符串来说都很安全。</p>
<h2 id="Java7加入的新特性"><a href="#Java7加入的新特性" class="headerlink" title="Java7加入的新特性"></a>Java7加入的新特性</h2><p>在 Java 7 之前有很多 String 里面的方法都使用上面说的那种“性能好的、节约内存的、安全”的构造函数。<br>比如：<code>substring</code> <code>replace</code> <code>concat</code> <code>valueOf</code>等方法</p>
<blockquote>
<p>实际上他们使用的是public String(char[], ture)方法来实现。</p>
</blockquote>
<p><strong>但是在 Java 7 中，substring已经不再使用这种“优秀”的方法了</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(beginIndex &lt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(endIndex &gt; value.length)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</div><div class="line">  &#125;</div><div class="line">  intsubLen = endIndex-beginIndex;</div><div class="line">  <span class="keyword">if</span>(subLen &lt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span>  : newString(value, beginIndex, subLen);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>为什么呢？</strong><br>虽然这种方法有很多优点，但是他有一个致命的缺点，对于 sun 公司的程序员来说是一个零容忍的 bug，那就是他很有可能造成<strong>内存泄露</strong>。<br>看一个例子，假设一个方法从某个地方（文件、数据库或网络）取得了一个很长的字符串，然后对其进行解析并提取其中的一小段内容，这种情况经常发生在网页抓取或进行日志分析的时候。<br>下面是示例代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String aLongString = <span class="string">"...averylongstring..."</span>;</div><div class="line">StringaPart = data.substring(<span class="number">20</span>, <span class="number">40</span>);</div><div class="line"><span class="keyword">return</span> aPart;</div></pre></td></tr></table></figure>
<p>在这里 aLongString 只是临时的，真正有用的是 aPart，其长度只有 20 个字符，但是它的内部数组却是从 aLongString 那里共享的，因此虽然 aLongString 本身可以被回收，但它的内部数组却不能释放。这就导致了内存泄漏。如果一个程序中这种情况经常发生有可能会导致严重的后果，如内存溢出，或性能下降。</p>
<blockquote>
<p>新的实现虽然损失了性能，而且浪费了一些存储空间，但却保证了字符串的内部数组可以和字符串对象一起被回收，从而防止发生内存泄漏，因此新的 substring 比原来的更健壮。</p>
</blockquote>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>length() 返回字符串长度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> value.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>isEmpty() 返回字符串是否为空</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> value.length == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>charAt(int index)  返回字符串中第（index+1）个字符（数组索引）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>((index &lt; <span class="number">0</span>) || (index &gt;= value.length))&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(index);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> value[index];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>char[] toCharArray() 转化成字符数组<br>trim() 去掉两端空格<br>toUpperCase() 转化为大写<br>toLowerCase() 转化为小写</p>
<p><strong>需要注意</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">concat</span><span class="params">(String str)</span> <span class="comment">//拼接字符串</span></span></div><div class="line"><span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> <span class="comment">//将字符串中的oldChar字符换成 newChar 字符</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>以上两个方法都使用了String(char[] value, boolean share)；concat 方法和 replace 方法，他们不会导致元数组中有大量空间不被使用，因为他们一个是拼接字符串，一个是替换字符串内容，不会将字符数组的长度变得很短，所以使用了共享的<br> char[] 字符数组来优化。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> <span class="comment">//判断字符串是否匹配给定的regex正则表达式</span></span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span> <span class="comment">//判断字符串是否包含字符序列 s</span></span></div><div class="line"><span class="function">String[] <span class="title">split</span><span class="params">(String regex, <span class="keyword">int</span> limit)</span> 按照字符 regex将字符串分成 limit 份</span></div><div class="line"><span class="function">String[] <span class="title">split</span><span class="params">(String regex)</span> 按照字符 regex 将字符串分段</span></div></pre></td></tr></table></figure>
<p><strong>getBytes</strong></p>
<p>在创建 String 的时候，可以使用 byte[] 数组，将一个字节数组转换成字符串，同样，我们可以将一个字符串转换成字节数组，那么 String 提供了很多重载的 getBytes 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes()&#123;</div><div class="line">  <span class="keyword">return</span> StringCoding.encode(value, <span class="number">0</span>, value.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，值得注意的是，在使用这些方法的时候一定要注意编码问题。比如：</p>
<p><code>String s = &quot;你好，世界！&quot;; byte[] bytes = s.getBytes();</code></p>
<p>这段代码在不同的平台上运行得到结果是不一样的。由于没有指定编码方式，所以在该方法对字符串进行编码的时候就会使用系统的默认编码方式。</p>
<blockquote>
<p>在中文操作系统中可能会使用 GBK 或者 GB2312 进行编码，在英文操作系统中有可能使用 iso-8859-1 进行编码。这样写出来的代码就和机器环境有很强的关联性了，为了避免不必要的麻烦，要指定编码方式。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName) <span class="keyword">throws</span> UnsupportedEncodingException&#123;</div><div class="line">  <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">  <span class="keyword">return</span> StringCoding.encode(charsetName, value, <span class="number">0</span>, value.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="比较方法"><a href="#比较方法" class="headerlink" title="比较方法"></a>比较方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span>；</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contentEquals</span><span class="params">(String Buffersb)</span>；</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contentEquals</span><span class="params">(Char Sequencecs)</span>；</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span>；</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span>；</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareToIgnoreCase</span><span class="params">(String str)</span>；</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">int</span> toffset, String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span> <span class="comment">//局部匹配</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">boolean</span> ignoreCase, <span class="keyword">int</span> toffset, String other, <span class="keyword">int</span> ooffset, <span class="keyword">int</span> len)</span> <span class="comment">//局部匹配</span></span></div></pre></td></tr></table></figure>
<p>字符串有一系列方法用于比较两个字符串的关系。 前四个返回 boolean 的方法很容易理解，前三个比较就是比较 String 和要比较的目标对象的字符数组的内容，一样就返回true, 不一样就返回false，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = value.length; </div><div class="line"><span class="keyword">while</span> (n-- ! = <span class="number">0</span>) &#123;</div><div class="line">   <span class="keyword">if</span> (v1[i] != v2[i])</div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     i++;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>v1 v2 分别代表 String 的字符数组和目标对象的字符数组。 第四个和前三个唯一的区别就是他会将两个字符数组的内容都使用 toUpperCase 方法转换成大写再进行比较，以此来忽略大小写进行比较。相同则返回 true，不想同则返回 false</p>
</blockquote>
<p><strong>equals方法：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125; </div><div class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</div><div class="line">       String anotherString = (String) anObject;</div><div class="line">       <span class="keyword">int</span> n = value.length;</div><div class="line">       <span class="keyword">if</span> (n == anotherString.value.length) &#123;</div><div class="line">           <span class="keyword">char</span> v1[] = value;</div><div class="line">           <span class="keyword">char</span> v2[] = anotherString.value;</div><div class="line">           <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">           <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</div><div class="line">             <span class="keyword">if</span> (v1[i] != v2[i])</div><div class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">             i++;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125; </div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法首先判断this == anObject ？，也就是说判断要比较的对象和当前对象是不是同一个对象，如果是直接返回 true，如不是再继续比较，然后在判断<br> anObject 是不是 String<br>类型的，如果不是，直接返回 false，如果是再继续比较，到了能终于比较字符数组的时候，他还是先比较了两个数组的长度，不一样直接返回 false，一样再逐一比较值。 虽然代码写的内容比较多，但是可以很大程度上提高比较的效率。值得学习！！！</p>
<p>contentEquals 有两个重载:<br>StringBuffer 需要考虑线程安全问题，加锁之后再调用 contentEquals((CharSequence) sb) 方法。<br>contentEquals((CharSequence) sb) 则分两种情况，一种是 <code>cs instanceof AbstractStringBuilder</code>，另外一种是参数是 String 类型。具体比较方式几乎和 equals 方法类似，先做“宏观”比较，在做“微观”比较。</p>
<p>下面这个是equalsIgnoreCase代码的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String anotherString)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> (<span class="keyword">this</span> == anotherString) ? <span class="keyword">true</span> : (anotherString != <span class="keyword">null</span>) &amp;&amp; (anotherString.value.length == value.length) &amp;&amp; regionMatches(<span class="keyword">true</span>, <span class="number">0</span>, anotherString, <span class="number">0</span>, value.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到这段代码，眼前为之一亮。使用一个三目运算符和&amp;&amp;操作代替了多个 if 语句。</p>
<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> h = hash;</div><div class="line">  <span class="keyword">if</span>(h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">char</span> val[] = value;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++)&#123;</div><div class="line">      h = <span class="number">31</span> * h + val[i];</div><div class="line">    &#125;</div><div class="line">    hash = h;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> h;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>hashCode 的实现其实就是使用数学公式：s[0]<em>31^(n-1) + s[1]</em>31^(n-2) + … + s[n-1]</p>
</blockquote>
<p>所谓“冲突”，就是在存储数据计算hash地址的时候，我们希望尽量减少有同样的hash地址。如果使用相同 hash 地址的数据过多，那么这些数据所组成的 hash 链就更长，从而降低了查询效率。<br>所以在选择系数的时候要选择尽量长的系数并且让乘法尽量不要溢出的系数，因为如果计算出来的 hash 地址越大，所谓的“冲突”就越少，查找起来效率也会提高。</p>
<blockquote>
<p>现在很多虚拟机里面都有做相关优化，使用 31 的原因可能是为了更好的分配 hash 地址，并且 31 只占用 5 bits。</p>
</blockquote>
<p>在 Java 中，整型数是 32 位的，也就是说最多有2^32 = 4294967296 个整数，将任意一个字符串，经过 hashCode 计算之后，得到的整数应该在这 4294967296 数之中。那么，最多有 4294967297 个不同的字符串作 hashCode 之后，肯定有两个结果是一样的。</p>
<blockquote>
<p>hashCode 可以保证相同的字符串的 hash 值肯定相同，但是 hash 值相同并不一定是 value 值就相同。</p>
</blockquote>
<p><strong>substring</strong><br>前面我们介绍过，java 7 中的 substring 方法使用 String(value, beginIndex, subLen) 方法创建一个新的 String 并返回，这个方法会将原来的 char[] 中的值逐一复制到新的 String 中，两个数组并不是共享的，虽然这样做损失一些性能，但是有效地避免了内存泄露。</p>
<p><strong>replaceFirst、replaceAll、replace区别</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">replaceFirst</span><span class="params">(String regex, String replacement)</span></span></div><div class="line"><span class="function">String <span class="title">replaceAll</span><span class="params">(String regex, String replacement)</span></span></div><div class="line"><span class="function">String <span class="title">replace</span><span class="params">(Char Sequencetarget, Char Sequencereplacement)</span></span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(oldChar != newChar)&#123;</div><div class="line">    <span class="keyword">int</span> len = value.length;</div><div class="line">    <span class="keyword">int</span> i = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span>[] val = value; <span class="comment">/*avoid get field opcode*/</span></div><div class="line">    <span class="keyword">while</span> (++i &lt; len)&#123;</div><div class="line">      <span class="keyword">if</span> (val[i] == oldChar)&#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( i &lt; len )&#123;</div><div class="line">      <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">      <span class="keyword">for</span> (intj=<span class="number">0</span>; j&lt;i; j++)&#123;</div><div class="line">        buf[j] = val[j];</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">while</span> (i &lt; len)&#123;</div><div class="line">        <span class="keyword">char</span> c = val[i];</div><div class="line">        buf[i] = (c == oldChar) ? newChar : c;</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> String(buf,<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">   &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>replace 的参数是 char 和 CharSequence，即可以支持字符的替换, 也支持字符串的替换</li>
<li>replaceAll 和 replaceFirst 的参数是 regex，即基于规则表达式的替换</li>
</ul>
<blockquote>
<p>比如可以通过 replaceAll (“\d”, “*”)把一个字符串所有的数字字符都换成星号;</p>
</blockquote>
<p>相同点是都是全部替换，即把源字符串中的某一字符或字符串全部换成指定的字符或字符串，如果只想替换第一次出现的，可以使用 replaceFirst()，这个方法也是基于规则表达式的替换。另外,如果replaceAll() 和r eplaceFirst() 所用的参数据不是基于规则表达式的，则与replace()替换字符串的效果是一样的，即这两者也支持字符串的操作。</p>
<p><strong>copyValueOf 和 valueOf</strong><br>String的底层是由char[]实现的，早期的String构造器的实现呢，不会拷贝数组的，直接将参数的char[]数组作为String的value属性。字符数组将导致字符串的变化。<br>为了避免这个问题，提供了copyValueOf方法，每次都拷贝成新的字符数组来构造新的String对象。</p>
<blockquote>
<p>现在的String对象，在构造器中就通过拷贝新数组实现了，所以这两个方面在本质上已经没区别了。</p>
</blockquote>
<p>valueOf()有很多种形式的重载，包括：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> b ? <span class="string">"true"</span> : <span class="string">"false"</span>;</div><div class="line"> &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">       <span class="keyword">char</span> data[] = &#123;c&#125;;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(data, <span class="keyword">true</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> Integer.toString(i);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> Long.toString(l);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> Float.toString(f);</div><div class="line"> &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> Double.toString(d);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到这些方法可以将六种基本数据类型的变量转换成String类型。</p>
<p><strong>intern()方法</strong><br><code>public native String intern();</code> 该方法返回一个字符串对象的内部化引用。</p>
<p>String类维护一个初始为空的字符串的对象池，当intern方法被调用时，如果对象池中已经包含这一个相等的字符串对象则返回对象池中的实例，否则添加字符串到对象池并返回该字符串的引用。</p>
<h2 id="String-对-“-”-的重载"><a href="#String-对-“-”-的重载" class="headerlink" title="String 对 “+” 的重载"></a>String 对 “+” 的重载</h2><p>我们知道，Java 是不支持重载运算符，String 的 “+” 是 java 中唯一的一个重载运算符，那么 java 使如何实现这个加号的呢？我们先看一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     String string=<span class="string">"hollis"</span>;</div><div class="line">     String string2 = string + <span class="string">"chuang"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们将这段代码的实际执行情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">     String string = <span class="string">"hollis"</span>;</div><div class="line">     String string2 = (<span class="keyword">new</span>         </div><div class="line">     StringBuilder(String.valueOf(string))).append(<span class="string">"chuang"</span>).toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line">```kava</div><div class="line">看了反编译之后的代码我们发现，其实String对“+”的支持其实就是使用了StringBuilder以及他的append、toString两个方法。</div><div class="line"></div><div class="line">**String.valueOf和Integer.toString的区别**</div><div class="line"></div><div class="line">接下来我们看以下这段代码，我们有三种方式将一个<span class="keyword">int</span>类型的变量变成呢过String类型，那么他们有什么区别？</div><div class="line"></div><div class="line">```java</div><div class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</div><div class="line">String i1 = <span class="string">""</span> + i;</div><div class="line">String i2 = String.valueOf(i);</div><div class="line">String i3 = Integer.toString(i);</div></pre></td></tr></table></figure>
<p>第三行和第四行没有任何区别，因为String.valueOf(i)也是调用Integer.toString(i)来实现的。<br>第二行代码其实是 <code>String i1 = (new StringBuilder()).append(i).toString();</code></p>
<blockquote>
<p>首先创建了一个StringBuilder对象，然后再调用append方法，再调用toString方法。</p>
</blockquote>
<hr>
<h2 id="switch对字符串支持的实现"><a href="#switch对字符串支持的实现" class="headerlink" title="switch对字符串支持的实现"></a>switch对字符串支持的实现</h2><p>还是先上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">switchDemoString</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">         String str = <span class="string">"world"</span>;</div><div class="line">         <span class="keyword">switch</span> (str) &#123;</div><div class="line">         <span class="keyword">case</span> <span class="string">"hello"</span>: </div><div class="line">              System.out.println(<span class="string">"hello"</span>);</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> <span class="string">"world"</span>:</div><div class="line">             System.out.println(<span class="string">"world"</span>);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对编译后的代码进行反编译：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">       String str = <span class="string">"world"</span>;</div><div class="line">       String s;</div><div class="line">       <span class="keyword">switch</span>((s = str).hashCode()) &#123;</div><div class="line">          <span class="keyword">case</span> <span class="number">99162322</span>:</div><div class="line">               <span class="keyword">if</span>(s.equals(<span class="string">"hello"</span>))</div><div class="line">                   System.out.println(<span class="string">"hello"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">113318802</span>:</div><div class="line">               <span class="keyword">if</span>(s.equals(<span class="string">"world"</span>))</div><div class="line">                   System.out.println(<span class="string">"world"</span>);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>看到这个代码，你知道原来字符串的 switch 是通过 equals() 和 hashCode() 方法来实现的。记住，switch 中只能使用整型，比如byte，short，char(ackii 码是整型)以及 int。还好 hashCode() 方法返回的是 int 而不是 long。</p>
<blockquote>
<p>通过这个很容易记住 hashCode 返回的是 int 这个事实。仔细看下可以发现，进行 switch 的实际是哈希值，然后通过使用 equals 方法比较进行安全检查，这个检查是必要的，因为哈希可能会发生碰撞。</p>
</blockquote>
<p>因此性能是不如使用枚举进行switch或者使用纯整数常量，但这也不是很差。因为 Java 编译器只增加了一个 equals 方法，如果你比较的是字符串字面量的话会非常快，比如 ”abc” ==”abc”。如果你把 hashCode() 方法的调用也考虑进来了，那么还会再多一次的调用开销，因为字符串一旦创建了，它就会把哈希值缓存起来。</p>
<p>因此如果这个 siwtch 语句是用在一个循环里的，比如逐项处理某个值，或者游戏引擎循环地渲染屏幕，这里 hashCode() 方法的调用开销其实不会很大。</p>
<blockquote>
<p>其实 swich 只支持一种数据类型，那就是整型，其他数据类型都是转换成整型之后在使用switch的。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>一旦 string 对象在内存(堆)中被创建出来，就无法被修改。特别要注意的是，String 类的所有方法都没有改变字符串本身的值，都是返回了一个新的对象。</p>
</li>
<li><p>如果你需要一个可修改的字符串，应该使用 StringBuffer 或者 StringBuilder。否则会有大量时间浪费在垃圾回收上，因为每次试图修改都有新的string对象被创建出来。</p>
</li>
<li><p>如果你只需要创建一个字符串，你可以使用双引号的方式，如果你需要在堆中创建一个新的对象，你可以选择构造函数的方式。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android程序员的技术要求和学习路线]]></title>
      <url>/2016/03/06/Android%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A6%81%E6%B1%82%E5%92%8C%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      <content type="html"><![CDATA[<p>转载自知乎上关于<a href="https://www.zhihu.com/question/40064857" target="_blank" rel="external">Android程序员技术等级标准</a>的回答：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-2ff450c7e86e44ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识结构 .png"><br><img src="http://upload-images.jianshu.io/upload_images/580515-b8e459e34dc8745f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="知识储备.png"></p>
<p>如上图所描述的技能要求，可分为下面几大模块：</p>
<ul>
<li>通用知识</li>
<li>编程语言</li>
<li>Android</li>
<li>编码与设计</li>
<li><p>工具和方法</p>
<hr>
<p>对应学习线路如下<br>书籍准备：<br>1.疯狂Java和java编程思想<br>2.android高级编程<br>3.大话数据结构<br>4.代码整洁之道<br>5.Http权威指南<br>6.Head First 设计模式</p>
</li>
</ul>
<p>博客：chrome同步书签<br>笔记：印象笔记和onenote<br>记录：简书和CSDN<br>代码：github</p>
<p>![Uploading Paste_Image_429556.png . . .]</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于编程学习上的一些感悟——不忘初心]]></title>
      <url>/2015/12/01/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F%E2%80%94%E2%80%94%E4%B8%8D%E5%BF%98%E5%88%9D%E5%BF%83/</url>
      <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>今天无意中看到以前一起开发过的同学写的技术文章，了解到了更多在blog和github以及一些技术交流论坛上面非常活跃。回过头来看看自己，好像依然停留在以前的样子，似乎与真正在踏实学技术差距好像很大了，发现自己对技术的追求还远远不够。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580515-fba143d613786b80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dream.png"><br>本来还以为自己的学习已经很有节奏了，现在看来自己还停留在缓步前进的阶段。这一切真的是犹如当头棒喝，瞬间让我的内心有不小的震动，或许是时候要正视一下自己目前存在的问题，看看自己以前那种对技术追求的热爱到底还剩多少。</p>
<p><strong>学太杂乱而又不够深入</strong><br>-</p>
<p>表现在学习技术没有明确计划，每次学习技术文章都是一篇没看完，看到其中一个技术点就跳另外的一片技术文章去了。导致虽然看了很多文章，但结果都只是粗略接触了一下，并没有什么实际意义，造成浪费了时间却没有积累起知识。</p>
<ul>
<li>拟订一个学习计划，按照学习路线一步一步，由浅及深，而不是随手拿一篇就看。</li>
<li>看技术文章的时候，一定要明确目的性，要结合内容考虑问题，思考技术的可以带来的提升，以及可以实践应用的方向。</li>
<li>结合项目的实际编码，不要空于多看，一定要自己实际编码试验，而且学完之后一定要有技术总结或文章输出，另外可以的话，最好去阅读官方wiki和项目源码的实现逻辑。</li>
</ul>
<p><strong>要培养好的习惯</strong><br>-<br>学习技术应该要注意知识脉络的梳理和结构体系的构建，很多时候都是顺手一篇文章就看，看完之后没有及时归类梳理，看完之后又没总结，导致没有多少实际效果。</p>
<ul>
<li>每次的代码输出要push到github上，不要求有人start或浏览，主要方便自己的管理先。</li>
<li>可以考虑加入翻译组，共同翻译国外的前沿技术文章。</li>
<li>平时在知乎上面也可以活跃点，跟大牛多交流技术问题。</li>
<li>笔记和总结梳理的习惯</li>
</ul>
<p>• 初期过程不要求文章产出的质量有多高，先要养成一个习惯，不要求文章有多少人阅读，但是一定要有。不要求像同学一样建立自己的个人blog网页，先在csdn和简书上写着，以后可以努力往那个方向努力。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>找回自己对技术的热爱，不忘初心，保持一颗初学者的心，对技术单纯的向往和渴望，希望自己能重新找回那个内心真正想做的自己。</p>
<p>共勉！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
